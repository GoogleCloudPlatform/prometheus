import { NodePropSource, NodeType, Tree } from 'lezer-tree';
import { StyleModule, StyleSpec } from 'style-mod';
import { Extension, EditorState } from '@codemirror/state';

declare class Tag {
    readonly set: Tag[];
    static define(parent?: Tag): Tag;
    static defineModifier(): (tag: Tag) => Tag;
}
declare function styleTags(spec: {
    [selector: string]: Tag | readonly Tag[];
}): NodePropSource;
declare class HighlightStyle {
    readonly extension: Extension;
    readonly fallback: Extension;
    readonly module: StyleModule | null;
    private map;
    private scope;
    private all;
    private constructor();
    match(tag: Tag, scope: NodeType): string | null;
    static combinedMatch(styles: readonly HighlightStyle[]): (tag: Tag, scope: NodeType) => any;
    static define(specs: readonly TagStyle[], options?: {
        scope?: NodeType;
        all?: string | StyleSpec;
    }): HighlightStyle;
    static get(state: EditorState, tag: Tag, scope?: NodeType): string | null;
}
interface TagStyle {
    tag: Tag | readonly Tag[];
    class?: string;
    [styleProperty: string]: any;
}
declare function highlightTree(tree: Tree, getStyle: (tag: Tag, scope: NodeType) => string | null, putStyle: (from: number, to: number, classes: string) => void): void;
declare const tags: {
    comment: Tag;
    lineComment: Tag;
    blockComment: Tag;
    docComment: Tag;
    name: Tag;
    variableName: Tag;
    typeName: Tag;
    tagName: Tag;
    propertyName: Tag;
    className: Tag;
    labelName: Tag;
    namespace: Tag;
    macroName: Tag;
    literal: Tag;
    string: Tag;
    docString: Tag;
    character: Tag;
    number: Tag;
    integer: Tag;
    float: Tag;
    bool: Tag;
    regexp: Tag;
    escape: Tag;
    color: Tag;
    url: Tag;
    keyword: Tag;
    self: Tag;
    null: Tag;
    atom: Tag;
    unit: Tag;
    modifier: Tag;
    operatorKeyword: Tag;
    controlKeyword: Tag;
    definitionKeyword: Tag;
    operator: Tag;
    derefOperator: Tag;
    arithmeticOperator: Tag;
    logicOperator: Tag;
    bitwiseOperator: Tag;
    compareOperator: Tag;
    updateOperator: Tag;
    definitionOperator: Tag;
    typeOperator: Tag;
    controlOperator: Tag;
    punctuation: Tag;
    separator: Tag;
    bracket: Tag;
    angleBracket: Tag;
    squareBracket: Tag;
    paren: Tag;
    brace: Tag;
    content: Tag;
    heading: Tag;
    heading1: Tag;
    heading2: Tag;
    heading3: Tag;
    heading4: Tag;
    heading5: Tag;
    heading6: Tag;
    contentSeparator: Tag;
    list: Tag;
    quote: Tag;
    emphasis: Tag;
    strong: Tag;
    link: Tag;
    monospace: Tag;
    inserted: Tag;
    deleted: Tag;
    changed: Tag;
    invalid: Tag;
    meta: Tag;
    documentMeta: Tag;
    annotation: Tag;
    processingInstruction: Tag;
    definition: (tag: Tag) => Tag;
    constant: (tag: Tag) => Tag;
    function: (tag: Tag) => Tag;
    standard: (tag: Tag) => Tag;
    local: (tag: Tag) => Tag;
    special: (tag: Tag) => Tag;
};
declare const defaultHighlightStyle: HighlightStyle;
declare const classHighlightStyle: HighlightStyle;

export { HighlightStyle, Tag, TagStyle, classHighlightStyle, defaultHighlightStyle, highlightTree, styleTags, tags };
