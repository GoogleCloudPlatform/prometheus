{"ast":null,"code":"import React from'react';import{Alert,Table}from'reactstrap';import SeriesName from'./SeriesName';var limitSeries=function limitSeries(series){var maxSeries=10000;if(series.length>maxSeries){return series.slice(0,maxSeries);}return series;};var DataTable=function DataTable(_ref){var data=_ref.data;if(data===null){return/*#__PURE__*/React.createElement(Alert,{color:\"light\"},\"No data queried yet\");}if(data.result===null||data.result.length===0){return/*#__PURE__*/React.createElement(Alert,{color:\"secondary\"},\"Empty query result\");}var maxFormattableSize=1000;var rows=[];var limited=false;var doFormat=data.result.length<=maxFormattableSize;switch(data.resultType){case'vector':rows=limitSeries(data.result).map(function(s,index){return/*#__PURE__*/React.createElement(\"tr\",{key:index},/*#__PURE__*/React.createElement(\"td\",null,/*#__PURE__*/React.createElement(SeriesName,{labels:s.metric,format:doFormat})),/*#__PURE__*/React.createElement(\"td\",null,s.value[1]));});limited=rows.length!==data.result.length;break;case'matrix':rows=limitSeries(data.result).map(function(s,index){var valueText=s.values.map(function(v){return v[1]+' @'+v[0];}).join('\\n');return/*#__PURE__*/React.createElement(\"tr\",{style:{whiteSpace:'pre'},key:index},/*#__PURE__*/React.createElement(\"td\",null,/*#__PURE__*/React.createElement(SeriesName,{labels:s.metric,format:doFormat})),/*#__PURE__*/React.createElement(\"td\",null,valueText));});limited=rows.length!==data.result.length;break;case'scalar':rows.push(/*#__PURE__*/React.createElement(\"tr\",{key:\"0\"},/*#__PURE__*/React.createElement(\"td\",null,\"scalar\"),/*#__PURE__*/React.createElement(\"td\",null,data.result[1])));break;case'string':rows.push(/*#__PURE__*/React.createElement(\"tr\",{key:\"0\"},/*#__PURE__*/React.createElement(\"td\",null,\"string\"),/*#__PURE__*/React.createElement(\"td\",null,data.result[1])));break;default:return/*#__PURE__*/React.createElement(Alert,{color:\"danger\"},\"Unsupported result value type\");}return/*#__PURE__*/React.createElement(React.Fragment,null,limited&&/*#__PURE__*/React.createElement(Alert,{color:\"danger\"},/*#__PURE__*/React.createElement(\"strong\",null,\"Warning:\"),\" Fetched \",data.result.length,\" metrics, only displaying first \",rows.length,\".\"),!doFormat&&/*#__PURE__*/React.createElement(Alert,{color:\"secondary\"},/*#__PURE__*/React.createElement(\"strong\",null,\"Notice:\"),\" Showing more than \",maxFormattableSize,\" series, turning off label formatting for performance reasons.\"),/*#__PURE__*/React.createElement(Table,{hover:true,size:\"sm\",className:\"data-table\"},/*#__PURE__*/React.createElement(\"tbody\",null,rows)));};export default DataTable;","map":{"version":3,"sources":["/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/src/pages/graph/DataTable.tsx"],"names":["React","Alert","Table","SeriesName","limitSeries","series","maxSeries","length","slice","DataTable","data","result","maxFormattableSize","rows","limited","doFormat","resultType","map","s","index","metric","value","valueText","values","v","join","whiteSpace","push"],"mappings":"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","sourcesContent":["import React, { FC, ReactNode } from 'react';\n\nimport { Alert, Table } from 'reactstrap';\n\nimport SeriesName from './SeriesName';\nimport { Metric } from '../../types/types';\n\nexport interface QueryResult {\n  data:\n    | null\n    | {\n        resultType: 'vector';\n        result: InstantSample[];\n      }\n    | {\n        resultType: 'matrix';\n        result: RangeSamples[];\n      }\n    | {\n        resultType: 'scalar';\n        result: SampleValue;\n      }\n    | {\n        resultType: 'string';\n        result: string;\n      };\n}\n\ninterface InstantSample {\n  metric: Metric;\n  value: SampleValue;\n}\n\ninterface RangeSamples {\n  metric: Metric;\n  values: SampleValue[];\n}\n\ntype SampleValue = [number, string];\n\nconst limitSeries = <S extends InstantSample | RangeSamples>(series: S[]): S[] => {\n  const maxSeries = 10000;\n\n  if (series.length > maxSeries) {\n    return series.slice(0, maxSeries);\n  }\n  return series;\n};\n\nconst DataTable: FC<QueryResult> = ({ data }) => {\n  if (data === null) {\n    return <Alert color=\"light\">No data queried yet</Alert>;\n  }\n\n  if (data.result === null || data.result.length === 0) {\n    return <Alert color=\"secondary\">Empty query result</Alert>;\n  }\n\n  const maxFormattableSize = 1000;\n  let rows: ReactNode[] = [];\n  let limited = false;\n  const doFormat = data.result.length <= maxFormattableSize;\n  switch (data.resultType) {\n    case 'vector':\n      rows = (limitSeries(data.result) as InstantSample[]).map(\n        (s: InstantSample, index: number): ReactNode => {\n          return (\n            <tr key={index}>\n              <td>\n                <SeriesName labels={s.metric} format={doFormat} />\n              </td>\n              <td>{s.value[1]}</td>\n            </tr>\n          );\n        }\n      );\n      limited = rows.length !== data.result.length;\n      break;\n    case 'matrix':\n      rows = (limitSeries(data.result) as RangeSamples[]).map((s, index) => {\n        const valueText = s.values\n          .map(v => {\n            return v[1] + ' @' + v[0];\n          })\n          .join('\\n');\n        return (\n          <tr style={{ whiteSpace: 'pre' }} key={index}>\n            <td>\n              <SeriesName labels={s.metric} format={doFormat} />\n            </td>\n            <td>{valueText}</td>\n          </tr>\n        );\n      });\n      limited = rows.length !== data.result.length;\n      break;\n    case 'scalar':\n      rows.push(\n        <tr key=\"0\">\n          <td>scalar</td>\n          <td>{data.result[1]}</td>\n        </tr>\n      );\n      break;\n    case 'string':\n      rows.push(\n        <tr key=\"0\">\n          <td>string</td>\n          <td>{data.result[1]}</td>\n        </tr>\n      );\n      break;\n    default:\n      return <Alert color=\"danger\">Unsupported result value type</Alert>;\n  }\n\n  return (\n    <>\n      {limited && (\n        <Alert color=\"danger\">\n          <strong>Warning:</strong> Fetched {data.result.length} metrics, only displaying first {rows.length}.\n        </Alert>\n      )}\n      {!doFormat && (\n        <Alert color=\"secondary\">\n          <strong>Notice:</strong> Showing more than {maxFormattableSize} series, turning off label formatting for\n          performance reasons.\n        </Alert>\n      )}\n      <Table hover size=\"sm\" className=\"data-table\">\n        <tbody>{rows}</tbody>\n      </Table>\n    </>\n  );\n};\n\nexport default DataTable;\n"]},"metadata":{},"sourceType":"module"}