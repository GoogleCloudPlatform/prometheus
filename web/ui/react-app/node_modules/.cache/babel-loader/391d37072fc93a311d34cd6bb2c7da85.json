{"ast":null,"code":"import _slicedToArray from\"/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import{Badge,Table}from'reactstrap';import{ToggleMoreLess}from'../../components/ToggleMoreLess';var formatLabels=function formatLabels(labels){return Object.entries(labels).map(function(_ref){var _ref2=_slicedToArray(_ref,2),key=_ref2[0],value=_ref2[1];return/*#__PURE__*/React.createElement(\"div\",{key:key},/*#__PURE__*/React.createElement(Badge,{color:\"primary\",className:\"mr-1\"},\"\".concat(key,\"=\\\"\").concat(value,\"\\\"\")));});};export var LabelsTable=function LabelsTable(_ref3){var value=_ref3.value,name=_ref3.name;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),showMore=_useState2[0],setShowMore=_useState2[1];return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(ToggleMoreLess,{event:function event(){setShowMore(!showMore);},showMore:showMore},/*#__PURE__*/React.createElement(\"span\",{className:\"target-head\"},name))),showMore?/*#__PURE__*/React.createElement(Table,{size:\"sm\",bordered:true,hover:true,striped:true},/*#__PURE__*/React.createElement(\"thead\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"th\",null,\"Discovered Labels\"),/*#__PURE__*/React.createElement(\"th\",null,\"Target Labels\"))),/*#__PURE__*/React.createElement(\"tbody\",null,value.map(function(_,i){return/*#__PURE__*/React.createElement(\"tr\",{key:i},/*#__PURE__*/React.createElement(\"td\",null,formatLabels(value[i].discoveredLabels)),value[i].isDropped?/*#__PURE__*/React.createElement(\"td\",{style:{fontWeight:'bold'}},\"Dropped\"):/*#__PURE__*/React.createElement(\"td\",null,formatLabels(value[i].labels)));}))):null);};","map":{"version":3,"sources":["/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/src/pages/serviceDiscovery/LabelsTable.tsx"],"names":["React","useState","Badge","Table","ToggleMoreLess","formatLabels","labels","Object","entries","map","key","value","LabelsTable","name","showMore","setShowMore","_","i","discoveredLabels","isDropped","fontWeight"],"mappings":"kOAAA,MAAOA,CAAAA,KAAP,EAAoBC,QAApB,KAAoC,OAApC,CAEA,OAASC,KAAT,CAAgBC,KAAhB,KAA6B,YAA7B,CAEA,OAASC,cAAT,KAA+B,iCAA/B,CAOA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,MAAD,CAA6C,CAChE,MAAOC,CAAAA,MAAM,CAACC,OAAP,CAAeF,MAAf,EAAuBG,GAAvB,CAA2B,cAAkB,kCAAhBC,GAAgB,UAAXC,KAAW,UAClD,mBACE,2BAAK,GAAG,CAAED,GAAV,eACE,oBAAC,KAAD,EAAO,KAAK,CAAC,SAAb,CAAuB,SAAS,CAAC,MAAjC,YACMA,GADN,eACcC,KADd,OADF,CADF,CAOD,CARM,CAAP,CASD,CAVD,CAYA,MAAO,IAAMC,CAAAA,WAAiD,CAAG,QAApDA,CAAAA,WAAoD,OAAqB,IAAlBD,CAAAA,KAAkB,OAAlBA,KAAkB,CAAXE,IAAW,OAAXA,IAAW,CACpF,cAAgCZ,QAAQ,CAAC,KAAD,CAAxC,wCAAOa,QAAP,eAAiBC,WAAjB,eAEA,mBACE,qDACE,4CACE,oBAAC,cAAD,EACE,KAAK,CAAE,gBAAY,CACjBA,WAAW,CAAC,CAACD,QAAF,CAAX,CACD,CAHH,CAIE,QAAQ,CAAEA,QAJZ,eAME,4BAAM,SAAS,CAAC,aAAhB,EAA+BD,IAA/B,CANF,CADF,CADF,CAWGC,QAAQ,cACP,oBAAC,KAAD,EAAO,IAAI,CAAC,IAAZ,CAAiB,QAAQ,KAAzB,CAA0B,KAAK,KAA/B,CAAgC,OAAO,KAAvC,eACE,8CACE,2CACE,kDADF,cAEE,8CAFF,CADF,CADF,cAOE,iCACGH,KAAK,CAACF,GAAN,CAAU,SAACO,CAAD,CAAIC,CAAJ,CAAU,CACnB,mBACE,0BAAI,GAAG,CAAEA,CAAT,eACE,8BAAKZ,YAAY,CAACM,KAAK,CAACM,CAAD,CAAL,CAASC,gBAAV,CAAjB,CADF,CAEGP,KAAK,CAACM,CAAD,CAAL,CAASE,SAAT,cACC,0BAAI,KAAK,CAAE,CAAEC,UAAU,CAAE,MAAd,CAAX,YADD,cAGC,8BAAKf,YAAY,CAACM,KAAK,CAACM,CAAD,CAAL,CAASX,MAAV,CAAjB,CALJ,CADF,CAUD,CAXA,CADH,CAPF,CADO,CAuBL,IAlCN,CADF,CAsCD,CAzCM","sourcesContent":["import React, { FC, useState } from 'react';\nimport { RouteComponentProps } from '@reach/router';\nimport { Badge, Table } from 'reactstrap';\nimport { TargetLabels } from './Services';\nimport { ToggleMoreLess } from '../../components/ToggleMoreLess';\n\ninterface LabelProps {\n  value: TargetLabels[];\n  name: string;\n}\n\nconst formatLabels = (labels: Record<string, string> | string) => {\n  return Object.entries(labels).map(([key, value]) => {\n    return (\n      <div key={key}>\n        <Badge color=\"primary\" className=\"mr-1\">\n          {`${key}=\"${value}\"`}\n        </Badge>\n      </div>\n    );\n  });\n};\n\nexport const LabelsTable: FC<RouteComponentProps & LabelProps> = ({ value, name }) => {\n  const [showMore, setShowMore] = useState(false);\n\n  return (\n    <>\n      <div>\n        <ToggleMoreLess\n          event={(): void => {\n            setShowMore(!showMore);\n          }}\n          showMore={showMore}\n        >\n          <span className=\"target-head\">{name}</span>\n        </ToggleMoreLess>\n      </div>\n      {showMore ? (\n        <Table size=\"sm\" bordered hover striped>\n          <thead>\n            <tr>\n              <th>Discovered Labels</th>\n              <th>Target Labels</th>\n            </tr>\n          </thead>\n          <tbody>\n            {value.map((_, i) => {\n              return (\n                <tr key={i}>\n                  <td>{formatLabels(value[i].discoveredLabels)}</td>\n                  {value[i].isDropped ? (\n                    <td style={{ fontWeight: 'bold' }}>Dropped</td>\n                  ) : (\n                    <td>{formatLabels(value[i].labels)}</td>\n                  )}\n                </tr>\n              );\n            })}\n          </tbody>\n        </Table>\n      ) : null}\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}