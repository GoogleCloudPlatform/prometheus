{"ast":null,"code":"import _slicedToArray from\"/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import{Button}from'reactstrap';import CopyToClipboard from'react-copy-to-clipboard';import{withStatusIndicator}from'../../components/withStatusIndicator';import{useFetch}from'../../hooks/useFetch';import{usePathPrefix}from'../../contexts/PathPrefixContext';import{API_PATH}from'../../constants/constants';var YamlContent=function YamlContent(_ref){var yaml=_ref.yaml;return/*#__PURE__*/React.createElement(\"pre\",{className:\"config-yaml\"},yaml);};YamlContent.displayName='Config';var ConfigWithStatusIndicator=withStatusIndicator(YamlContent);export var ConfigContent=function ConfigContent(_ref2){var error=_ref2.error,data=_ref2.data;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),copied=_useState2[0],setCopied=_useState2[1];var config=data&&data.yaml;return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"h2\",null,\"Configuration\\xA0\",/*#__PURE__*/React.createElement(CopyToClipboard,{text:config,onCopy:function onCopy(_,result){setCopied(result);setTimeout(setCopied,1500);}},/*#__PURE__*/React.createElement(Button,{color:\"light\",disabled:!config},copied?'Copied':'Copy to clipboard'))),/*#__PURE__*/React.createElement(ConfigWithStatusIndicator,{error:error,isLoading:!config,yaml:config}));};var Config=function Config(){var pathPrefix=usePathPrefix();var _useFetch=useFetch(\"\".concat(pathPrefix,\"/\").concat(API_PATH,\"/status/config\")),response=_useFetch.response,error=_useFetch.error;return/*#__PURE__*/React.createElement(ConfigContent,{error:error,data:response.data});};export default Config;","map":{"version":3,"sources":["/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/src/pages/config/Config.tsx"],"names":["React","useState","Button","CopyToClipboard","withStatusIndicator","useFetch","usePathPrefix","API_PATH","YamlContent","yaml","displayName","ConfigWithStatusIndicator","ConfigContent","error","data","copied","setCopied","config","_","result","setTimeout","Config","pathPrefix","response"],"mappings":"kOAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAoC,OAApC,CAEA,OAASC,MAAT,KAAuB,YAAvB,CACA,MAAOC,CAAAA,eAAP,KAA4B,yBAA5B,CAEA,OAASC,mBAAT,KAAoC,sCAApC,CACA,OAASC,QAAT,KAAyB,sBAAzB,CACA,OAASC,aAAT,KAA8B,kCAA9B,CACA,OAASC,QAAT,KAAyB,2BAAzB,CASA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,UAAGC,CAAAA,IAAH,MAAGA,IAAH,oBAA0B,2BAAK,SAAS,CAAC,aAAf,EAA8BA,IAA9B,CAA1B,EAApB,CACAD,WAAW,CAACE,WAAZ,CAA0B,QAA1B,CAEA,GAAMC,CAAAA,yBAAyB,CAAGP,mBAAmB,CAACI,WAAD,CAArD,CAEA,MAAO,IAAMI,CAAAA,aAAqC,CAAG,QAAxCA,CAAAA,aAAwC,OAAqB,IAAlBC,CAAAA,KAAkB,OAAlBA,KAAkB,CAAXC,IAAW,OAAXA,IAAW,CACxE,cAA4Bb,QAAQ,CAAC,KAAD,CAApC,wCAAOc,MAAP,eAAeC,SAAf,eACA,GAAMC,CAAAA,MAAM,CAAGH,IAAI,EAAIA,IAAI,CAACL,IAA5B,CACA,mBACE,qDACE,+DAEE,oBAAC,eAAD,EACE,IAAI,CAAEQ,MADR,CAEE,MAAM,CAAE,gBAACC,CAAD,CAAIC,MAAJ,CAAe,CACrBH,SAAS,CAACG,MAAD,CAAT,CACAC,UAAU,CAACJ,SAAD,CAAY,IAAZ,CAAV,CACD,CALH,eAOE,oBAAC,MAAD,EAAQ,KAAK,CAAC,OAAd,CAAsB,QAAQ,CAAE,CAACC,MAAjC,EACGF,MAAM,CAAG,QAAH,CAAc,mBADvB,CAPF,CAFF,CADF,cAeE,oBAAC,yBAAD,EAA2B,KAAK,CAAEF,KAAlC,CAAyC,SAAS,CAAE,CAACI,MAArD,CAA6D,IAAI,CAAEA,MAAnE,EAfF,CADF,CAmBD,CAtBM,CAwBP,GAAMI,CAAAA,MAA+B,CAAG,QAAlCA,CAAAA,MAAkC,EAAM,CAC5C,GAAMC,CAAAA,UAAU,CAAGhB,aAAa,EAAhC,CACA,cAA4BD,QAAQ,WAAgBiB,UAAhB,aAA8Bf,QAA9B,mBAApC,CAAQgB,QAAR,WAAQA,QAAR,CAAkBV,KAAlB,WAAkBA,KAAlB,CACA,mBAAO,oBAAC,aAAD,EAAe,KAAK,CAAEA,KAAtB,CAA6B,IAAI,CAAEU,QAAQ,CAACT,IAA5C,EAAP,CACD,CAJD,CAMA,cAAeO,CAAAA,MAAf","sourcesContent":["import React, { useState, FC } from 'react';\nimport { RouteComponentProps } from '@reach/router';\nimport { Button } from 'reactstrap';\nimport CopyToClipboard from 'react-copy-to-clipboard';\n\nimport { withStatusIndicator } from '../../components/withStatusIndicator';\nimport { useFetch } from '../../hooks/useFetch';\nimport { usePathPrefix } from '../../contexts/PathPrefixContext';\nimport { API_PATH } from '../../constants/constants';\n\ntype YamlConfig = { yaml?: string };\n\ninterface ConfigContentProps {\n  error?: Error;\n  data?: YamlConfig;\n}\n\nconst YamlContent = ({ yaml }: YamlConfig) => <pre className=\"config-yaml\">{yaml}</pre>;\nYamlContent.displayName = 'Config';\n\nconst ConfigWithStatusIndicator = withStatusIndicator(YamlContent);\n\nexport const ConfigContent: FC<ConfigContentProps> = ({ error, data }) => {\n  const [copied, setCopied] = useState(false);\n  const config = data && data.yaml;\n  return (\n    <>\n      <h2>\n        Configuration&nbsp;\n        <CopyToClipboard\n          text={config!}\n          onCopy={(_, result) => {\n            setCopied(result);\n            setTimeout(setCopied, 1500);\n          }}\n        >\n          <Button color=\"light\" disabled={!config}>\n            {copied ? 'Copied' : 'Copy to clipboard'}\n          </Button>\n        </CopyToClipboard>\n      </h2>\n      <ConfigWithStatusIndicator error={error} isLoading={!config} yaml={config} />\n    </>\n  );\n};\n\nconst Config: FC<RouteComponentProps> = () => {\n  const pathPrefix = usePathPrefix();\n  const { response, error } = useFetch<YamlConfig>(`${pathPrefix}/${API_PATH}/status/config`);\n  return <ConfigContent error={error} data={response.data} />;\n};\n\nexport default Config;\n"]},"metadata":{},"sourceType":"module"}