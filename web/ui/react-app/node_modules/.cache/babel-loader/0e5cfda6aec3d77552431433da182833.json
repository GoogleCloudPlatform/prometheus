{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar DEFAULT_RAW = {\n  colon: ': ',\n  indent: '    ',\n  beforeDecl: '\\n',\n  beforeRule: '\\n',\n  beforeOpen: ' ',\n  beforeClose: '\\n',\n  beforeComment: '\\n',\n  after: '\\n',\n  emptyBody: '',\n  commentLeft: ' ',\n  commentRight: ' ',\n  semicolon: false\n};\n\nfunction capitalize(str) {\n  return str[0].toUpperCase() + str.slice(1);\n}\n\nvar Stringifier = /*#__PURE__*/function () {\n  function Stringifier(builder) {\n    _classCallCheck(this, Stringifier);\n\n    this.builder = builder;\n  }\n\n  _createClass(Stringifier, [{\n    key: \"stringify\",\n    value: function stringify(node, semicolon) {\n      /* istanbul ignore if */\n      if (!this[node.type]) {\n        throw new Error('Unknown AST node type ' + node.type + '. ' + 'Maybe you need to change PostCSS stringifier.');\n      }\n\n      this[node.type](node, semicolon);\n    }\n  }, {\n    key: \"root\",\n    value: function root(node) {\n      this.body(node);\n      if (node.raws.after) this.builder(node.raws.after);\n    }\n  }, {\n    key: \"comment\",\n    value: function comment(node) {\n      var left = this.raw(node, 'left', 'commentLeft');\n      var right = this.raw(node, 'right', 'commentRight');\n      this.builder('/*' + left + node.text + right + '*/', node);\n    }\n  }, {\n    key: \"decl\",\n    value: function decl(node, semicolon) {\n      var between = this.raw(node, 'between', 'colon');\n      var string = node.prop + between + this.rawValue(node, 'value');\n\n      if (node.important) {\n        string += node.raws.important || ' !important';\n      }\n\n      if (semicolon) string += ';';\n      this.builder(string, node);\n    }\n  }, {\n    key: \"rule\",\n    value: function rule(node) {\n      this.block(node, this.rawValue(node, 'selector'));\n\n      if (node.raws.ownSemicolon) {\n        this.builder(node.raws.ownSemicolon, node, 'end');\n      }\n    }\n  }, {\n    key: \"atrule\",\n    value: function atrule(node, semicolon) {\n      var name = '@' + node.name;\n      var params = node.params ? this.rawValue(node, 'params') : '';\n\n      if (typeof node.raws.afterName !== 'undefined') {\n        name += node.raws.afterName;\n      } else if (params) {\n        name += ' ';\n      }\n\n      if (node.nodes) {\n        this.block(node, name + params);\n      } else {\n        var end = (node.raws.between || '') + (semicolon ? ';' : '');\n        this.builder(name + params + end, node);\n      }\n    }\n  }, {\n    key: \"body\",\n    value: function body(node) {\n      var last = node.nodes.length - 1;\n\n      while (last > 0) {\n        if (node.nodes[last].type !== 'comment') break;\n        last -= 1;\n      }\n\n      var semicolon = this.raw(node, 'semicolon');\n\n      for (var i = 0; i < node.nodes.length; i++) {\n        var child = node.nodes[i];\n        var before = this.raw(child, 'before');\n        if (before) this.builder(before);\n        this.stringify(child, last !== i || semicolon);\n      }\n    }\n  }, {\n    key: \"block\",\n    value: function block(node, start) {\n      var between = this.raw(node, 'between', 'beforeOpen');\n      this.builder(start + between + '{', node, 'start');\n      var after;\n\n      if (node.nodes && node.nodes.length) {\n        this.body(node);\n        after = this.raw(node, 'after');\n      } else {\n        after = this.raw(node, 'after', 'emptyBody');\n      }\n\n      if (after) this.builder(after);\n      this.builder('}', node, 'end');\n    }\n  }, {\n    key: \"raw\",\n    value: function raw(node, own, detect) {\n      var value;\n      if (!detect) detect = own; // Already had\n\n      if (own) {\n        value = node.raws[own];\n        if (typeof value !== 'undefined') return value;\n      }\n\n      var parent = node.parent; // Hack for first rule in CSS\n\n      if (detect === 'before') {\n        if (!parent || parent.type === 'root' && parent.first === node) {\n          return '';\n        }\n      } // Floating child without parent\n\n\n      if (!parent) return DEFAULT_RAW[detect]; // Detect style by other nodes\n\n      var root = node.root();\n      if (!root.rawCache) root.rawCache = {};\n\n      if (typeof root.rawCache[detect] !== 'undefined') {\n        return root.rawCache[detect];\n      }\n\n      if (detect === 'before' || detect === 'after') {\n        return this.beforeAfter(node, detect);\n      } else {\n        var method = 'raw' + capitalize(detect);\n\n        if (this[method]) {\n          value = this[method](root, node);\n        } else {\n          root.walk(function (i) {\n            value = i.raws[own];\n            if (typeof value !== 'undefined') return false;\n          });\n        }\n      }\n\n      if (typeof value === 'undefined') value = DEFAULT_RAW[detect];\n      root.rawCache[detect] = value;\n      return value;\n    }\n  }, {\n    key: \"rawSemicolon\",\n    value: function rawSemicolon(root) {\n      var value;\n      root.walk(function (i) {\n        if (i.nodes && i.nodes.length && i.last.type === 'decl') {\n          value = i.raws.semicolon;\n          if (typeof value !== 'undefined') return false;\n        }\n      });\n      return value;\n    }\n  }, {\n    key: \"rawEmptyBody\",\n    value: function rawEmptyBody(root) {\n      var value;\n      root.walk(function (i) {\n        if (i.nodes && i.nodes.length === 0) {\n          value = i.raws.after;\n          if (typeof value !== 'undefined') return false;\n        }\n      });\n      return value;\n    }\n  }, {\n    key: \"rawIndent\",\n    value: function rawIndent(root) {\n      if (root.raws.indent) return root.raws.indent;\n      var value;\n      root.walk(function (i) {\n        var p = i.parent;\n\n        if (p && p !== root && p.parent && p.parent === root) {\n          if (typeof i.raws.before !== 'undefined') {\n            var parts = i.raws.before.split('\\n');\n            value = parts[parts.length - 1];\n            value = value.replace(/\\S/g, '');\n            return false;\n          }\n        }\n      });\n      return value;\n    }\n  }, {\n    key: \"rawBeforeComment\",\n    value: function rawBeforeComment(root, node) {\n      var value;\n      root.walkComments(function (i) {\n        if (typeof i.raws.before !== 'undefined') {\n          value = i.raws.before;\n\n          if (value.includes('\\n')) {\n            value = value.replace(/[^\\n]+$/, '');\n          }\n\n          return false;\n        }\n      });\n\n      if (typeof value === 'undefined') {\n        value = this.raw(node, null, 'beforeDecl');\n      } else if (value) {\n        value = value.replace(/\\S/g, '');\n      }\n\n      return value;\n    }\n  }, {\n    key: \"rawBeforeDecl\",\n    value: function rawBeforeDecl(root, node) {\n      var value;\n      root.walkDecls(function (i) {\n        if (typeof i.raws.before !== 'undefined') {\n          value = i.raws.before;\n\n          if (value.includes('\\n')) {\n            value = value.replace(/[^\\n]+$/, '');\n          }\n\n          return false;\n        }\n      });\n\n      if (typeof value === 'undefined') {\n        value = this.raw(node, null, 'beforeRule');\n      } else if (value) {\n        value = value.replace(/\\S/g, '');\n      }\n\n      return value;\n    }\n  }, {\n    key: \"rawBeforeRule\",\n    value: function rawBeforeRule(root) {\n      var value;\n      root.walk(function (i) {\n        if (i.nodes && (i.parent !== root || root.first !== i)) {\n          if (typeof i.raws.before !== 'undefined') {\n            value = i.raws.before;\n\n            if (value.includes('\\n')) {\n              value = value.replace(/[^\\n]+$/, '');\n            }\n\n            return false;\n          }\n        }\n      });\n      if (value) value = value.replace(/\\S/g, '');\n      return value;\n    }\n  }, {\n    key: \"rawBeforeClose\",\n    value: function rawBeforeClose(root) {\n      var value;\n      root.walk(function (i) {\n        if (i.nodes && i.nodes.length > 0) {\n          if (typeof i.raws.after !== 'undefined') {\n            value = i.raws.after;\n\n            if (value.includes('\\n')) {\n              value = value.replace(/[^\\n]+$/, '');\n            }\n\n            return false;\n          }\n        }\n      });\n      if (value) value = value.replace(/\\S/g, '');\n      return value;\n    }\n  }, {\n    key: \"rawBeforeOpen\",\n    value: function rawBeforeOpen(root) {\n      var value;\n      root.walk(function (i) {\n        if (i.type !== 'decl') {\n          value = i.raws.between;\n          if (typeof value !== 'undefined') return false;\n        }\n      });\n      return value;\n    }\n  }, {\n    key: \"rawColon\",\n    value: function rawColon(root) {\n      var value;\n      root.walkDecls(function (i) {\n        if (typeof i.raws.between !== 'undefined') {\n          value = i.raws.between.replace(/[^\\s:]/g, '');\n          return false;\n        }\n      });\n      return value;\n    }\n  }, {\n    key: \"beforeAfter\",\n    value: function beforeAfter(node, detect) {\n      var value;\n\n      if (node.type === 'decl') {\n        value = this.raw(node, null, 'beforeDecl');\n      } else if (node.type === 'comment') {\n        value = this.raw(node, null, 'beforeComment');\n      } else if (detect === 'before') {\n        value = this.raw(node, null, 'beforeRule');\n      } else {\n        value = this.raw(node, null, 'beforeClose');\n      }\n\n      var buf = node.parent;\n      var depth = 0;\n\n      while (buf && buf.type !== 'root') {\n        depth += 1;\n        buf = buf.parent;\n      }\n\n      if (value.includes('\\n')) {\n        var indent = this.raw(node, null, 'indent');\n\n        if (indent.length) {\n          for (var step = 0; step < depth; step++) {\n            value += indent;\n          }\n        }\n      }\n\n      return value;\n    }\n  }, {\n    key: \"rawValue\",\n    value: function rawValue(node, prop) {\n      var value = node[prop];\n      var raw = node.raws[prop];\n\n      if (raw && raw.value === value) {\n        return raw.raw;\n      }\n\n      return value;\n    }\n  }]);\n\n  return Stringifier;\n}();\n\nmodule.exports = Stringifier;","map":{"version":3,"sources":["/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/sanitize-html/node_modules/postcss/lib/stringifier.js"],"names":["DEFAULT_RAW","colon","indent","beforeDecl","beforeRule","beforeOpen","beforeClose","beforeComment","after","emptyBody","commentLeft","commentRight","semicolon","capitalize","str","toUpperCase","slice","Stringifier","builder","node","type","Error","body","raws","left","raw","right","text","between","string","prop","rawValue","important","block","ownSemicolon","name","params","afterName","nodes","end","last","length","i","child","before","stringify","start","own","detect","value","parent","first","root","rawCache","beforeAfter","method","walk","p","parts","split","replace","walkComments","includes","walkDecls","buf","depth","step","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst DEFAULT_RAW = {\n  colon: ': ',\n  indent: '    ',\n  beforeDecl: '\\n',\n  beforeRule: '\\n',\n  beforeOpen: ' ',\n  beforeClose: '\\n',\n  beforeComment: '\\n',\n  after: '\\n',\n  emptyBody: '',\n  commentLeft: ' ',\n  commentRight: ' ',\n  semicolon: false\n}\n\nfunction capitalize(str) {\n  return str[0].toUpperCase() + str.slice(1)\n}\n\nclass Stringifier {\n  constructor(builder) {\n    this.builder = builder\n  }\n\n  stringify(node, semicolon) {\n    /* istanbul ignore if */\n    if (!this[node.type]) {\n      throw new Error(\n        'Unknown AST node type ' +\n          node.type +\n          '. ' +\n          'Maybe you need to change PostCSS stringifier.'\n      )\n    }\n    this[node.type](node, semicolon)\n  }\n\n  root(node) {\n    this.body(node)\n    if (node.raws.after) this.builder(node.raws.after)\n  }\n\n  comment(node) {\n    let left = this.raw(node, 'left', 'commentLeft')\n    let right = this.raw(node, 'right', 'commentRight')\n    this.builder('/*' + left + node.text + right + '*/', node)\n  }\n\n  decl(node, semicolon) {\n    let between = this.raw(node, 'between', 'colon')\n    let string = node.prop + between + this.rawValue(node, 'value')\n\n    if (node.important) {\n      string += node.raws.important || ' !important'\n    }\n\n    if (semicolon) string += ';'\n    this.builder(string, node)\n  }\n\n  rule(node) {\n    this.block(node, this.rawValue(node, 'selector'))\n    if (node.raws.ownSemicolon) {\n      this.builder(node.raws.ownSemicolon, node, 'end')\n    }\n  }\n\n  atrule(node, semicolon) {\n    let name = '@' + node.name\n    let params = node.params ? this.rawValue(node, 'params') : ''\n\n    if (typeof node.raws.afterName !== 'undefined') {\n      name += node.raws.afterName\n    } else if (params) {\n      name += ' '\n    }\n\n    if (node.nodes) {\n      this.block(node, name + params)\n    } else {\n      let end = (node.raws.between || '') + (semicolon ? ';' : '')\n      this.builder(name + params + end, node)\n    }\n  }\n\n  body(node) {\n    let last = node.nodes.length - 1\n    while (last > 0) {\n      if (node.nodes[last].type !== 'comment') break\n      last -= 1\n    }\n\n    let semicolon = this.raw(node, 'semicolon')\n    for (let i = 0; i < node.nodes.length; i++) {\n      let child = node.nodes[i]\n      let before = this.raw(child, 'before')\n      if (before) this.builder(before)\n      this.stringify(child, last !== i || semicolon)\n    }\n  }\n\n  block(node, start) {\n    let between = this.raw(node, 'between', 'beforeOpen')\n    this.builder(start + between + '{', node, 'start')\n\n    let after\n    if (node.nodes && node.nodes.length) {\n      this.body(node)\n      after = this.raw(node, 'after')\n    } else {\n      after = this.raw(node, 'after', 'emptyBody')\n    }\n\n    if (after) this.builder(after)\n    this.builder('}', node, 'end')\n  }\n\n  raw(node, own, detect) {\n    let value\n    if (!detect) detect = own\n\n    // Already had\n    if (own) {\n      value = node.raws[own]\n      if (typeof value !== 'undefined') return value\n    }\n\n    let parent = node.parent\n\n    // Hack for first rule in CSS\n    if (detect === 'before') {\n      if (!parent || (parent.type === 'root' && parent.first === node)) {\n        return ''\n      }\n    }\n\n    // Floating child without parent\n    if (!parent) return DEFAULT_RAW[detect]\n\n    // Detect style by other nodes\n    let root = node.root()\n    if (!root.rawCache) root.rawCache = {}\n    if (typeof root.rawCache[detect] !== 'undefined') {\n      return root.rawCache[detect]\n    }\n\n    if (detect === 'before' || detect === 'after') {\n      return this.beforeAfter(node, detect)\n    } else {\n      let method = 'raw' + capitalize(detect)\n      if (this[method]) {\n        value = this[method](root, node)\n      } else {\n        root.walk(i => {\n          value = i.raws[own]\n          if (typeof value !== 'undefined') return false\n        })\n      }\n    }\n\n    if (typeof value === 'undefined') value = DEFAULT_RAW[detect]\n\n    root.rawCache[detect] = value\n    return value\n  }\n\n  rawSemicolon(root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && i.nodes.length && i.last.type === 'decl') {\n        value = i.raws.semicolon\n        if (typeof value !== 'undefined') return false\n      }\n    })\n    return value\n  }\n\n  rawEmptyBody(root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && i.nodes.length === 0) {\n        value = i.raws.after\n        if (typeof value !== 'undefined') return false\n      }\n    })\n    return value\n  }\n\n  rawIndent(root) {\n    if (root.raws.indent) return root.raws.indent\n    let value\n    root.walk(i => {\n      let p = i.parent\n      if (p && p !== root && p.parent && p.parent === root) {\n        if (typeof i.raws.before !== 'undefined') {\n          let parts = i.raws.before.split('\\n')\n          value = parts[parts.length - 1]\n          value = value.replace(/\\S/g, '')\n          return false\n        }\n      }\n    })\n    return value\n  }\n\n  rawBeforeComment(root, node) {\n    let value\n    root.walkComments(i => {\n      if (typeof i.raws.before !== 'undefined') {\n        value = i.raws.before\n        if (value.includes('\\n')) {\n          value = value.replace(/[^\\n]+$/, '')\n        }\n        return false\n      }\n    })\n    if (typeof value === 'undefined') {\n      value = this.raw(node, null, 'beforeDecl')\n    } else if (value) {\n      value = value.replace(/\\S/g, '')\n    }\n    return value\n  }\n\n  rawBeforeDecl(root, node) {\n    let value\n    root.walkDecls(i => {\n      if (typeof i.raws.before !== 'undefined') {\n        value = i.raws.before\n        if (value.includes('\\n')) {\n          value = value.replace(/[^\\n]+$/, '')\n        }\n        return false\n      }\n    })\n    if (typeof value === 'undefined') {\n      value = this.raw(node, null, 'beforeRule')\n    } else if (value) {\n      value = value.replace(/\\S/g, '')\n    }\n    return value\n  }\n\n  rawBeforeRule(root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && (i.parent !== root || root.first !== i)) {\n        if (typeof i.raws.before !== 'undefined') {\n          value = i.raws.before\n          if (value.includes('\\n')) {\n            value = value.replace(/[^\\n]+$/, '')\n          }\n          return false\n        }\n      }\n    })\n    if (value) value = value.replace(/\\S/g, '')\n    return value\n  }\n\n  rawBeforeClose(root) {\n    let value\n    root.walk(i => {\n      if (i.nodes && i.nodes.length > 0) {\n        if (typeof i.raws.after !== 'undefined') {\n          value = i.raws.after\n          if (value.includes('\\n')) {\n            value = value.replace(/[^\\n]+$/, '')\n          }\n          return false\n        }\n      }\n    })\n    if (value) value = value.replace(/\\S/g, '')\n    return value\n  }\n\n  rawBeforeOpen(root) {\n    let value\n    root.walk(i => {\n      if (i.type !== 'decl') {\n        value = i.raws.between\n        if (typeof value !== 'undefined') return false\n      }\n    })\n    return value\n  }\n\n  rawColon(root) {\n    let value\n    root.walkDecls(i => {\n      if (typeof i.raws.between !== 'undefined') {\n        value = i.raws.between.replace(/[^\\s:]/g, '')\n        return false\n      }\n    })\n    return value\n  }\n\n  beforeAfter(node, detect) {\n    let value\n    if (node.type === 'decl') {\n      value = this.raw(node, null, 'beforeDecl')\n    } else if (node.type === 'comment') {\n      value = this.raw(node, null, 'beforeComment')\n    } else if (detect === 'before') {\n      value = this.raw(node, null, 'beforeRule')\n    } else {\n      value = this.raw(node, null, 'beforeClose')\n    }\n\n    let buf = node.parent\n    let depth = 0\n    while (buf && buf.type !== 'root') {\n      depth += 1\n      buf = buf.parent\n    }\n\n    if (value.includes('\\n')) {\n      let indent = this.raw(node, null, 'indent')\n      if (indent.length) {\n        for (let step = 0; step < depth; step++) value += indent\n      }\n    }\n\n    return value\n  }\n\n  rawValue(node, prop) {\n    let value = node[prop]\n    let raw = node.raws[prop]\n    if (raw && raw.value === value) {\n      return raw.raw\n    }\n\n    return value\n  }\n}\n\nmodule.exports = Stringifier\n"]},"metadata":{},"sourceType":"script"}