{"ast":null,"code":"import _toConsumableArray from\"/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _classCallCheck from\"/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import React,{useState,useEffect,useRef}from'react';import{Button,InputGroup,InputGroupAddon,InputGroupText}from'reactstrap';import{EditorView,highlightSpecialChars,keymap,placeholder}from'@codemirror/view';import{EditorState,Prec,Compartment}from'@codemirror/state';import{indentOnInput,syntaxTree}from'@codemirror/language';import{history,historyKeymap}from'@codemirror/history';import{defaultKeymap,insertNewlineAndIndent}from'@codemirror/commands';import{bracketMatching}from'@codemirror/matchbrackets';import{closeBrackets,closeBracketsKeymap}from'@codemirror/closebrackets';import{searchKeymap,highlightSelectionMatches}from'@codemirror/search';import{commentKeymap}from'@codemirror/comment';import{lintKeymap}from'@codemirror/lint';import{PromQLExtension}from'codemirror-promql';import{autocompletion,completionKeymap}from'@codemirror/autocomplete';import{baseTheme,lightTheme,darkTheme,promqlHighlighter}from'./CMTheme';import{FontAwesomeIcon}from'@fortawesome/react-fontawesome';import{faSearch,faSpinner,faGlobeEurope}from'@fortawesome/free-solid-svg-icons';import MetricsExplorer from'./MetricsExplorer';import{usePathPrefix}from'../../contexts/PathPrefixContext';import{newCompleteStrategy}from'codemirror-promql/cjs/complete';import{useTheme}from'../../contexts/ThemeContext';var promqlExtension=new PromQLExtension();var dynamicConfigCompartment=new Compartment();// Autocompletion strategy that wraps the main one and enriches\n// it with past query items.\nexport var HistoryCompleteStrategy=/*#__PURE__*/function(){function HistoryCompleteStrategy(complete,queryHistory){_classCallCheck(this,HistoryCompleteStrategy);this.complete=void 0;this.queryHistory=void 0;this.complete=complete;this.queryHistory=queryHistory;}_createClass(HistoryCompleteStrategy,[{key:\"promQL\",value:function promQL(context){var _this=this;return Promise.resolve(this.complete.promQL(context)).then(function(res){var state=context.state,pos=context.pos;var tree=syntaxTree(state).resolve(pos,-1);var start=res!=null?res.from:tree.from;if(start!==0){return res;}var historyItems={from:start,to:pos,options:_this.queryHistory.map(function(q){return{label:q.length<80?q:q.slice(0,76).concat('...'),detail:'past query',apply:q,info:q.length<80?undefined:q};}),span:/^[a-zA-Z0-9_:]+$/};if(res!==null){historyItems.options=historyItems.options.concat(res.options);}return historyItems;});}}]);return HistoryCompleteStrategy;}();var CMExpressionInput=function CMExpressionInput(_ref){var value=_ref.value,onExpressionChange=_ref.onExpressionChange,queryHistory=_ref.queryHistory,metricNames=_ref.metricNames,executeQuery=_ref.executeQuery,loading=_ref.loading,enableAutocomplete=_ref.enableAutocomplete,enableHighlighting=_ref.enableHighlighting,enableLinter=_ref.enableLinter;var containerRef=useRef(null);var viewRef=useRef(null);var _useState=useState(false),_useState2=_slicedToArray(_useState,2),showMetricsExplorer=_useState2[0],setShowMetricsExplorer=_useState2[1];var pathPrefix=usePathPrefix();var _useTheme=useTheme(),theme=_useTheme.theme;// (Re)initialize editor based on settings / setting changes.\nuseEffect(function(){// Build the dynamic part of the config.\npromqlExtension.activateCompletion(enableAutocomplete).activateLinter(enableLinter).setComplete({completeStrategy:new HistoryCompleteStrategy(newCompleteStrategy({remote:{url:pathPrefix,cache:{initialMetricList:metricNames}}}),queryHistory)});var dynamicConfig=[enableHighlighting?promqlHighlighter:[],promqlExtension.asExtension(),theme==='dark'?darkTheme:lightTheme];// Create or reconfigure the editor.\nvar view=viewRef.current;if(view===null){// If the editor does not exist yet, create it.\nif(!containerRef.current){throw new Error('expected CodeMirror container element to exist');}var startState=EditorState.create({doc:value,extensions:[baseTheme,highlightSpecialChars(),history(),EditorState.allowMultipleSelections.of(true),indentOnInput(),bracketMatching(),closeBrackets(),autocompletion(),highlightSelectionMatches(),EditorView.lineWrapping,keymap.of([].concat(_toConsumableArray(closeBracketsKeymap),_toConsumableArray(defaultKeymap),_toConsumableArray(searchKeymap),_toConsumableArray(historyKeymap),_toConsumableArray(commentKeymap),_toConsumableArray(completionKeymap),_toConsumableArray(lintKeymap))),placeholder('Expression (press Shift+Enter for newlines)'),dynamicConfigCompartment.of(dynamicConfig),// This keymap is added without precedence so that closing the autocomplete dropdown\n// via Escape works without blurring the editor.\nkeymap.of([{key:'Escape',run:function run(v){v.contentDOM.blur();return false;}}]),Prec.override(keymap.of([{key:'Enter',run:function run(v){executeQuery();return true;}},{key:'Shift-Enter',run:insertNewlineAndIndent}])),EditorView.updateListener.of(function(update){onExpressionChange(update.state.doc.toString());})]});var _view=new EditorView({state:startState,parent:containerRef.current});viewRef.current=_view;_view.focus();}else{// The editor already exists, just reconfigure the dynamically configured parts.\nview.dispatch(view.state.update({effects:dynamicConfigCompartment.reconfigure(dynamicConfig)}));}// \"value\" is only used in the initial render, so we don't want to\n// re-run this effect every time that \"value\" changes.\n//\n// eslint-disable-next-line react-hooks/exhaustive-deps\n},[enableAutocomplete,enableHighlighting,enableLinter,executeQuery,onExpressionChange,queryHistory,theme]);var insertAtCursor=function insertAtCursor(value){var view=viewRef.current;if(view===null){return;}var _view$state$selection=view.state.selection.ranges[0],from=_view$state$selection.from,to=_view$state$selection.to;view.dispatch(view.state.update({changes:{from:from,to:to,insert:value}}));};return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(InputGroup,{className:\"expression-input\"},/*#__PURE__*/React.createElement(InputGroupAddon,{addonType:\"prepend\"},/*#__PURE__*/React.createElement(InputGroupText,null,loading?/*#__PURE__*/React.createElement(FontAwesomeIcon,{icon:faSpinner,spin:true}):/*#__PURE__*/React.createElement(FontAwesomeIcon,{icon:faSearch}))),/*#__PURE__*/React.createElement(\"div\",{ref:containerRef,className:\"cm-expression-input\"}),/*#__PURE__*/React.createElement(InputGroupAddon,{addonType:\"append\"},/*#__PURE__*/React.createElement(Button,{className:\"metrics-explorer-btn\",title:\"Open metrics explorer\",onClick:function onClick(){return setShowMetricsExplorer(true);}},/*#__PURE__*/React.createElement(FontAwesomeIcon,{icon:faGlobeEurope})),/*#__PURE__*/React.createElement(Button,{className:\"execute-btn\",color:\"primary\",onClick:executeQuery},\"Execute\"))),/*#__PURE__*/React.createElement(MetricsExplorer,{show:showMetricsExplorer,updateShow:setShowMetricsExplorer,metrics:metricNames,insertAtCursor:insertAtCursor}));};export default CMExpressionInput;","map":{"version":3,"sources":["/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/src/pages/graph/CMExpressionInput.tsx"],"names":["React","useState","useEffect","useRef","Button","InputGroup","InputGroupAddon","InputGroupText","EditorView","highlightSpecialChars","keymap","placeholder","EditorState","Prec","Compartment","indentOnInput","syntaxTree","history","historyKeymap","defaultKeymap","insertNewlineAndIndent","bracketMatching","closeBrackets","closeBracketsKeymap","searchKeymap","highlightSelectionMatches","commentKeymap","lintKeymap","PromQLExtension","autocompletion","completionKeymap","baseTheme","lightTheme","darkTheme","promqlHighlighter","FontAwesomeIcon","faSearch","faSpinner","faGlobeEurope","MetricsExplorer","usePathPrefix","newCompleteStrategy","useTheme","promqlExtension","dynamicConfigCompartment","HistoryCompleteStrategy","complete","queryHistory","context","Promise","resolve","promQL","then","res","state","pos","tree","start","from","historyItems","to","options","map","q","label","length","slice","concat","detail","apply","info","undefined","span","CMExpressionInput","value","onExpressionChange","metricNames","executeQuery","loading","enableAutocomplete","enableHighlighting","enableLinter","containerRef","viewRef","showMetricsExplorer","setShowMetricsExplorer","pathPrefix","theme","activateCompletion","activateLinter","setComplete","completeStrategy","remote","url","cache","initialMetricList","dynamicConfig","asExtension","view","current","Error","startState","create","doc","extensions","allowMultipleSelections","of","lineWrapping","key","run","v","contentDOM","blur","override","updateListener","update","toString","parent","focus","dispatch","effects","reconfigure","insertAtCursor","selection","ranges","changes","insert"],"mappings":"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","sourcesContent":["import React, { FC, useState, useEffect, useRef } from 'react';\nimport { Button, InputGroup, InputGroupAddon, InputGroupText } from 'reactstrap';\n\nimport { EditorView, highlightSpecialChars, keymap, ViewUpdate, placeholder } from '@codemirror/view';\nimport { EditorState, Prec, Compartment } from '@codemirror/state';\nimport { indentOnInput, syntaxTree } from '@codemirror/language';\nimport { history, historyKeymap } from '@codemirror/history';\nimport { defaultKeymap, insertNewlineAndIndent } from '@codemirror/commands';\nimport { bracketMatching } from '@codemirror/matchbrackets';\nimport { closeBrackets, closeBracketsKeymap } from '@codemirror/closebrackets';\nimport { searchKeymap, highlightSelectionMatches } from '@codemirror/search';\nimport { commentKeymap } from '@codemirror/comment';\nimport { lintKeymap } from '@codemirror/lint';\nimport { PromQLExtension, CompleteStrategy } from 'codemirror-promql';\nimport { autocompletion, completionKeymap, CompletionContext, CompletionResult } from '@codemirror/autocomplete';\nimport { baseTheme, lightTheme, darkTheme, promqlHighlighter } from './CMTheme';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch, faSpinner, faGlobeEurope } from '@fortawesome/free-solid-svg-icons';\nimport MetricsExplorer from './MetricsExplorer';\nimport { usePathPrefix } from '../../contexts/PathPrefixContext';\nimport { newCompleteStrategy } from 'codemirror-promql/cjs/complete';\nimport { useTheme } from '../../contexts/ThemeContext';\n\nconst promqlExtension = new PromQLExtension();\n\ninterface CMExpressionInputProps {\n  value: string;\n  onExpressionChange: (expr: string) => void;\n  queryHistory: string[];\n  metricNames: string[];\n  executeQuery: () => void;\n  loading: boolean;\n  enableAutocomplete: boolean;\n  enableHighlighting: boolean;\n  enableLinter: boolean;\n}\n\nconst dynamicConfigCompartment = new Compartment();\n\n// Autocompletion strategy that wraps the main one and enriches\n// it with past query items.\nexport class HistoryCompleteStrategy implements CompleteStrategy {\n  private complete: CompleteStrategy;\n  private queryHistory: string[];\n  constructor(complete: CompleteStrategy, queryHistory: string[]) {\n    this.complete = complete;\n    this.queryHistory = queryHistory;\n  }\n\n  promQL(context: CompletionContext): Promise<CompletionResult | null> | CompletionResult | null {\n    return Promise.resolve(this.complete.promQL(context)).then(res => {\n      const { state, pos } = context;\n      const tree = syntaxTree(state).resolve(pos, -1);\n      const start = res != null ? res.from : tree.from;\n\n      if (start !== 0) {\n        return res;\n      }\n\n      const historyItems: CompletionResult = {\n        from: start,\n        to: pos,\n        options: this.queryHistory.map(q => ({\n          label: q.length < 80 ? q : q.slice(0, 76).concat('...'),\n          detail: 'past query',\n          apply: q,\n          info: q.length < 80 ? undefined : q,\n        })),\n        span: /^[a-zA-Z0-9_:]+$/,\n      };\n\n      if (res !== null) {\n        historyItems.options = historyItems.options.concat(res.options);\n      }\n      return historyItems;\n    });\n  }\n}\n\nconst CMExpressionInput: FC<CMExpressionInputProps> = ({\n  value,\n  onExpressionChange,\n  queryHistory,\n  metricNames,\n  executeQuery,\n  loading,\n  enableAutocomplete,\n  enableHighlighting,\n  enableLinter,\n}) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const viewRef = useRef<EditorView | null>(null);\n  const [showMetricsExplorer, setShowMetricsExplorer] = useState<boolean>(false);\n  const pathPrefix = usePathPrefix();\n  const { theme } = useTheme();\n\n  // (Re)initialize editor based on settings / setting changes.\n  useEffect(() => {\n    // Build the dynamic part of the config.\n    promqlExtension\n      .activateCompletion(enableAutocomplete)\n      .activateLinter(enableLinter)\n      .setComplete({\n        completeStrategy: new HistoryCompleteStrategy(\n          newCompleteStrategy({\n            remote: { url: pathPrefix, cache: { initialMetricList: metricNames } },\n          }),\n          queryHistory\n        ),\n      });\n    const dynamicConfig = [\n      enableHighlighting ? promqlHighlighter : [],\n      promqlExtension.asExtension(),\n      theme === 'dark' ? darkTheme : lightTheme,\n    ];\n\n    // Create or reconfigure the editor.\n    const view = viewRef.current;\n    if (view === null) {\n      // If the editor does not exist yet, create it.\n      if (!containerRef.current) {\n        throw new Error('expected CodeMirror container element to exist');\n      }\n\n      const startState = EditorState.create({\n        doc: value,\n        extensions: [\n          baseTheme,\n          highlightSpecialChars(),\n          history(),\n          EditorState.allowMultipleSelections.of(true),\n          indentOnInput(),\n          bracketMatching(),\n          closeBrackets(),\n          autocompletion(),\n          highlightSelectionMatches(),\n          EditorView.lineWrapping,\n          keymap.of([\n            ...closeBracketsKeymap,\n            ...defaultKeymap,\n            ...searchKeymap,\n            ...historyKeymap,\n            ...commentKeymap,\n            ...completionKeymap,\n            ...lintKeymap,\n          ]),\n          placeholder('Expression (press Shift+Enter for newlines)'),\n          dynamicConfigCompartment.of(dynamicConfig),\n          // This keymap is added without precedence so that closing the autocomplete dropdown\n          // via Escape works without blurring the editor.\n          keymap.of([\n            {\n              key: 'Escape',\n              run: (v: EditorView): boolean => {\n                v.contentDOM.blur();\n                return false;\n              },\n            },\n          ]),\n          Prec.override(\n            keymap.of([\n              {\n                key: 'Enter',\n                run: (v: EditorView): boolean => {\n                  executeQuery();\n                  return true;\n                },\n              },\n              {\n                key: 'Shift-Enter',\n                run: insertNewlineAndIndent,\n              },\n            ])\n          ),\n          EditorView.updateListener.of((update: ViewUpdate): void => {\n            onExpressionChange(update.state.doc.toString());\n          }),\n        ],\n      });\n\n      const view = new EditorView({\n        state: startState,\n        parent: containerRef.current,\n      });\n\n      viewRef.current = view;\n\n      view.focus();\n    } else {\n      // The editor already exists, just reconfigure the dynamically configured parts.\n      view.dispatch(\n        view.state.update({\n          effects: dynamicConfigCompartment.reconfigure(dynamicConfig),\n        })\n      );\n    }\n    // \"value\" is only used in the initial render, so we don't want to\n    // re-run this effect every time that \"value\" changes.\n    //\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [enableAutocomplete, enableHighlighting, enableLinter, executeQuery, onExpressionChange, queryHistory, theme]);\n\n  const insertAtCursor = (value: string) => {\n    const view = viewRef.current;\n    if (view === null) {\n      return;\n    }\n    const { from, to } = view.state.selection.ranges[0];\n    view.dispatch(\n      view.state.update({\n        changes: { from, to, insert: value },\n      })\n    );\n  };\n\n  return (\n    <>\n      <InputGroup className=\"expression-input\">\n        <InputGroupAddon addonType=\"prepend\">\n          <InputGroupText>\n            {loading ? <FontAwesomeIcon icon={faSpinner} spin /> : <FontAwesomeIcon icon={faSearch} />}\n          </InputGroupText>\n        </InputGroupAddon>\n        <div ref={containerRef} className=\"cm-expression-input\" />\n        <InputGroupAddon addonType=\"append\">\n          <Button\n            className=\"metrics-explorer-btn\"\n            title=\"Open metrics explorer\"\n            onClick={() => setShowMetricsExplorer(true)}\n          >\n            <FontAwesomeIcon icon={faGlobeEurope} />\n          </Button>\n          <Button className=\"execute-btn\" color=\"primary\" onClick={executeQuery}>\n            Execute\n          </Button>\n        </InputGroupAddon>\n      </InputGroup>\n\n      <MetricsExplorer\n        show={showMetricsExplorer}\n        updateShow={setShowMetricsExplorer}\n        metrics={metricNames}\n        insertAtCursor={insertAtCursor}\n      />\n    </>\n  );\n};\n\nexport default CMExpressionInput;\n"]},"metadata":{},"sourceType":"module"}