{"ast":null,"code":"'use strict';\n\nvar SINGLE_QUOTE = \"'\".charCodeAt(0);\nvar DOUBLE_QUOTE = '\"'.charCodeAt(0);\nvar BACKSLASH = '\\\\'.charCodeAt(0);\nvar SLASH = '/'.charCodeAt(0);\nvar NEWLINE = '\\n'.charCodeAt(0);\nvar SPACE = ' '.charCodeAt(0);\nvar FEED = '\\f'.charCodeAt(0);\nvar TAB = '\\t'.charCodeAt(0);\nvar CR = '\\r'.charCodeAt(0);\nvar OPEN_SQUARE = '['.charCodeAt(0);\nvar CLOSE_SQUARE = ']'.charCodeAt(0);\nvar OPEN_PARENTHESES = '('.charCodeAt(0);\nvar CLOSE_PARENTHESES = ')'.charCodeAt(0);\nvar OPEN_CURLY = '{'.charCodeAt(0);\nvar CLOSE_CURLY = '}'.charCodeAt(0);\nvar SEMICOLON = ';'.charCodeAt(0);\nvar ASTERISK = '*'.charCodeAt(0);\nvar COLON = ':'.charCodeAt(0);\nvar AT = '@'.charCodeAt(0);\nvar RE_AT_END = /[\\t\\n\\f\\r \"#'()/;[\\\\\\]{}]/g;\nvar RE_WORD_END = /[\\t\\n\\f\\r !\"#'():;@[\\\\\\]{}]|\\/(?=\\*)/g;\nvar RE_BAD_BRACKET = /.[\\n\"'(/\\\\]/;\nvar RE_HEX_ESCAPE = /[\\da-f]/i;\n\nmodule.exports = function tokenizer(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var css = input.css.valueOf();\n  var ignore = options.ignoreErrors;\n  var code, next, quote, content, escape;\n  var escaped, escapePos, prev, n, currentToken;\n  var length = css.length;\n  var pos = 0;\n  var buffer = [];\n  var returned = [];\n\n  function position() {\n    return pos;\n  }\n\n  function unclosed(what) {\n    throw input.error('Unclosed ' + what, pos);\n  }\n\n  function endOfFile() {\n    return returned.length === 0 && pos >= length;\n  }\n\n  function nextToken(opts) {\n    if (returned.length) return returned.pop();\n    if (pos >= length) return;\n    var ignoreUnclosed = opts ? opts.ignoreUnclosed : false;\n    code = css.charCodeAt(pos);\n\n    switch (code) {\n      case NEWLINE:\n      case SPACE:\n      case TAB:\n      case CR:\n      case FEED:\n        {\n          next = pos;\n\n          do {\n            next += 1;\n            code = css.charCodeAt(next);\n          } while (code === SPACE || code === NEWLINE || code === TAB || code === CR || code === FEED);\n\n          currentToken = ['space', css.slice(pos, next)];\n          pos = next - 1;\n          break;\n        }\n\n      case OPEN_SQUARE:\n      case CLOSE_SQUARE:\n      case OPEN_CURLY:\n      case CLOSE_CURLY:\n      case COLON:\n      case SEMICOLON:\n      case CLOSE_PARENTHESES:\n        {\n          var controlChar = String.fromCharCode(code);\n          currentToken = [controlChar, controlChar, pos];\n          break;\n        }\n\n      case OPEN_PARENTHESES:\n        {\n          prev = buffer.length ? buffer.pop()[1] : '';\n          n = css.charCodeAt(pos + 1);\n\n          if (prev === 'url' && n !== SINGLE_QUOTE && n !== DOUBLE_QUOTE && n !== SPACE && n !== NEWLINE && n !== TAB && n !== FEED && n !== CR) {\n            next = pos;\n\n            do {\n              escaped = false;\n              next = css.indexOf(')', next + 1);\n\n              if (next === -1) {\n                if (ignore || ignoreUnclosed) {\n                  next = pos;\n                  break;\n                } else {\n                  unclosed('bracket');\n                }\n              }\n\n              escapePos = next;\n\n              while (css.charCodeAt(escapePos - 1) === BACKSLASH) {\n                escapePos -= 1;\n                escaped = !escaped;\n              }\n            } while (escaped);\n\n            currentToken = ['brackets', css.slice(pos, next + 1), pos, next];\n            pos = next;\n          } else {\n            next = css.indexOf(')', pos + 1);\n            content = css.slice(pos, next + 1);\n\n            if (next === -1 || RE_BAD_BRACKET.test(content)) {\n              currentToken = ['(', '(', pos];\n            } else {\n              currentToken = ['brackets', content, pos, next];\n              pos = next;\n            }\n          }\n\n          break;\n        }\n\n      case SINGLE_QUOTE:\n      case DOUBLE_QUOTE:\n        {\n          quote = code === SINGLE_QUOTE ? \"'\" : '\"';\n          next = pos;\n\n          do {\n            escaped = false;\n            next = css.indexOf(quote, next + 1);\n\n            if (next === -1) {\n              if (ignore || ignoreUnclosed) {\n                next = pos + 1;\n                break;\n              } else {\n                unclosed('string');\n              }\n            }\n\n            escapePos = next;\n\n            while (css.charCodeAt(escapePos - 1) === BACKSLASH) {\n              escapePos -= 1;\n              escaped = !escaped;\n            }\n          } while (escaped);\n\n          currentToken = ['string', css.slice(pos, next + 1), pos, next];\n          pos = next;\n          break;\n        }\n\n      case AT:\n        {\n          RE_AT_END.lastIndex = pos + 1;\n          RE_AT_END.test(css);\n\n          if (RE_AT_END.lastIndex === 0) {\n            next = css.length - 1;\n          } else {\n            next = RE_AT_END.lastIndex - 2;\n          }\n\n          currentToken = ['at-word', css.slice(pos, next + 1), pos, next];\n          pos = next;\n          break;\n        }\n\n      case BACKSLASH:\n        {\n          next = pos;\n          escape = true;\n\n          while (css.charCodeAt(next + 1) === BACKSLASH) {\n            next += 1;\n            escape = !escape;\n          }\n\n          code = css.charCodeAt(next + 1);\n\n          if (escape && code !== SLASH && code !== SPACE && code !== NEWLINE && code !== TAB && code !== CR && code !== FEED) {\n            next += 1;\n\n            if (RE_HEX_ESCAPE.test(css.charAt(next))) {\n              while (RE_HEX_ESCAPE.test(css.charAt(next + 1))) {\n                next += 1;\n              }\n\n              if (css.charCodeAt(next + 1) === SPACE) {\n                next += 1;\n              }\n            }\n          }\n\n          currentToken = ['word', css.slice(pos, next + 1), pos, next];\n          pos = next;\n          break;\n        }\n\n      default:\n        {\n          if (code === SLASH && css.charCodeAt(pos + 1) === ASTERISK) {\n            next = css.indexOf('*/', pos + 2) + 1;\n\n            if (next === 0) {\n              if (ignore || ignoreUnclosed) {\n                next = css.length;\n              } else {\n                unclosed('comment');\n              }\n            }\n\n            currentToken = ['comment', css.slice(pos, next + 1), pos, next];\n            pos = next;\n          } else {\n            RE_WORD_END.lastIndex = pos + 1;\n            RE_WORD_END.test(css);\n\n            if (RE_WORD_END.lastIndex === 0) {\n              next = css.length - 1;\n            } else {\n              next = RE_WORD_END.lastIndex - 2;\n            }\n\n            currentToken = ['word', css.slice(pos, next + 1), pos, next];\n            buffer.push(currentToken);\n            pos = next;\n          }\n\n          break;\n        }\n    }\n\n    pos++;\n    return currentToken;\n  }\n\n  function back(token) {\n    returned.push(token);\n  }\n\n  return {\n    back: back,\n    nextToken: nextToken,\n    endOfFile: endOfFile,\n    position: position\n  };\n};","map":{"version":3,"sources":["/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/sanitize-html/node_modules/postcss/lib/tokenize.js"],"names":["SINGLE_QUOTE","charCodeAt","DOUBLE_QUOTE","BACKSLASH","SLASH","NEWLINE","SPACE","FEED","TAB","CR","OPEN_SQUARE","CLOSE_SQUARE","OPEN_PARENTHESES","CLOSE_PARENTHESES","OPEN_CURLY","CLOSE_CURLY","SEMICOLON","ASTERISK","COLON","AT","RE_AT_END","RE_WORD_END","RE_BAD_BRACKET","RE_HEX_ESCAPE","module","exports","tokenizer","input","options","css","valueOf","ignore","ignoreErrors","code","next","quote","content","escape","escaped","escapePos","prev","n","currentToken","length","pos","buffer","returned","position","unclosed","what","error","endOfFile","nextToken","opts","pop","ignoreUnclosed","slice","controlChar","String","fromCharCode","indexOf","test","lastIndex","charAt","push","back","token"],"mappings":"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","sourcesContent":["'use strict'\n\nconst SINGLE_QUOTE = \"'\".charCodeAt(0)\nconst DOUBLE_QUOTE = '\"'.charCodeAt(0)\nconst BACKSLASH = '\\\\'.charCodeAt(0)\nconst SLASH = '/'.charCodeAt(0)\nconst NEWLINE = '\\n'.charCodeAt(0)\nconst SPACE = ' '.charCodeAt(0)\nconst FEED = '\\f'.charCodeAt(0)\nconst TAB = '\\t'.charCodeAt(0)\nconst CR = '\\r'.charCodeAt(0)\nconst OPEN_SQUARE = '['.charCodeAt(0)\nconst CLOSE_SQUARE = ']'.charCodeAt(0)\nconst OPEN_PARENTHESES = '('.charCodeAt(0)\nconst CLOSE_PARENTHESES = ')'.charCodeAt(0)\nconst OPEN_CURLY = '{'.charCodeAt(0)\nconst CLOSE_CURLY = '}'.charCodeAt(0)\nconst SEMICOLON = ';'.charCodeAt(0)\nconst ASTERISK = '*'.charCodeAt(0)\nconst COLON = ':'.charCodeAt(0)\nconst AT = '@'.charCodeAt(0)\n\nconst RE_AT_END = /[\\t\\n\\f\\r \"#'()/;[\\\\\\]{}]/g\nconst RE_WORD_END = /[\\t\\n\\f\\r !\"#'():;@[\\\\\\]{}]|\\/(?=\\*)/g\nconst RE_BAD_BRACKET = /.[\\n\"'(/\\\\]/\nconst RE_HEX_ESCAPE = /[\\da-f]/i\n\nmodule.exports = function tokenizer(input, options = {}) {\n  let css = input.css.valueOf()\n  let ignore = options.ignoreErrors\n\n  let code, next, quote, content, escape\n  let escaped, escapePos, prev, n, currentToken\n\n  let length = css.length\n  let pos = 0\n  let buffer = []\n  let returned = []\n\n  function position() {\n    return pos\n  }\n\n  function unclosed(what) {\n    throw input.error('Unclosed ' + what, pos)\n  }\n\n  function endOfFile() {\n    return returned.length === 0 && pos >= length\n  }\n\n  function nextToken(opts) {\n    if (returned.length) return returned.pop()\n    if (pos >= length) return\n\n    let ignoreUnclosed = opts ? opts.ignoreUnclosed : false\n\n    code = css.charCodeAt(pos)\n\n    switch (code) {\n      case NEWLINE:\n      case SPACE:\n      case TAB:\n      case CR:\n      case FEED: {\n        next = pos\n        do {\n          next += 1\n          code = css.charCodeAt(next)\n        } while (\n          code === SPACE ||\n          code === NEWLINE ||\n          code === TAB ||\n          code === CR ||\n          code === FEED\n        )\n\n        currentToken = ['space', css.slice(pos, next)]\n        pos = next - 1\n        break\n      }\n\n      case OPEN_SQUARE:\n      case CLOSE_SQUARE:\n      case OPEN_CURLY:\n      case CLOSE_CURLY:\n      case COLON:\n      case SEMICOLON:\n      case CLOSE_PARENTHESES: {\n        let controlChar = String.fromCharCode(code)\n        currentToken = [controlChar, controlChar, pos]\n        break\n      }\n\n      case OPEN_PARENTHESES: {\n        prev = buffer.length ? buffer.pop()[1] : ''\n        n = css.charCodeAt(pos + 1)\n        if (\n          prev === 'url' &&\n          n !== SINGLE_QUOTE &&\n          n !== DOUBLE_QUOTE &&\n          n !== SPACE &&\n          n !== NEWLINE &&\n          n !== TAB &&\n          n !== FEED &&\n          n !== CR\n        ) {\n          next = pos\n          do {\n            escaped = false\n            next = css.indexOf(')', next + 1)\n            if (next === -1) {\n              if (ignore || ignoreUnclosed) {\n                next = pos\n                break\n              } else {\n                unclosed('bracket')\n              }\n            }\n            escapePos = next\n            while (css.charCodeAt(escapePos - 1) === BACKSLASH) {\n              escapePos -= 1\n              escaped = !escaped\n            }\n          } while (escaped)\n\n          currentToken = ['brackets', css.slice(pos, next + 1), pos, next]\n\n          pos = next\n        } else {\n          next = css.indexOf(')', pos + 1)\n          content = css.slice(pos, next + 1)\n\n          if (next === -1 || RE_BAD_BRACKET.test(content)) {\n            currentToken = ['(', '(', pos]\n          } else {\n            currentToken = ['brackets', content, pos, next]\n            pos = next\n          }\n        }\n\n        break\n      }\n\n      case SINGLE_QUOTE:\n      case DOUBLE_QUOTE: {\n        quote = code === SINGLE_QUOTE ? \"'\" : '\"'\n        next = pos\n        do {\n          escaped = false\n          next = css.indexOf(quote, next + 1)\n          if (next === -1) {\n            if (ignore || ignoreUnclosed) {\n              next = pos + 1\n              break\n            } else {\n              unclosed('string')\n            }\n          }\n          escapePos = next\n          while (css.charCodeAt(escapePos - 1) === BACKSLASH) {\n            escapePos -= 1\n            escaped = !escaped\n          }\n        } while (escaped)\n\n        currentToken = ['string', css.slice(pos, next + 1), pos, next]\n        pos = next\n        break\n      }\n\n      case AT: {\n        RE_AT_END.lastIndex = pos + 1\n        RE_AT_END.test(css)\n        if (RE_AT_END.lastIndex === 0) {\n          next = css.length - 1\n        } else {\n          next = RE_AT_END.lastIndex - 2\n        }\n\n        currentToken = ['at-word', css.slice(pos, next + 1), pos, next]\n\n        pos = next\n        break\n      }\n\n      case BACKSLASH: {\n        next = pos\n        escape = true\n        while (css.charCodeAt(next + 1) === BACKSLASH) {\n          next += 1\n          escape = !escape\n        }\n        code = css.charCodeAt(next + 1)\n        if (\n          escape &&\n          code !== SLASH &&\n          code !== SPACE &&\n          code !== NEWLINE &&\n          code !== TAB &&\n          code !== CR &&\n          code !== FEED\n        ) {\n          next += 1\n          if (RE_HEX_ESCAPE.test(css.charAt(next))) {\n            while (RE_HEX_ESCAPE.test(css.charAt(next + 1))) {\n              next += 1\n            }\n            if (css.charCodeAt(next + 1) === SPACE) {\n              next += 1\n            }\n          }\n        }\n\n        currentToken = ['word', css.slice(pos, next + 1), pos, next]\n\n        pos = next\n        break\n      }\n\n      default: {\n        if (code === SLASH && css.charCodeAt(pos + 1) === ASTERISK) {\n          next = css.indexOf('*/', pos + 2) + 1\n          if (next === 0) {\n            if (ignore || ignoreUnclosed) {\n              next = css.length\n            } else {\n              unclosed('comment')\n            }\n          }\n\n          currentToken = ['comment', css.slice(pos, next + 1), pos, next]\n          pos = next\n        } else {\n          RE_WORD_END.lastIndex = pos + 1\n          RE_WORD_END.test(css)\n          if (RE_WORD_END.lastIndex === 0) {\n            next = css.length - 1\n          } else {\n            next = RE_WORD_END.lastIndex - 2\n          }\n\n          currentToken = ['word', css.slice(pos, next + 1), pos, next]\n          buffer.push(currentToken)\n          pos = next\n        }\n\n        break\n      }\n    }\n\n    pos++\n    return currentToken\n  }\n\n  function back(token) {\n    returned.push(token)\n  }\n\n  return {\n    back,\n    nextToken,\n    endOfFile,\n    position\n  }\n}\n"]},"metadata":{},"sourceType":"script"}