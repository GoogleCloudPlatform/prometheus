{"ast":null,"code":"import React from'react';import{Alert}from'reactstrap';import Graph from'./Graph';import{isPresent}from'../../utils';export var GraphTabContent=function GraphTabContent(_ref){var data=_ref.data,stacked=_ref.stacked,useLocalTime=_ref.useLocalTime,lastQueryParams=_ref.lastQueryParams;if(!isPresent(data)){return/*#__PURE__*/React.createElement(Alert,{color:\"light\"},\"No data queried yet\");}if(data.result.length===0){return/*#__PURE__*/React.createElement(Alert,{color:\"secondary\"},\"Empty query result\");}if(data.resultType!=='matrix'){return/*#__PURE__*/React.createElement(Alert,{color:\"danger\"},\"Query result is of wrong type '\",data.resultType,\"', should be 'matrix' (range vector).\");}return/*#__PURE__*/React.createElement(Graph,{data:data,stacked:stacked,useLocalTime:useLocalTime,queryParams:lastQueryParams});};","map":{"version":3,"sources":["/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/src/pages/graph/GraphTabContent.tsx"],"names":["React","Alert","Graph","isPresent","GraphTabContent","data","stacked","useLocalTime","lastQueryParams","result","length","resultType"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAA0B,OAA1B,CACA,OAASC,KAAT,KAAsB,YAAtB,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CAEA,OAASC,SAAT,KAA0B,aAA1B,CASA,MAAO,IAAMC,CAAAA,eAAyC,CAAG,QAA5CA,CAAAA,eAA4C,MAAsD,IAAnDC,CAAAA,IAAmD,MAAnDA,IAAmD,CAA7CC,OAA6C,MAA7CA,OAA6C,CAApCC,YAAoC,MAApCA,YAAoC,CAAtBC,eAAsB,MAAtBA,eAAsB,CAC7G,GAAI,CAACL,SAAS,CAACE,IAAD,CAAd,CAAsB,CACpB,mBAAO,oBAAC,KAAD,EAAO,KAAK,CAAC,OAAb,wBAAP,CACD,CACD,GAAIA,IAAI,CAACI,MAAL,CAAYC,MAAZ,GAAuB,CAA3B,CAA8B,CAC5B,mBAAO,oBAAC,KAAD,EAAO,KAAK,CAAC,WAAb,uBAAP,CACD,CACD,GAAIL,IAAI,CAACM,UAAL,GAAoB,QAAxB,CAAkC,CAChC,mBACE,oBAAC,KAAD,EAAO,KAAK,CAAC,QAAb,oCAAsDN,IAAI,CAACM,UAA3D,yCADF,CAGD,CACD,mBAAO,oBAAC,KAAD,EAAO,IAAI,CAAEN,IAAb,CAAmB,OAAO,CAAEC,OAA5B,CAAqC,YAAY,CAAEC,YAAnD,CAAiE,WAAW,CAAEC,eAA9E,EAAP,CACD,CAbM","sourcesContent":["import React, { FC } from 'react';\nimport { Alert } from 'reactstrap';\nimport Graph from './Graph';\nimport { QueryParams } from '../../types/types';\nimport { isPresent } from '../../utils';\n\ninterface GraphTabContentProps {\n  data: any;\n  stacked: boolean;\n  useLocalTime: boolean;\n  lastQueryParams: QueryParams | null;\n}\n\nexport const GraphTabContent: FC<GraphTabContentProps> = ({ data, stacked, useLocalTime, lastQueryParams }) => {\n  if (!isPresent(data)) {\n    return <Alert color=\"light\">No data queried yet</Alert>;\n  }\n  if (data.result.length === 0) {\n    return <Alert color=\"secondary\">Empty query result</Alert>;\n  }\n  if (data.resultType !== 'matrix') {\n    return (\n      <Alert color=\"danger\">Query result is of wrong type '{data.resultType}', should be 'matrix' (range vector).</Alert>\n    );\n  }\n  return <Graph data={data} stacked={stacked} useLocalTime={useLocalTime} queryParams={lastQueryParams} />;\n};\n"]},"metadata":{},"sourceType":"module"}