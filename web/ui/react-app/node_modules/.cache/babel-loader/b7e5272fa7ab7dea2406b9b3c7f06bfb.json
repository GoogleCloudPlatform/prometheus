{"ast":null,"code":"import React from'react';import{metricToSeriesName}from'../../utils';var SeriesName=function SeriesName(_ref){var labels=_ref.labels,format=_ref.format;var renderFormatted=function renderFormatted(){var labelNodes=[];var first=true;for(var label in labels){if(label==='__name__'){continue;}labelNodes.push(/*#__PURE__*/React.createElement(\"span\",{key:label},!first&&', ',/*#__PURE__*/React.createElement(\"span\",{className:\"legend-label-name\"},label),\"=\",/*#__PURE__*/React.createElement(\"span\",{className:\"legend-label-value\"},\"\\\"\",labels[label],\"\\\"\")));if(first){first=false;}}return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"span\",{className:\"legend-metric-name\"},labels.__name__||''),/*#__PURE__*/React.createElement(\"span\",{className:\"legend-label-brace\"},'{'),labelNodes,/*#__PURE__*/React.createElement(\"span\",{className:\"legend-label-brace\"},'}'));};if(labels===null){return/*#__PURE__*/React.createElement(React.Fragment,null,\"scalar\");}if(format){return renderFormatted();}// Return a simple text node. This is much faster to scroll through\n// for longer lists (hundreds of items).\nreturn/*#__PURE__*/React.createElement(React.Fragment,null,metricToSeriesName(labels));};export default SeriesName;","map":{"version":3,"sources":["/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/src/pages/graph/SeriesName.tsx"],"names":["React","metricToSeriesName","SeriesName","labels","format","renderFormatted","labelNodes","first","label","push","__name__"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAA0B,OAA1B,CACA,OAASC,kBAAT,KAAmC,aAAnC,CAOA,GAAMC,CAAAA,UAA+B,CAAG,QAAlCA,CAAAA,UAAkC,MAAwB,IAArBC,CAAAA,MAAqB,MAArBA,MAAqB,CAAbC,MAAa,MAAbA,MAAa,CAC9D,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,EAA0B,CAChD,GAAMC,CAAAA,UAAgC,CAAG,EAAzC,CACA,GAAIC,CAAAA,KAAK,CAAG,IAAZ,CACA,IAAK,GAAMC,CAAAA,KAAX,GAAoBL,CAAAA,MAApB,CAA4B,CAC1B,GAAIK,KAAK,GAAK,UAAd,CAA0B,CACxB,SACD,CAEDF,UAAU,CAACG,IAAX,cACE,4BAAM,GAAG,CAAED,KAAX,EACG,CAACD,KAAD,EAAU,IADb,cAEE,4BAAM,SAAS,CAAC,mBAAhB,EAAqCC,KAArC,CAFF,kBAEqD,4BAAM,SAAS,CAAC,oBAAhB,OAAuCL,MAAM,CAACK,KAAD,CAA7C,MAFrD,CADF,EAOA,GAAID,KAAJ,CAAW,CACTA,KAAK,CAAG,KAAR,CACD,CACF,CAED,mBACE,4CACE,4BAAM,SAAS,CAAC,oBAAhB,EAAsCJ,MAAM,CAAEO,QAAR,EAAoB,EAA1D,CADF,cAEE,4BAAM,SAAS,CAAC,oBAAhB,EAAsC,GAAtC,CAFF,CAGGJ,UAHH,cAIE,4BAAM,SAAS,CAAC,oBAAhB,EAAsC,GAAtC,CAJF,CADF,CAQD,CA5BD,CA8BA,GAAIH,MAAM,GAAK,IAAf,CAAqB,CACnB,mBAAO,iDAAP,CACD,CAED,GAAIC,MAAJ,CAAY,CACV,MAAOC,CAAAA,eAAe,EAAtB,CACD,CACD;AACA;AACA,mBAAO,wCAAGJ,kBAAkB,CAACE,MAAD,CAArB,CAAP,CACD,CAzCD,CA2CA,cAAeD,CAAAA,UAAf","sourcesContent":["import React, { FC } from 'react';\nimport { metricToSeriesName } from '../../utils';\n\ninterface SeriesNameProps {\n  labels: { [key: string]: string } | null;\n  format: boolean;\n}\n\nconst SeriesName: FC<SeriesNameProps> = ({ labels, format }) => {\n  const renderFormatted = (): React.ReactElement => {\n    const labelNodes: React.ReactElement[] = [];\n    let first = true;\n    for (const label in labels) {\n      if (label === '__name__') {\n        continue;\n      }\n\n      labelNodes.push(\n        <span key={label}>\n          {!first && ', '}\n          <span className=\"legend-label-name\">{label}</span>=<span className=\"legend-label-value\">\"{labels[label]}\"</span>\n        </span>\n      );\n\n      if (first) {\n        first = false;\n      }\n    }\n\n    return (\n      <div>\n        <span className=\"legend-metric-name\">{labels!.__name__ || ''}</span>\n        <span className=\"legend-label-brace\">{'{'}</span>\n        {labelNodes}\n        <span className=\"legend-label-brace\">{'}'}</span>\n      </div>\n    );\n  };\n\n  if (labels === null) {\n    return <>scalar</>;\n  }\n\n  if (format) {\n    return renderFormatted();\n  }\n  // Return a simple text node. This is much faster to scroll through\n  // for longer lists (hundreds of items).\n  return <>{metricToSeriesName(labels!)}</>;\n};\n\nexport default SeriesName;\n"]},"metadata":{},"sourceType":"module"}