{"ast":null,"code":"import _defineProperty from\"/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React from'react';import Filter from'./Filter';import{useFetch}from'../../hooks/useFetch';import{groupTargets}from'./target';import ScrapePoolPanel from'./ScrapePoolPanel';import{withStatusIndicator}from'../../components/withStatusIndicator';import{usePathPrefix}from'../../contexts/PathPrefixContext';import{API_PATH}from'../../constants/constants';import{useLocalStorage}from'../../hooks/useLocalStorage';export var ScrapePoolContent=function ScrapePoolContent(_ref){var activeTargets=_ref.activeTargets;var targetGroups=groupTargets(activeTargets);var initialFilter={showHealthy:true,showUnhealthy:true};var _useLocalStorage=useLocalStorage('targets-page-filter',initialFilter),_useLocalStorage2=_slicedToArray(_useLocalStorage,2),filter=_useLocalStorage2[0],setFilter=_useLocalStorage2[1];var initialExpanded=Object.keys(targetGroups).reduce(function(acc,scrapePool){return _objectSpread(_objectSpread({},acc),{},_defineProperty({},scrapePool,true));},{});var _useLocalStorage3=useLocalStorage('targets-page-expansion-state',initialExpanded),_useLocalStorage4=_slicedToArray(_useLocalStorage3,2),expanded=_useLocalStorage4[0],setExpanded=_useLocalStorage4[1];var showHealthy=filter.showHealthy,showUnhealthy=filter.showUnhealthy;return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(Filter,{filter:filter,setFilter:setFilter,expanded:expanded,setExpanded:setExpanded}),Object.keys(targetGroups).filter(function(scrapePool){var targetGroup=targetGroups[scrapePool];var isHealthy=targetGroup.upCount===targetGroup.targets.length;return isHealthy&&showHealthy||!isHealthy&&showUnhealthy;}).map(function(scrapePool){return/*#__PURE__*/React.createElement(ScrapePoolPanel,{key:scrapePool,scrapePool:scrapePool,targetGroup:targetGroups[scrapePool],expanded:expanded[scrapePool],toggleExpanded:function toggleExpanded(){return setExpanded(_objectSpread(_objectSpread({},expanded),{},_defineProperty({},scrapePool,!expanded[scrapePool])));}});}));};ScrapePoolContent.displayName='ScrapePoolContent';var ScrapePoolListWithStatusIndicator=withStatusIndicator(ScrapePoolContent);var ScrapePoolList=function ScrapePoolList(){var pathPrefix=usePathPrefix();var _useFetch=useFetch(\"\".concat(pathPrefix,\"/\").concat(API_PATH,\"/targets?state=active\")),response=_useFetch.response,error=_useFetch.error,isLoading=_useFetch.isLoading;var responseStatus=response.status;var badResponse=responseStatus!=='success'&&responseStatus!=='start fetching';return/*#__PURE__*/React.createElement(ScrapePoolListWithStatusIndicator,Object.assign({},response.data,{error:badResponse?new Error(responseStatus):error,isLoading:isLoading,componentTitle:\"Targets information\"}));};export default ScrapePoolList;","map":{"version":3,"sources":["/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/src/pages/targets/ScrapePoolList.tsx"],"names":["React","Filter","useFetch","groupTargets","ScrapePoolPanel","withStatusIndicator","usePathPrefix","API_PATH","useLocalStorage","ScrapePoolContent","activeTargets","targetGroups","initialFilter","showHealthy","showUnhealthy","filter","setFilter","initialExpanded","Object","keys","reduce","acc","scrapePool","expanded","setExpanded","targetGroup","isHealthy","upCount","targets","length","map","displayName","ScrapePoolListWithStatusIndicator","ScrapePoolList","pathPrefix","response","error","isLoading","responseStatus","status","badResponse","data","Error"],"mappings":"uqBAAA,MAAOA,CAAAA,KAAP,KAA0B,OAA1B,CACA,MAAOC,CAAAA,MAAP,KAA6C,UAA7C,CACA,OAASC,QAAT,KAAyB,sBAAzB,CACA,OAASC,YAAT,KAAqC,UAArC,CACA,MAAOC,CAAAA,eAAP,KAA4B,mBAA5B,CACA,OAASC,mBAAT,KAAoC,sCAApC,CACA,OAASC,aAAT,KAA8B,kCAA9B,CACA,OAASC,QAAT,KAAyB,2BAAzB,CACA,OAASC,eAAT,KAAgC,6BAAhC,CAMA,MAAO,IAAMC,CAAAA,iBAA0C,CAAG,QAA7CA,CAAAA,iBAA6C,MAAuB,IAApBC,CAAAA,aAAoB,MAApBA,aAAoB,CAC/E,GAAMC,CAAAA,YAAY,CAAGR,YAAY,CAACO,aAAD,CAAjC,CACA,GAAME,CAAAA,aAAyB,CAAG,CAChCC,WAAW,CAAE,IADmB,CAEhCC,aAAa,CAAE,IAFiB,CAAlC,CAIA,qBAA4BN,eAAe,CAAC,qBAAD,CAAwBI,aAAxB,CAA3C,sDAAOG,MAAP,sBAAeC,SAAf,sBAEA,GAAMC,CAAAA,eAAyB,CAAGC,MAAM,CAACC,IAAP,CAAYR,YAAZ,EAA0BS,MAA1B,CAChC,SAACC,GAAD,CAAyCC,UAAzC,wCACKD,GADL,wBAEGC,UAFH,CAEgB,IAFhB,IADgC,CAKhC,EALgC,CAAlC,CAOA,sBAAgCd,eAAe,CAAC,8BAAD,CAAiCS,eAAjC,CAA/C,uDAAOM,QAAP,sBAAiBC,WAAjB,sBAEA,GAAQX,CAAAA,WAAR,CAAuCE,MAAvC,CAAQF,WAAR,CAAqBC,aAArB,CAAuCC,MAAvC,CAAqBD,aAArB,CACA,mBACE,qDACE,oBAAC,MAAD,EAAQ,MAAM,CAAEC,MAAhB,CAAwB,SAAS,CAAEC,SAAnC,CAA8C,QAAQ,CAAEO,QAAxD,CAAkE,WAAW,CAAEC,WAA/E,EADF,CAEGN,MAAM,CAACC,IAAP,CAAYR,YAAZ,EACEI,MADF,CACS,SAAAO,UAAU,CAAI,CACpB,GAAMG,CAAAA,WAAW,CAAGd,YAAY,CAACW,UAAD,CAAhC,CACA,GAAMI,CAAAA,SAAS,CAAGD,WAAW,CAACE,OAAZ,GAAwBF,WAAW,CAACG,OAAZ,CAAoBC,MAA9D,CACA,MAAQH,CAAAA,SAAS,EAAIb,WAAd,EAA+B,CAACa,SAAD,EAAcZ,aAApD,CACD,CALF,EAMEgB,GANF,CAMmB,SAAAR,UAAU,qBAC1B,oBAAC,eAAD,EACE,GAAG,CAAEA,UADP,CAEE,UAAU,CAAEA,UAFd,CAGE,WAAW,CAAEX,YAAY,CAACW,UAAD,CAH3B,CAIE,QAAQ,CAAEC,QAAQ,CAACD,UAAD,CAJpB,CAKE,cAAc,CAAE,gCAAYE,CAAAA,WAAW,gCAAMD,QAAN,wBAAiBD,UAAjB,CAA8B,CAACC,QAAQ,CAACD,UAAD,CAAvC,GAAvB,EALlB,EAD0B,EAN7B,CAFH,CADF,CAoBD,CAtCM,CAuCPb,iBAAiB,CAACsB,WAAlB,CAAgC,mBAAhC,CAEA,GAAMC,CAAAA,iCAAiC,CAAG3B,mBAAmB,CAACI,iBAAD,CAA7D,CAEA,GAAMwB,CAAAA,cAAkB,CAAG,QAArBA,CAAAA,cAAqB,EAAM,CAC/B,GAAMC,CAAAA,UAAU,CAAG5B,aAAa,EAAhC,CACA,cAAuCJ,QAAQ,WAAyBgC,UAAzB,aAAuC3B,QAAvC,0BAA/C,CAAQ4B,QAAR,WAAQA,QAAR,CAAkBC,KAAlB,WAAkBA,KAAlB,CAAyBC,SAAzB,WAAyBA,SAAzB,CACA,GAAgBC,CAAAA,cAAhB,CAAmCH,QAAnC,CAAQI,MAAR,CACA,GAAMC,CAAAA,WAAW,CAAGF,cAAc,GAAK,SAAnB,EAAgCA,cAAc,GAAK,gBAAvE,CACA,mBACE,oBAAC,iCAAD,kBACMH,QAAQ,CAACM,IADf,EAEE,KAAK,CAAED,WAAW,CAAG,GAAIE,CAAAA,KAAJ,CAAUJ,cAAV,CAAH,CAA+BF,KAFnD,CAGE,SAAS,CAAEC,SAHb,CAIE,cAAc,CAAC,qBAJjB,GADF,CAQD,CAbD,CAeA,cAAeJ,CAAAA,cAAf","sourcesContent":["import React, { FC } from 'react';\nimport Filter, { Expanded, FilterData } from './Filter';\nimport { useFetch } from '../../hooks/useFetch';\nimport { groupTargets, Target } from './target';\nimport ScrapePoolPanel from './ScrapePoolPanel';\nimport { withStatusIndicator } from '../../components/withStatusIndicator';\nimport { usePathPrefix } from '../../contexts/PathPrefixContext';\nimport { API_PATH } from '../../constants/constants';\nimport { useLocalStorage } from '../../hooks/useLocalStorage';\n\ninterface ScrapePoolListProps {\n  activeTargets: Target[];\n}\n\nexport const ScrapePoolContent: FC<ScrapePoolListProps> = ({ activeTargets }) => {\n  const targetGroups = groupTargets(activeTargets);\n  const initialFilter: FilterData = {\n    showHealthy: true,\n    showUnhealthy: true,\n  };\n  const [filter, setFilter] = useLocalStorage('targets-page-filter', initialFilter);\n\n  const initialExpanded: Expanded = Object.keys(targetGroups).reduce(\n    (acc: { [scrapePool: string]: boolean }, scrapePool: string) => ({\n      ...acc,\n      [scrapePool]: true,\n    }),\n    {}\n  );\n  const [expanded, setExpanded] = useLocalStorage('targets-page-expansion-state', initialExpanded);\n\n  const { showHealthy, showUnhealthy } = filter;\n  return (\n    <>\n      <Filter filter={filter} setFilter={setFilter} expanded={expanded} setExpanded={setExpanded} />\n      {Object.keys(targetGroups)\n        .filter(scrapePool => {\n          const targetGroup = targetGroups[scrapePool];\n          const isHealthy = targetGroup.upCount === targetGroup.targets.length;\n          return (isHealthy && showHealthy) || (!isHealthy && showUnhealthy);\n        })\n        .map<JSX.Element>(scrapePool => (\n          <ScrapePoolPanel\n            key={scrapePool}\n            scrapePool={scrapePool}\n            targetGroup={targetGroups[scrapePool]}\n            expanded={expanded[scrapePool]}\n            toggleExpanded={(): void => setExpanded({ ...expanded, [scrapePool]: !expanded[scrapePool] })}\n          />\n        ))}\n    </>\n  );\n};\nScrapePoolContent.displayName = 'ScrapePoolContent';\n\nconst ScrapePoolListWithStatusIndicator = withStatusIndicator(ScrapePoolContent);\n\nconst ScrapePoolList: FC = () => {\n  const pathPrefix = usePathPrefix();\n  const { response, error, isLoading } = useFetch<ScrapePoolListProps>(`${pathPrefix}/${API_PATH}/targets?state=active`);\n  const { status: responseStatus } = response;\n  const badResponse = responseStatus !== 'success' && responseStatus !== 'start fetching';\n  return (\n    <ScrapePoolListWithStatusIndicator\n      {...response.data}\n      error={badResponse ? new Error(responseStatus) : error}\n      isLoading={isLoading}\n      componentTitle=\"Targets information\"\n    />\n  );\n};\n\nexport default ScrapePoolList;\n"]},"metadata":{},"sourceType":"module"}