{"ast":null,"code":"import _toConsumableArray from \"/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _createForOfIteratorHelper from \"/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _inherits from \"/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { DefaultBufferLength, NodeSet, NodeType, stringInput, Tree, TreeBuffer } from 'lezer-tree';\nexport { NodeProp, NodeSet, NodeType, Tree, TreeCursor } from 'lezer-tree'; /// A parse stack. These are used internally by the parser to track\n/// parsing progress. They also provide some properties and methods\n/// that external code such as a tokenizer can use to get information\n/// about the parse state.\n\nvar Stack = /*#__PURE__*/function () {\n  /// @internal\n  function Stack( /// A the parse that this stack is part of @internal\n  p, /// Holds state, pos, value stack pos (15 bits array index, 15 bits\n  /// buffer index) triplets for all but the top state\n  /// @internal\n  stack, /// The current parse state @internal\n  state, // The position at which the next reduce should take place. This\n  // can be less than `this.pos` when skipped expressions have been\n  // added to the stack (which should be moved outside of the next\n  // reduction)\n  /// @internal\n  reducePos, /// The input position up to which this stack has parsed.\n  pos, /// The dynamic score of the stack, including dynamic precedence\n  /// and error-recovery penalties\n  /// @internal\n  score, // The output buffer. Holds (type, start, end, size) quads\n  // representing nodes created by the parser, where `size` is\n  // amount of buffer array entries covered by this node.\n  /// @internal\n  buffer, // The base offset of the buffer. When stacks are split, the split\n  // instance shared the buffer history with its parent up to\n  // `bufferBase`, which is the absolute offset (including the\n  // offset of previous splits) into the buffer at which this stack\n  // starts writing.\n  /// @internal\n  bufferBase, /// @internal\n  curContext, // A parent stack from which this was split off, if any. This is\n  // set up so that it always points to a stack that has some\n  // additional buffer content, never to a stack with an equal\n  // `bufferBase`.\n  /// @internal\n  parent) {\n    _classCallCheck(this, Stack);\n\n    this.p = p;\n    this.stack = stack;\n    this.state = state;\n    this.reducePos = reducePos;\n    this.pos = pos;\n    this.score = score;\n    this.buffer = buffer;\n    this.bufferBase = bufferBase;\n    this.curContext = curContext;\n    this.parent = parent;\n  } /// @internal\n\n\n  _createClass(Stack, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"[\".concat(this.stack.filter(function (_, i) {\n        return i % 3 == 0;\n      }).concat(this.state), \"]@\").concat(this.pos).concat(this.score ? \"!\" + this.score : \"\");\n    } // Start an empty stack\n    /// @internal\n\n  }, {\n    key: \"context\",\n    get: /// The stack's current [context](#lezer.ContextTracker) value, if\n    /// any. Its type will depend on the context tracker's type\n    /// parameter, or it will be `null` if there is no context\n    /// tracker.\n    function get() {\n      return this.curContext ? this.curContext.context : null;\n    } // Push a state onto the stack, tracking its start position as well\n    // as the buffer base at that point.\n    /// @internal\n\n  }, {\n    key: \"pushState\",\n    value: function pushState(state, start) {\n      this.stack.push(this.state, start, this.bufferBase + this.buffer.length);\n      this.state = state;\n    } // Apply a reduce action\n    /// @internal\n\n  }, {\n    key: \"reduce\",\n    value: function reduce(action) {\n      var depth = action >> 19\n      /* ReduceDepthShift */\n      ,\n          type = action & 65535\n      /* ValueMask */\n      ;\n      var parser = this.p.parser;\n      var dPrec = parser.dynamicPrecedence(type);\n      if (dPrec) this.score += dPrec;\n\n      if (depth == 0) {\n        // Zero-depth reductions are a special caseâ€”they add stuff to\n        // the stack without popping anything off.\n        if (type < parser.minRepeatTerm) this.storeNode(type, this.reducePos, this.reducePos, 4, true);\n        this.pushState(parser.getGoto(this.state, type, true), this.reducePos);\n        this.reduceContext(type);\n        return;\n      } // Find the base index into `this.stack`, content after which will\n      // be dropped. Note that with `StayFlag` reductions we need to\n      // consume two extra frames (the dummy parent node for the skipped\n      // expression and the state that we'll be staying in, which should\n      // be moved to `this.state`).\n\n\n      var base = this.stack.length - (depth - 1) * 3 - (action & 262144\n      /* StayFlag */\n      ? 6 : 0);\n      var start = this.stack[base - 2];\n      var bufferBase = this.stack[base - 1],\n          count = this.bufferBase + this.buffer.length - bufferBase; // Store normal terms or `R -> R R` repeat reductions\n\n      if (type < parser.minRepeatTerm || action & 131072\n      /* RepeatFlag */\n      ) {\n        var pos = parser.stateFlag(this.state, 1\n        /* Skipped */\n        ) ? this.pos : this.reducePos;\n        this.storeNode(type, start, pos, count + 4, true);\n      }\n\n      if (action & 262144\n      /* StayFlag */\n      ) {\n          this.state = this.stack[base];\n        } else {\n        var baseStateID = this.stack[base - 3];\n        this.state = parser.getGoto(baseStateID, type, true);\n      }\n\n      while (this.stack.length > base) {\n        this.stack.pop();\n      }\n\n      this.reduceContext(type);\n    } // Shift a value into the buffer\n    /// @internal\n\n  }, {\n    key: \"storeNode\",\n    value: function storeNode(term, start, end) {\n      var size = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 4;\n      var isReduce = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n      if (term == 0\n      /* Err */\n      ) {\n          // Try to omit/merge adjacent error nodes\n          var cur = this,\n              top = this.buffer.length;\n\n          if (top == 0 && cur.parent) {\n            top = cur.bufferBase - cur.parent.bufferBase;\n            cur = cur.parent;\n          }\n\n          if (top > 0 && cur.buffer[top - 4] == 0\n          /* Err */\n          && cur.buffer[top - 1] > -1) {\n            if (start == end) return;\n\n            if (cur.buffer[top - 2] >= start) {\n              cur.buffer[top - 2] = end;\n              return;\n            }\n          }\n        }\n\n      if (!isReduce || this.pos == end) {\n        // Simple case, just append\n        this.buffer.push(term, start, end, size);\n      } else {\n        // There may be skipped nodes that have to be moved forward\n        var index = this.buffer.length;\n        if (index > 0 && this.buffer[index - 4] != 0\n        /* Err */\n        ) while (index > 0 && this.buffer[index - 2] > end) {\n            // Move this record forward\n            this.buffer[index] = this.buffer[index - 4];\n            this.buffer[index + 1] = this.buffer[index - 3];\n            this.buffer[index + 2] = this.buffer[index - 2];\n            this.buffer[index + 3] = this.buffer[index - 1];\n            index -= 4;\n            if (size > 4) size -= 4;\n          }\n        this.buffer[index] = term;\n        this.buffer[index + 1] = start;\n        this.buffer[index + 2] = end;\n        this.buffer[index + 3] = size;\n      }\n    } // Apply a shift action\n    /// @internal\n\n  }, {\n    key: \"shift\",\n    value: function shift(action, next, nextEnd) {\n      if (action & 131072\n      /* GotoFlag */\n      ) {\n          this.pushState(action & 65535\n          /* ValueMask */\n          , this.pos);\n        } else if ((action & 262144\n      /* StayFlag */\n      ) == 0) {\n        // Regular shift\n        var start = this.pos,\n            nextState = action,\n            parser = this.p.parser;\n\n        if (nextEnd > this.pos || next <= parser.maxNode) {\n          this.pos = nextEnd;\n          if (!parser.stateFlag(nextState, 1\n          /* Skipped */\n          )) this.reducePos = nextEnd;\n        }\n\n        this.pushState(nextState, start);\n        if (next <= parser.maxNode) this.buffer.push(next, start, nextEnd, 4);\n        this.shiftContext(next);\n      } else {\n        // Shift-and-stay, which means this is a skipped token\n        if (next <= this.p.parser.maxNode) this.buffer.push(next, this.pos, nextEnd, 4);\n        this.pos = nextEnd;\n      }\n    } // Apply an action\n    /// @internal\n\n  }, {\n    key: \"apply\",\n    value: function apply(action, next, nextEnd) {\n      if (action & 65536\n      /* ReduceFlag */\n      ) this.reduce(action);else this.shift(action, next, nextEnd);\n    } // Add a prebuilt node into the buffer. This may be a reused node or\n    // the result of running a nested parser.\n    /// @internal\n\n  }, {\n    key: \"useNode\",\n    value: function useNode(value, next) {\n      var index = this.p.reused.length - 1;\n\n      if (index < 0 || this.p.reused[index] != value) {\n        this.p.reused.push(value);\n        index++;\n      }\n\n      var start = this.pos;\n      this.reducePos = this.pos = start + value.length;\n      this.pushState(next, start);\n      this.buffer.push(index, start, this.reducePos, -1\n      /* size < 0 means this is a reused value */\n      );\n      if (this.curContext) this.updateContext(this.curContext.tracker.reuse(this.curContext.context, value, this.p.input, this));\n    } // Split the stack. Due to the buffer sharing and the fact\n    // that `this.stack` tends to stay quite shallow, this isn't very\n    // expensive.\n    /// @internal\n\n  }, {\n    key: \"split\",\n    value: function split() {\n      var parent = this;\n      var off = parent.buffer.length; // Because the top of the buffer (after this.pos) may be mutated\n      // to reorder reductions and skipped tokens, and shared buffers\n      // should be immutable, this copies any outstanding skipped tokens\n      // to the new buffer, and puts the base pointer before them.\n\n      while (off > 0 && parent.buffer[off - 2] > parent.reducePos) {\n        off -= 4;\n      }\n\n      var buffer = parent.buffer.slice(off),\n          base = parent.bufferBase + off; // Make sure parent points to an actual parent with content, if there is such a parent.\n\n      while (parent && base == parent.bufferBase) {\n        parent = parent.parent;\n      }\n\n      return new Stack(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, buffer, base, this.curContext, parent);\n    } // Try to recover from an error by 'deleting' (ignoring) one token.\n    /// @internal\n\n  }, {\n    key: \"recoverByDelete\",\n    value: function recoverByDelete(next, nextEnd) {\n      var isNode = next <= this.p.parser.maxNode;\n      if (isNode) this.storeNode(next, this.pos, nextEnd);\n      this.storeNode(0\n      /* Err */\n      , this.pos, nextEnd, isNode ? 8 : 4);\n      this.pos = this.reducePos = nextEnd;\n      this.score -= 200\n      /* Token */\n      ;\n    } /// Check if the given term would be able to be shifted (optionally\n    /// after some reductions) on this stack. This can be useful for\n    /// external tokenizers that want to make sure they only provide a\n    /// given token when it applies.\n\n  }, {\n    key: \"canShift\",\n    value: function canShift(term) {\n      for (var sim = new SimulatedStack(this);;) {\n        var action = this.p.parser.stateSlot(sim.top, 4\n        /* DefaultReduce */\n        ) || this.p.parser.hasAction(sim.top, term);\n        if ((action & 65536\n        /* ReduceFlag */\n        ) == 0) return true;\n        if (action == 0) return false;\n        sim.reduce(action);\n      }\n    } /// Find the start position of the rule that is currently being parsed.\n\n  }, {\n    key: \"ruleStart\",\n    get: function get() {\n      for (var state = this.state, base = this.stack.length;;) {\n        var force = this.p.parser.stateSlot(state, 5\n        /* ForcedReduce */\n        );\n        if (!(force & 65536\n        /* ReduceFlag */\n        )) return 0;\n        base -= 3 * (force >> 19\n        /* ReduceDepthShift */\n        );\n        if ((force & 65535\n        /* ValueMask */\n        ) < this.p.parser.minRepeatTerm) return this.stack[base + 1];\n        state = this.stack[base];\n      }\n    } /// Find the start position of an instance of any of the given term\n    /// types, or return `null` when none of them are found.\n    ///\n    /// **Note:** this is only reliable when there is at least some\n    /// state that unambiguously matches the given rule on the stack.\n    /// I.e. if you have a grammar like this, where the difference\n    /// between `a` and `b` is only apparent at the third token:\n    ///\n    ///     a { b | c }\n    ///     b { \"x\" \"y\" \"x\" }\n    ///     c { \"x\" \"y\" \"z\" }\n    ///\n    /// Then a parse state after `\"x\"` will not reliably tell you that\n    /// `b` is on the stack. You _can_ pass `[b, c]` to reliably check\n    /// for either of those two rules (assuming that `a` isn't part of\n    /// some rule that includes other things starting with `\"x\"`).\n    ///\n    /// When `before` is given, this keeps scanning up the stack until\n    /// it finds a match that starts before that position.\n    ///\n    /// Note that you have to be careful when using this in tokenizers,\n    /// since it's relatively easy to introduce data dependencies that\n    /// break incremental parsing by using this method.\n\n  }, {\n    key: \"startOf\",\n    value: function startOf(types, before) {\n      var state = this.state,\n          frame = this.stack.length,\n          parser = this.p.parser;\n\n      for (;;) {\n        var force = parser.stateSlot(state, 5\n        /* ForcedReduce */\n        );\n        var depth = force >> 19\n        /* ReduceDepthShift */\n        ,\n            term = force & 65535\n        /* ValueMask */\n        ;\n\n        if (types.indexOf(term) > -1) {\n          var base = frame - 3 * (force >> 19\n          /* ReduceDepthShift */\n          ),\n              pos = this.stack[base + 1];\n          if (before == null || before > pos) return pos;\n        }\n\n        if (frame == 0) return null;\n\n        if (depth == 0) {\n          frame -= 3;\n          state = this.stack[frame];\n        } else {\n          frame -= 3 * (depth - 1);\n          state = parser.getGoto(this.stack[frame - 3], term, true);\n        }\n      }\n    } // Apply up to Recover.MaxNext recovery actions that conceptually\n    // inserts some missing token or rule.\n    /// @internal\n\n  }, {\n    key: \"recoverByInsert\",\n    value: function recoverByInsert(next) {\n      if (this.stack.length >= 300\n      /* MaxInsertStackDepth */\n      ) return [];\n      var nextStates = this.p.parser.nextStates(this.state);\n\n      if (nextStates.length > 4\n      /* MaxNext */\n      << 1 || this.stack.length >= 120\n      /* DampenInsertStackDepth */\n      ) {\n          var best = [];\n\n          for (var i = 0, s; i < nextStates.length; i += 2) {\n            if ((s = nextStates[i + 1]) != this.state && this.p.parser.hasAction(s, next)) best.push(nextStates[i], s);\n          }\n\n          if (this.stack.length < 120\n          /* DampenInsertStackDepth */\n          ) {\n              var _loop = function _loop(_i) {\n                var s = nextStates[_i + 1];\n                if (!best.some(function (v, i) {\n                  return i & 1 && v == s;\n                })) best.push(nextStates[_i], s);\n              };\n\n              for (var _i = 0; best.length < 4\n              /* MaxNext */\n              << 1 && _i < nextStates.length; _i += 2) {\n                _loop(_i);\n              }\n            }\n\n          nextStates = best;\n        }\n\n      var result = [];\n\n      for (var _i2 = 0; _i2 < nextStates.length && result.length < 4\n      /* MaxNext */\n      ; _i2 += 2) {\n        var _s = nextStates[_i2 + 1];\n        if (_s == this.state) continue;\n        var stack = this.split();\n        stack.storeNode(0\n        /* Err */\n        , stack.pos, stack.pos, 4, true);\n        stack.pushState(_s, this.pos);\n        stack.shiftContext(nextStates[_i2]);\n        stack.score -= 200\n        /* Token */\n        ;\n        result.push(stack);\n      }\n\n      return result;\n    } // Force a reduce, if possible. Return false if that can't\n    // be done.\n    /// @internal\n\n  }, {\n    key: \"forceReduce\",\n    value: function forceReduce() {\n      var reduce = this.p.parser.stateSlot(this.state, 5\n      /* ForcedReduce */\n      );\n      if ((reduce & 65536\n      /* ReduceFlag */\n      ) == 0) return false;\n\n      if (!this.p.parser.validAction(this.state, reduce)) {\n        this.storeNode(0\n        /* Err */\n        , this.reducePos, this.reducePos, 4, true);\n        this.score -= 100\n        /* Reduce */\n        ;\n      }\n\n      this.reduce(reduce);\n      return true;\n    } /// @internal\n\n  }, {\n    key: \"forceAll\",\n    value: function forceAll() {\n      while (!this.p.parser.stateFlag(this.state, 2\n      /* Accepting */\n      ) && this.forceReduce()) {}\n\n      return this;\n    } /// Check whether this state has no further actions (assumed to be a direct descendant of the\n    /// top state, since any other states must be able to continue\n    /// somehow). @internal\n\n  }, {\n    key: \"deadEnd\",\n    get: function get() {\n      if (this.stack.length != 3) return false;\n      var parser = this.p.parser;\n      return parser.data[parser.stateSlot(this.state, 1\n      /* Actions */\n      )] == 65535\n      /* End */\n      && !parser.stateSlot(this.state, 4\n      /* DefaultReduce */\n      );\n    } /// Restart the stack (put it back in its start state). Only safe\n    /// when this.stack.length == 3 (state is directly below the top\n    /// state). @internal\n\n  }, {\n    key: \"restart\",\n    value: function restart() {\n      this.state = this.stack[0];\n      this.stack.length = 0;\n    } /// @internal\n\n  }, {\n    key: \"sameState\",\n    value: function sameState(other) {\n      if (this.state != other.state || this.stack.length != other.stack.length) return false;\n\n      for (var i = 0; i < this.stack.length; i += 3) {\n        if (this.stack[i] != other.stack[i]) return false;\n      }\n\n      return true;\n    } /// Get the parser used by this stack.\n\n  }, {\n    key: \"parser\",\n    get: function get() {\n      return this.p.parser;\n    } /// Test whether a given dialect (by numeric ID, as exported from\n    /// the terms file) is enabled.\n\n  }, {\n    key: \"dialectEnabled\",\n    value: function dialectEnabled(dialectID) {\n      return this.p.parser.dialect.flags[dialectID];\n    }\n  }, {\n    key: \"shiftContext\",\n    value: function shiftContext(term) {\n      if (this.curContext) this.updateContext(this.curContext.tracker.shift(this.curContext.context, term, this.p.input, this));\n    }\n  }, {\n    key: \"reduceContext\",\n    value: function reduceContext(term) {\n      if (this.curContext) this.updateContext(this.curContext.tracker.reduce(this.curContext.context, term, this.p.input, this));\n    } /// @internal\n\n  }, {\n    key: \"emitContext\",\n    value: function emitContext() {\n      var cx = this.curContext;\n      if (!cx.tracker.strict) return;\n      var last = this.buffer.length - 1;\n      if (last < 0 || this.buffer[last] != -2) this.buffer.push(cx.hash, this.reducePos, this.reducePos, -2);\n    }\n  }, {\n    key: \"updateContext\",\n    value: function updateContext(context) {\n      if (context != this.curContext.context) {\n        var newCx = new StackContext(this.curContext.tracker, context);\n        if (newCx.hash != this.curContext.hash) this.emitContext();\n        this.curContext = newCx;\n      }\n    }\n  }], [{\n    key: \"start\",\n    value: function start(p, state) {\n      var pos = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var cx = p.parser.context;\n      return new Stack(p, [], state, pos, pos, 0, [], 0, cx ? new StackContext(cx, cx.start) : null, null);\n    }\n  }]);\n\n  return Stack;\n}();\n\nvar StackContext = function StackContext(tracker, context) {\n  _classCallCheck(this, StackContext);\n\n  this.tracker = tracker;\n  this.context = context;\n  this.hash = tracker.hash(context);\n};\n\nvar Recover;\n\n(function (Recover) {\n  Recover[Recover[\"Token\"] = 200] = \"Token\";\n  Recover[Recover[\"Reduce\"] = 100] = \"Reduce\";\n  Recover[Recover[\"MaxNext\"] = 4] = \"MaxNext\";\n  Recover[Recover[\"MaxInsertStackDepth\"] = 300] = \"MaxInsertStackDepth\";\n  Recover[Recover[\"DampenInsertStackDepth\"] = 120] = \"DampenInsertStackDepth\";\n})(Recover || (Recover = {})); // Used to cheaply run some reductions to scan ahead without mutating\n// an entire stack\n\n\nvar SimulatedStack = /*#__PURE__*/function () {\n  function SimulatedStack(stack) {\n    _classCallCheck(this, SimulatedStack);\n\n    this.stack = stack;\n    this.top = stack.state;\n    this.rest = stack.stack;\n    this.offset = this.rest.length;\n  }\n\n  _createClass(SimulatedStack, [{\n    key: \"reduce\",\n    value: function reduce(action) {\n      var term = action & 65535\n      /* ValueMask */\n      ,\n          depth = action >> 19\n      /* ReduceDepthShift */\n      ;\n\n      if (depth == 0) {\n        if (this.rest == this.stack.stack) this.rest = this.rest.slice();\n        this.rest.push(this.top, 0, 0);\n        this.offset += 3;\n      } else {\n        this.offset -= (depth - 1) * 3;\n      }\n\n      var goto = this.stack.p.parser.getGoto(this.rest[this.offset - 3], term, true);\n      this.top = goto;\n    }\n  }]);\n\n  return SimulatedStack;\n}(); // This is given to `Tree.build` to build a buffer, and encapsulates\n// the parent-stack-walking necessary to read the nodes.\n\n\nvar StackBufferCursor = /*#__PURE__*/function () {\n  function StackBufferCursor(stack, pos, index) {\n    _classCallCheck(this, StackBufferCursor);\n\n    this.stack = stack;\n    this.pos = pos;\n    this.index = index;\n    this.buffer = stack.buffer;\n    if (this.index == 0) this.maybeNext();\n  }\n\n  _createClass(StackBufferCursor, [{\n    key: \"maybeNext\",\n    value: function maybeNext() {\n      var next = this.stack.parent;\n\n      if (next != null) {\n        this.index = this.stack.bufferBase - next.bufferBase;\n        this.stack = next;\n        this.buffer = next.buffer;\n      }\n    }\n  }, {\n    key: \"id\",\n    get: function get() {\n      return this.buffer[this.index - 4];\n    }\n  }, {\n    key: \"start\",\n    get: function get() {\n      return this.buffer[this.index - 3];\n    }\n  }, {\n    key: \"end\",\n    get: function get() {\n      return this.buffer[this.index - 2];\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this.buffer[this.index - 1];\n    }\n  }, {\n    key: \"next\",\n    value: function next() {\n      this.index -= 4;\n      this.pos -= 4;\n      if (this.index == 0) this.maybeNext();\n    }\n  }, {\n    key: \"fork\",\n    value: function fork() {\n      return new StackBufferCursor(this.stack, this.pos, this.index);\n    }\n  }], [{\n    key: \"create\",\n    value: function create(stack) {\n      return new StackBufferCursor(stack, stack.bufferBase + stack.buffer.length, stack.buffer.length);\n    }\n  }]);\n\n  return StackBufferCursor;\n}(); /// Tokenizers write the tokens they read into instances of this class.\n\n\nvar Token = /*#__PURE__*/function () {\n  function Token() {\n    _classCallCheck(this, Token);\n\n    /// The start of the token. This is set by the parser, and should not\n    /// be mutated by the tokenizer.\n    this.start = -1; /// This starts at -1, and should be updated to a term id when a\n    /// matching token is found.\n\n    this.value = -1; /// When setting `.value`, you should also set `.end` to the end\n    /// position of the token. (You'll usually want to use the `accept`\n    /// method.)\n\n    this.end = -1;\n  } /// Accept a token, setting `value` and `end` to the given values.\n\n\n  _createClass(Token, [{\n    key: \"accept\",\n    value: function accept(value, end) {\n      this.value = value;\n      this.end = end;\n    }\n  }]);\n\n  return Token;\n}(); /// @internal\n\n\nvar TokenGroup = /*#__PURE__*/function () {\n  function TokenGroup(data, id) {\n    _classCallCheck(this, TokenGroup);\n\n    this.data = data;\n    this.id = id;\n  }\n\n  _createClass(TokenGroup, [{\n    key: \"token\",\n    value: function token(input, _token, stack) {\n      readToken(this.data, input, _token, stack, this.id);\n    }\n  }]);\n\n  return TokenGroup;\n}();\n\nTokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false; /// Exports that are used for `@external tokens` in the grammar should\n/// export an instance of this class.\n\nvar ExternalTokenizer = /// Create a tokenizer. The first argument is the function that,\n/// given an input stream and a token object,\n/// [fills](#lezer.Token.accept) the token object if it recognizes a\n/// token. `token.start` should be used as the start position to\n/// scan from.\nfunction ExternalTokenizer( /// @internal\ntoken) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  _classCallCheck(this, ExternalTokenizer);\n\n  this.token = token;\n  this.contextual = !!options.contextual;\n  this.fallback = !!options.fallback;\n  this.extend = !!options.extend;\n}; // Tokenizer data is stored a big uint16 array containing, for each\n// state:\n//\n//  - A group bitmask, indicating what token groups are reachable from\n//    this state, so that paths that can only lead to tokens not in\n//    any of the current groups can be cut off early.\n//\n//  - The position of the end of the state's sequence of accepting\n//    tokens\n//\n//  - The number of outgoing edges for the state\n//\n//  - The accepting tokens, as (token id, group mask) pairs\n//\n//  - The outgoing edges, as (start character, end character, state\n//    index) triples, with end character being exclusive\n//\n// This function interprets that data, running through a stream as\n// long as new states with the a matching group mask can be reached,\n// and updating `token` when it matches a token.\n\n\nfunction readToken(data, input, token, stack, group) {\n  var state = 0,\n      groupMask = 1 << group,\n      dialect = stack.p.parser.dialect;\n\n  scan: for (var pos = token.start;;) {\n    if ((groupMask & data[state]) == 0) break;\n    var accEnd = data[state + 1]; // Check whether this state can lead to a token in the current group\n    // Accept tokens in this state, possibly overwriting\n    // lower-precedence / shorter tokens\n\n    for (var i = state + 3; i < accEnd; i += 2) {\n      if ((data[i + 1] & groupMask) > 0) {\n        var term = data[i];\n\n        if (dialect.allows(term) && (token.value == -1 || token.value == term || stack.p.parser.overrides(term, token.value))) {\n          token.accept(term, pos);\n          break;\n        }\n      }\n    }\n\n    var next = input.get(pos++); // Do a binary search on the state's edges\n\n    for (var low = 0, high = data[state + 2]; low < high;) {\n      var mid = low + high >> 1;\n      var index = accEnd + mid + (mid << 1);\n      var from = data[index],\n          to = data[index + 1];\n      if (next < from) high = mid;else if (next >= to) low = mid + 1;else {\n        state = data[index + 2];\n        continue scan;\n      }\n    }\n\n    break;\n  }\n} // See lezer-generator/src/encode.ts for comments about the encoding\n// used here\n\n\nfunction decodeArray(input) {\n  var Type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Uint16Array;\n  if (typeof input != \"string\") return input;\n  var array = null;\n\n  for (var pos = 0, out = 0; pos < input.length;) {\n    var value = 0;\n\n    for (;;) {\n      var next = input.charCodeAt(pos++),\n          stop = false;\n\n      if (next == 126\n      /* BigValCode */\n      ) {\n          value = 65535\n          /* BigVal */\n          ;\n          break;\n        }\n\n      if (next >= 92\n      /* Gap2 */\n      ) next--;\n      if (next >= 34\n      /* Gap1 */\n      ) next--;\n      var digit = next - 32\n      /* Start */\n      ;\n\n      if (digit >= 46\n      /* Base */\n      ) {\n          digit -= 46\n          /* Base */\n          ;\n          stop = true;\n        }\n\n      value += digit;\n      if (stop) break;\n      value *= 46\n      /* Base */\n      ;\n    }\n\n    if (array) array[out++] = value;else array = new Type(value);\n  }\n\n  return array;\n} // FIXME find some way to reduce recovery work done when the input\n// doesn't match the grammar at all.\n// Environment variable used to control console output\n\n\nvar verbose = typeof process != \"undefined\" && /\\bparse\\b/.test(process.env.LOG);\nvar stackIDs = null;\n\nfunction cutAt(tree, pos, side) {\n  var cursor = tree.cursor(pos);\n\n  for (;;) {\n    if (!(side < 0 ? cursor.childBefore(pos) : cursor.childAfter(pos))) for (;;) {\n      if ((side < 0 ? cursor.to <= pos : cursor.from >= pos) && !cursor.type.isError) return side < 0 ? Math.max(0, Math.min(cursor.to - 1, pos - 5)) : Math.min(tree.length, Math.max(cursor.from + 1, pos + 5));\n      if (side < 0 ? cursor.prevSibling() : cursor.nextSibling()) break;\n      if (!cursor.parent()) return side < 0 ? 0 : tree.length;\n    }\n  }\n}\n\nvar FragmentCursor = /*#__PURE__*/function () {\n  function FragmentCursor(fragments) {\n    _classCallCheck(this, FragmentCursor);\n\n    this.fragments = fragments;\n    this.i = 0;\n    this.fragment = null;\n    this.safeFrom = -1;\n    this.safeTo = -1;\n    this.trees = [];\n    this.start = [];\n    this.index = [];\n    this.nextFragment();\n  }\n\n  _createClass(FragmentCursor, [{\n    key: \"nextFragment\",\n    value: function nextFragment() {\n      var fr = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];\n\n      if (fr) {\n        this.safeFrom = fr.openStart ? cutAt(fr.tree, fr.from + fr.offset, 1) - fr.offset : fr.from;\n        this.safeTo = fr.openEnd ? cutAt(fr.tree, fr.to + fr.offset, -1) - fr.offset : fr.to;\n\n        while (this.trees.length) {\n          this.trees.pop();\n          this.start.pop();\n          this.index.pop();\n        }\n\n        this.trees.push(fr.tree);\n        this.start.push(-fr.offset);\n        this.index.push(0);\n        this.nextStart = this.safeFrom;\n      } else {\n        this.nextStart = 1e9;\n      }\n    } // `pos` must be >= any previously given `pos` for this cursor\n\n  }, {\n    key: \"nodeAt\",\n    value: function nodeAt(pos) {\n      if (pos < this.nextStart) return null;\n\n      while (this.fragment && this.safeTo <= pos) {\n        this.nextFragment();\n      }\n\n      if (!this.fragment) return null;\n\n      for (;;) {\n        var last = this.trees.length - 1;\n\n        if (last < 0) {\n          // End of tree\n          this.nextFragment();\n          return null;\n        }\n\n        var top = this.trees[last],\n            index = this.index[last];\n\n        if (index == top.children.length) {\n          this.trees.pop();\n          this.start.pop();\n          this.index.pop();\n          continue;\n        }\n\n        var next = top.children[index];\n        var start = this.start[last] + top.positions[index];\n\n        if (start > pos) {\n          this.nextStart = start;\n          return null;\n        } else if (start == pos && start + next.length <= this.safeTo) {\n          return start == pos && start >= this.safeFrom ? next : null;\n        }\n\n        if (next instanceof TreeBuffer) {\n          this.index[last]++;\n          this.nextStart = start + next.length;\n        } else {\n          this.index[last]++;\n\n          if (start + next.length >= pos) {\n            // Enter this node\n            this.trees.push(next);\n            this.start.push(start);\n            this.index.push(0);\n          }\n        }\n      }\n    }\n  }]);\n\n  return FragmentCursor;\n}();\n\nvar CachedToken = /*#__PURE__*/function (_Token) {\n  _inherits(CachedToken, _Token);\n\n  var _super = _createSuper(CachedToken);\n\n  function CachedToken() {\n    var _this;\n\n    _classCallCheck(this, CachedToken);\n\n    _this = _super.apply(this, arguments);\n    _this.extended = -1;\n    _this.mask = 0;\n    _this.context = 0;\n    return _this;\n  }\n\n  _createClass(CachedToken, [{\n    key: \"clear\",\n    value: function clear(start) {\n      this.start = start;\n      this.value = this.extended = -1;\n    }\n  }]);\n\n  return CachedToken;\n}(Token);\n\nvar dummyToken = new Token();\n\nvar TokenCache = /*#__PURE__*/function () {\n  function TokenCache(parser) {\n    _classCallCheck(this, TokenCache);\n\n    this.tokens = [];\n    this.mainToken = dummyToken;\n    this.actions = [];\n    this.tokens = parser.tokenizers.map(function (_) {\n      return new CachedToken();\n    });\n  }\n\n  _createClass(TokenCache, [{\n    key: \"getActions\",\n    value: function getActions(stack, input) {\n      var actionIndex = 0;\n      var main = null;\n      var parser = stack.p.parser,\n          tokenizers = parser.tokenizers;\n      var mask = parser.stateSlot(stack.state, 3\n      /* TokenizerMask */\n      );\n      var context = stack.curContext ? stack.curContext.hash : 0;\n\n      for (var i = 0; i < tokenizers.length; i++) {\n        if ((1 << i & mask) == 0) continue;\n        var tokenizer = tokenizers[i],\n            token = this.tokens[i];\n        if (main && !tokenizer.fallback) continue;\n\n        if (tokenizer.contextual || token.start != stack.pos || token.mask != mask || token.context != context) {\n          this.updateCachedToken(token, tokenizer, stack, input);\n          token.mask = mask;\n          token.context = context;\n        }\n\n        if (token.value != 0\n        /* Err */\n        ) {\n            var startIndex = actionIndex;\n            if (token.extended > -1) actionIndex = this.addActions(stack, token.extended, token.end, actionIndex);\n            actionIndex = this.addActions(stack, token.value, token.end, actionIndex);\n\n            if (!tokenizer.extend) {\n              main = token;\n              if (actionIndex > startIndex) break;\n            }\n          }\n      }\n\n      while (this.actions.length > actionIndex) {\n        this.actions.pop();\n      }\n\n      if (!main) {\n        main = dummyToken;\n        main.start = stack.pos;\n        if (stack.pos == input.length) main.accept(stack.p.parser.eofTerm, stack.pos);else main.accept(0\n        /* Err */\n        , stack.pos + 1);\n      }\n\n      this.mainToken = main;\n      return this.actions;\n    }\n  }, {\n    key: \"updateCachedToken\",\n    value: function updateCachedToken(token, tokenizer, stack, input) {\n      token.clear(stack.pos);\n      tokenizer.token(input, token, stack);\n\n      if (token.value > -1) {\n        var parser = stack.p.parser;\n\n        for (var i = 0; i < parser.specialized.length; i++) {\n          if (parser.specialized[i] == token.value) {\n            var result = parser.specializers[i](input.read(token.start, token.end), stack);\n\n            if (result >= 0 && stack.p.parser.dialect.allows(result >> 1)) {\n              if ((result & 1) == 0\n              /* Specialize */\n              ) token.value = result >> 1;else token.extended = result >> 1;\n              break;\n            }\n          }\n        }\n      } else if (stack.pos == input.length) {\n        token.accept(stack.p.parser.eofTerm, stack.pos);\n      } else {\n        token.accept(0\n        /* Err */\n        , stack.pos + 1);\n      }\n    }\n  }, {\n    key: \"putAction\",\n    value: function putAction(action, token, end, index) {\n      // Don't add duplicate actions\n      for (var i = 0; i < index; i += 3) {\n        if (this.actions[i] == action) return index;\n      }\n\n      this.actions[index++] = action;\n      this.actions[index++] = token;\n      this.actions[index++] = end;\n      return index;\n    }\n  }, {\n    key: \"addActions\",\n    value: function addActions(stack, token, end, index) {\n      var state = stack.state,\n          parser = stack.p.parser,\n          data = parser.data;\n\n      for (var set = 0; set < 2; set++) {\n        for (var i = parser.stateSlot(state, set ? 2\n        /* Skip */\n        : 1\n        /* Actions */\n        );; i += 3) {\n          if (data[i] == 65535\n          /* End */\n          ) {\n              if (data[i + 1] == 1\n              /* Next */\n              ) {\n                  i = pair(data, i + 2);\n                } else {\n                if (index == 0 && data[i + 1] == 2\n                /* Other */\n                ) index = this.putAction(pair(data, i + 1), token, end, index);\n                break;\n              }\n            }\n\n          if (data[i] == token) index = this.putAction(pair(data, i + 1), token, end, index);\n        }\n      }\n\n      return index;\n    }\n  }]);\n\n  return TokenCache;\n}();\n\nvar Rec;\n\n(function (Rec) {\n  Rec[Rec[\"Distance\"] = 5] = \"Distance\";\n  Rec[Rec[\"MaxRemainingPerStep\"] = 3] = \"MaxRemainingPerStep\";\n  Rec[Rec[\"MinBufferLengthPrune\"] = 200] = \"MinBufferLengthPrune\";\n  Rec[Rec[\"ForceReduceLimit\"] = 10] = \"ForceReduceLimit\";\n})(Rec || (Rec = {})); /// A parse context can be used for step-by-step parsing. After\n/// creating it, you repeatedly call `.advance()` until it returns a\n/// tree to indicate it has reached the end of the parse.\n\n\nvar Parse = /*#__PURE__*/function () {\n  function Parse(parser, input, startPos, context) {\n    _classCallCheck(this, Parse);\n\n    this.parser = parser;\n    this.input = input;\n    this.startPos = startPos;\n    this.context = context; // The position to which the parse has advanced.\n\n    this.pos = 0;\n    this.recovering = 0;\n    this.nextStackID = 0x2654;\n    this.nested = null;\n    this.nestEnd = 0;\n    this.nestWrap = null;\n    this.reused = [];\n    this.tokens = new TokenCache(parser);\n    this.topTerm = parser.top[1];\n    this.stacks = [Stack.start(this, parser.top[0], this.startPos)];\n    var fragments = context === null || context === void 0 ? void 0 : context.fragments;\n    this.fragments = fragments && fragments.length ? new FragmentCursor(fragments) : null;\n  } // Move the parser forward. This will process all parse stacks at\n  // `this.pos` and try to advance them to a further position. If no\n  // stack for such a position is found, it'll start error-recovery.\n  //\n  // When the parse is finished, this will return a syntax tree. When\n  // not, it returns `null`.\n\n\n  _createClass(Parse, [{\n    key: \"advance\",\n    value: function advance() {\n      if (this.nested) {\n        var result = this.nested.advance();\n        this.pos = this.nested.pos;\n\n        if (result) {\n          this.finishNested(this.stacks[0], result);\n          this.nested = null;\n        }\n\n        return null;\n      }\n\n      var stacks = this.stacks,\n          pos = this.pos; // This will hold stacks beyond `pos`.\n\n      var newStacks = this.stacks = [];\n      var stopped, stoppedTokens;\n      var maybeNest; // Keep advancing any stacks at `pos` until they either move\n      // forward or can't be advanced. Gather stacks that can't be\n      // advanced further in `stopped`.\n\n      for (var i = 0; i < stacks.length; i++) {\n        var stack = stacks[i],\n            nest = void 0;\n\n        for (;;) {\n          if (stack.pos > pos) {\n            newStacks.push(stack);\n          } else if (nest = this.checkNest(stack)) {\n            if (!maybeNest || maybeNest.stack.score < stack.score) maybeNest = nest;\n          } else if (this.advanceStack(stack, newStacks, stacks)) {\n            continue;\n          } else {\n            if (!stopped) {\n              stopped = [];\n              stoppedTokens = [];\n            }\n\n            stopped.push(stack);\n            var tok = this.tokens.mainToken;\n            stoppedTokens.push(tok.value, tok.end);\n          }\n\n          break;\n        }\n      }\n\n      if (maybeNest) {\n        this.startNested(maybeNest);\n        return null;\n      }\n\n      if (!newStacks.length) {\n        var finished = stopped && findFinished(stopped);\n        if (finished) return this.stackToTree(finished);\n\n        if (this.parser.strict) {\n          if (verbose && stopped) console.log(\"Stuck with token \" + this.parser.getName(this.tokens.mainToken.value));\n          throw new SyntaxError(\"No parse at \" + pos);\n        }\n\n        if (!this.recovering) this.recovering = 5\n        /* Distance */\n        ;\n      }\n\n      if (this.recovering && stopped) {\n        var _finished = this.runRecovery(stopped, stoppedTokens, newStacks);\n\n        if (_finished) return this.stackToTree(_finished.forceAll());\n      }\n\n      if (this.recovering) {\n        var maxRemaining = this.recovering == 1 ? 1 : this.recovering * 3\n        /* MaxRemainingPerStep */\n        ;\n\n        if (newStacks.length > maxRemaining) {\n          newStacks.sort(function (a, b) {\n            return b.score - a.score;\n          });\n\n          while (newStacks.length > maxRemaining) {\n            newStacks.pop();\n          }\n        }\n\n        if (newStacks.some(function (s) {\n          return s.reducePos > pos;\n        })) this.recovering--;\n      } else if (newStacks.length > 1) {\n        // Prune stacks that are in the same state, or that have been\n        // running without splitting for a while, to avoid getting stuck\n        // with multiple successful stacks running endlessly on.\n        outer: for (var _i3 = 0; _i3 < newStacks.length - 1; _i3++) {\n          var _stack = newStacks[_i3];\n\n          for (var j = _i3 + 1; j < newStacks.length; j++) {\n            var other = newStacks[j];\n\n            if (_stack.sameState(other) || _stack.buffer.length > 200\n            /* MinBufferLengthPrune */\n            && other.buffer.length > 200\n            /* MinBufferLengthPrune */\n            ) {\n                if ((_stack.score - other.score || _stack.buffer.length - other.buffer.length) > 0) {\n                  newStacks.splice(j--, 1);\n                } else {\n                  newStacks.splice(_i3--, 1);\n                  continue outer;\n                }\n              }\n          }\n        }\n      }\n\n      this.pos = newStacks[0].pos;\n\n      for (var _i4 = 1; _i4 < newStacks.length; _i4++) {\n        if (newStacks[_i4].pos < this.pos) this.pos = newStacks[_i4].pos;\n      }\n\n      return null;\n    } // Returns an updated version of the given stack, or null if the\n    // stack can't advance normally. When `split` and `stacks` are\n    // given, stacks split off by ambiguous operations will be pushed to\n    // `split`, or added to `stacks` if they move `pos` forward.\n\n  }, {\n    key: \"advanceStack\",\n    value: function advanceStack(stack, stacks, split) {\n      var start = stack.pos,\n          input = this.input,\n          parser = this.parser;\n      var base = verbose ? this.stackID(stack) + \" -> \" : \"\";\n\n      if (this.fragments) {\n        var strictCx = stack.curContext && stack.curContext.tracker.strict,\n            cxHash = strictCx ? stack.curContext.hash : 0;\n\n        for (var cached = this.fragments.nodeAt(start); cached;) {\n          var match = this.parser.nodeSet.types[cached.type.id] == cached.type ? parser.getGoto(stack.state, cached.type.id) : -1;\n\n          if (match > -1 && cached.length && (!strictCx || (cached.contextHash || 0) == cxHash)) {\n            stack.useNode(cached, match);\n            if (verbose) console.log(base + this.stackID(stack) + \" (via reuse of \".concat(parser.getName(cached.type.id), \")\"));\n            return true;\n          }\n\n          if (!(cached instanceof Tree) || cached.children.length == 0 || cached.positions[0] > 0) break;\n          var inner = cached.children[0];\n          if (inner instanceof Tree) cached = inner;else break;\n        }\n      }\n\n      var defaultReduce = parser.stateSlot(stack.state, 4\n      /* DefaultReduce */\n      );\n\n      if (defaultReduce > 0) {\n        stack.reduce(defaultReduce);\n        if (verbose) console.log(base + this.stackID(stack) + \" (via always-reduce \".concat(parser.getName(defaultReduce & 65535\n        /* ValueMask */\n        ), \")\"));\n        return true;\n      }\n\n      var actions = this.tokens.getActions(stack, input);\n\n      for (var i = 0; i < actions.length;) {\n        var action = actions[i++],\n            term = actions[i++],\n            end = actions[i++];\n        var last = i == actions.length || !split;\n        var localStack = last ? stack : stack.split();\n        localStack.apply(action, term, end);\n        if (verbose) console.log(base + this.stackID(localStack) + \" (via \".concat((action & 65536\n        /* ReduceFlag */\n        ) == 0 ? \"shift\" : \"reduce of \".concat(parser.getName(action & 65535\n        /* ValueMask */\n        )), \" for \").concat(parser.getName(term), \" @ \").concat(start).concat(localStack == stack ? \"\" : \", split\", \")\"));\n        if (last) return true;else if (localStack.pos > start) stacks.push(localStack);else split.push(localStack);\n      }\n\n      return false;\n    } // Advance a given stack forward as far as it will go. Returns the\n    // (possibly updated) stack if it got stuck, or null if it moved\n    // forward and was given to `pushStackDedup`.\n\n  }, {\n    key: \"advanceFully\",\n    value: function advanceFully(stack, newStacks) {\n      var pos = stack.pos;\n\n      for (;;) {\n        var nest = this.checkNest(stack);\n        if (nest) return nest;\n        if (!this.advanceStack(stack, null, null)) return false;\n\n        if (stack.pos > pos) {\n          pushStackDedup(stack, newStacks);\n          return true;\n        }\n      }\n    }\n  }, {\n    key: \"runRecovery\",\n    value: function runRecovery(stacks, tokens, newStacks) {\n      var finished = null,\n          restarted = false;\n      var maybeNest;\n\n      for (var i = 0; i < stacks.length; i++) {\n        var stack = stacks[i],\n            token = tokens[i << 1],\n            tokenEnd = tokens[(i << 1) + 1];\n        var base = verbose ? this.stackID(stack) + \" -> \" : \"\";\n\n        if (stack.deadEnd) {\n          if (restarted) continue;\n          restarted = true;\n          stack.restart();\n          if (verbose) console.log(base + this.stackID(stack) + \" (restarted)\");\n          var done = this.advanceFully(stack, newStacks);\n\n          if (done) {\n            if (done !== true) maybeNest = done;\n            continue;\n          }\n        }\n\n        var force = stack.split(),\n            forceBase = base;\n\n        for (var j = 0; force.forceReduce() && j < 10\n        /* ForceReduceLimit */\n        ; j++) {\n          if (verbose) console.log(forceBase + this.stackID(force) + \" (via force-reduce)\");\n\n          var _done = this.advanceFully(force, newStacks);\n\n          if (_done) {\n            if (_done !== true) maybeNest = _done;\n            break;\n          }\n\n          if (verbose) forceBase = this.stackID(force) + \" -> \";\n        }\n\n        var _iterator = _createForOfIteratorHelper(stack.recoverByInsert(token)),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var insert = _step.value;\n            if (verbose) console.log(base + this.stackID(insert) + \" (via recover-insert)\");\n            this.advanceFully(insert, newStacks);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        if (this.input.length > stack.pos) {\n          if (tokenEnd == stack.pos) {\n            tokenEnd++;\n            token = 0\n            /* Err */\n            ;\n          }\n\n          stack.recoverByDelete(token, tokenEnd);\n          if (verbose) console.log(base + this.stackID(stack) + \" (via recover-delete \".concat(this.parser.getName(token), \")\"));\n          pushStackDedup(stack, newStacks);\n        } else if (!finished || finished.score < stack.score) {\n          finished = stack;\n        }\n      }\n\n      if (finished) return finished;\n\n      if (maybeNest) {\n        var _iterator2 = _createForOfIteratorHelper(this.stacks),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var s = _step2.value;\n\n            if (s.score > maybeNest.stack.score) {\n              maybeNest = undefined;\n              break;\n            }\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n\n      if (maybeNest) this.startNested(maybeNest);\n      return null;\n    }\n  }, {\n    key: \"forceFinish\",\n    value: function forceFinish() {\n      var stack = this.stacks[0].split();\n      if (this.nested) this.finishNested(stack, this.nested.forceFinish());\n      return this.stackToTree(stack.forceAll());\n    } // Convert the stack's buffer to a syntax tree.\n\n  }, {\n    key: \"stackToTree\",\n    value: function stackToTree(stack) {\n      var pos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : stack.pos;\n      if (this.parser.context) stack.emitContext();\n      return Tree.build({\n        buffer: StackBufferCursor.create(stack),\n        nodeSet: this.parser.nodeSet,\n        topID: this.topTerm,\n        maxBufferLength: this.parser.bufferLength,\n        reused: this.reused,\n        start: this.startPos,\n        length: pos - this.startPos,\n        minRepeatType: this.parser.minRepeatTerm\n      });\n    }\n  }, {\n    key: \"checkNest\",\n    value: function checkNest(stack) {\n      var info = this.parser.findNested(stack.state);\n      if (!info) return null;\n      var spec = info.value;\n      if (typeof spec == \"function\") spec = spec(this.input, stack);\n      return spec ? {\n        stack: stack,\n        info: info,\n        spec: spec\n      } : null;\n    }\n  }, {\n    key: \"startNested\",\n    value: function startNested(nest) {\n      var stack = nest.stack,\n          info = nest.info,\n          spec = nest.spec;\n      this.stacks = [stack];\n      this.nestEnd = this.scanForNestEnd(stack, info.end, spec.filterEnd);\n      this.nestWrap = typeof spec.wrapType == \"number\" ? this.parser.nodeSet.types[spec.wrapType] : spec.wrapType || null;\n\n      if (spec.startParse) {\n        this.nested = spec.startParse(this.input.clip(this.nestEnd), stack.pos, this.context);\n      } else {\n        this.finishNested(stack);\n      }\n    }\n  }, {\n    key: \"scanForNestEnd\",\n    value: function scanForNestEnd(stack, endToken, filter) {\n      for (var pos = stack.pos; pos < this.input.length; pos++) {\n        dummyToken.start = pos;\n        dummyToken.value = -1;\n        endToken.token(this.input, dummyToken, stack);\n        if (dummyToken.value > -1 && (!filter || filter(this.input.read(pos, dummyToken.end)))) return pos;\n      }\n\n      return this.input.length;\n    }\n  }, {\n    key: \"finishNested\",\n    value: function finishNested(stack, tree) {\n      if (this.nestWrap) tree = new Tree(this.nestWrap, tree ? [tree] : [], tree ? [0] : [], this.nestEnd - stack.pos);else if (!tree) tree = new Tree(NodeType.none, [], [], this.nestEnd - stack.pos);\n      var info = this.parser.findNested(stack.state);\n      stack.useNode(tree, this.parser.getGoto(stack.state, info.placeholder, true));\n      if (verbose) console.log(this.stackID(stack) + \" (via unnest)\");\n    }\n  }, {\n    key: \"stackID\",\n    value: function stackID(stack) {\n      var id = (stackIDs || (stackIDs = new WeakMap())).get(stack);\n      if (!id) stackIDs.set(stack, id = String.fromCodePoint(this.nextStackID++));\n      return id + stack;\n    }\n  }]);\n\n  return Parse;\n}();\n\nfunction pushStackDedup(stack, newStacks) {\n  for (var i = 0; i < newStacks.length; i++) {\n    var other = newStacks[i];\n\n    if (other.pos == stack.pos && other.sameState(stack)) {\n      if (newStacks[i].score < stack.score) newStacks[i] = stack;\n      return;\n    }\n  }\n\n  newStacks.push(stack);\n}\n\nvar Dialect = /*#__PURE__*/function () {\n  function Dialect(source, flags, disabled) {\n    _classCallCheck(this, Dialect);\n\n    this.source = source;\n    this.flags = flags;\n    this.disabled = disabled;\n  }\n\n  _createClass(Dialect, [{\n    key: \"allows\",\n    value: function allows(term) {\n      return !this.disabled || this.disabled[term] == 0;\n    }\n  }]);\n\n  return Dialect;\n}();\n\nvar id = function id(x) {\n  return x;\n}; /// Context trackers are used to track stateful context (such as\n/// indentation in the Python grammar, or parent elements in the XML\n/// grammar) needed by external tokenizers. You declare them in a\n/// grammar file as `@context exportName from \"module\"`.\n///\n/// Context values should be immutable, and can be updated (replaced)\n/// on shift or reduce actions.\n\n\nvar ContextTracker = /// The export used in a `@context` declaration should be of this\n/// type.\nfunction ContextTracker(spec) {\n  _classCallCheck(this, ContextTracker);\n\n  this.start = spec.start;\n  this.shift = spec.shift || id;\n  this.reduce = spec.reduce || id;\n  this.reuse = spec.reuse || id;\n  this.hash = spec.hash;\n  this.strict = spec.strict !== false;\n}; /// A parser holds the parse tables for a given grammar, as generated\n/// by `lezer-generator`.\n\n\nvar Parser = /*#__PURE__*/function () {\n  /// @internal\n  function Parser(spec) {\n    var _this2 = this;\n\n    _classCallCheck(this, Parser);\n\n    /// @internal\n    this.bufferLength = DefaultBufferLength; /// @internal\n\n    this.strict = false;\n    this.cachedDialect = null;\n    if (spec.version != 13\n    /* Version */\n    ) throw new RangeError(\"Parser version (\".concat(spec.version, \") doesn't match runtime version (\", 13\n      /* Version */\n      , \")\"));\n    var tokenArray = decodeArray(spec.tokenData);\n    var nodeNames = spec.nodeNames.split(\" \");\n    this.minRepeatTerm = nodeNames.length;\n    this.context = spec.context;\n\n    for (var i = 0; i < spec.repeatNodeCount; i++) {\n      nodeNames.push(\"\");\n    }\n\n    var nodeProps = [];\n\n    for (var _i5 = 0; _i5 < nodeNames.length; _i5++) {\n      nodeProps.push([]);\n    }\n\n    function setProp(nodeID, prop, value) {\n      nodeProps[nodeID].push([prop, prop.deserialize(String(value))]);\n    }\n\n    if (spec.nodeProps) {\n      var _iterator3 = _createForOfIteratorHelper(spec.nodeProps),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var propSpec = _step3.value;\n          var prop = propSpec[0];\n\n          for (var _i6 = 1; _i6 < propSpec.length;) {\n            var next = propSpec[_i6++];\n\n            if (next >= 0) {\n              setProp(next, prop, propSpec[_i6++]);\n            } else {\n              var value = propSpec[_i6 + -next];\n\n              for (var j = -next; j > 0; j--) {\n                setProp(propSpec[_i6++], prop, value);\n              }\n\n              _i6++;\n            }\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n\n    this.specialized = new Uint16Array(spec.specialized ? spec.specialized.length : 0);\n    this.specializers = [];\n    if (spec.specialized) for (var _i7 = 0; _i7 < spec.specialized.length; _i7++) {\n      this.specialized[_i7] = spec.specialized[_i7].term;\n      this.specializers[_i7] = spec.specialized[_i7].get;\n    }\n    this.states = decodeArray(spec.states, Uint32Array);\n    this.data = decodeArray(spec.stateData);\n    this.goto = decodeArray(spec.goto);\n    var topTerms = Object.keys(spec.topRules).map(function (r) {\n      return spec.topRules[r][1];\n    });\n    this.nodeSet = new NodeSet(nodeNames.map(function (name, i) {\n      return NodeType.define({\n        name: i >= _this2.minRepeatTerm ? undefined : name,\n        id: i,\n        props: nodeProps[i],\n        top: topTerms.indexOf(i) > -1,\n        error: i == 0,\n        skipped: spec.skippedNodes && spec.skippedNodes.indexOf(i) > -1\n      });\n    }));\n    this.maxTerm = spec.maxTerm;\n    this.tokenizers = spec.tokenizers.map(function (value) {\n      return typeof value == \"number\" ? new TokenGroup(tokenArray, value) : value;\n    });\n    this.topRules = spec.topRules;\n    this.nested = (spec.nested || []).map(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 4),\n          name = _ref2[0],\n          value = _ref2[1],\n          endToken = _ref2[2],\n          placeholder = _ref2[3];\n\n      return {\n        name: name,\n        value: value,\n        end: new TokenGroup(decodeArray(endToken), 0),\n        placeholder: placeholder\n      };\n    });\n    this.dialects = spec.dialects || {};\n    this.dynamicPrecedences = spec.dynamicPrecedences || null;\n    this.tokenPrecTable = spec.tokenPrec;\n    this.termNames = spec.termNames || null;\n    this.maxNode = this.nodeSet.types.length - 1;\n    this.dialect = this.parseDialect();\n    this.top = this.topRules[Object.keys(this.topRules)[0]];\n  } /// Parse a given string or stream.\n\n\n  _createClass(Parser, [{\n    key: \"parse\",\n    value: function parse(input) {\n      var startPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      if (typeof input == \"string\") input = stringInput(input);\n      var cx = new Parse(this, input, startPos, context);\n\n      for (;;) {\n        var done = cx.advance();\n        if (done) return done;\n      }\n    } /// Start an incremental parse.\n\n  }, {\n    key: \"startParse\",\n    value: function startParse(input) {\n      var startPos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      if (typeof input == \"string\") input = stringInput(input);\n      return new Parse(this, input, startPos, context);\n    } /// Get a goto table entry @internal\n\n  }, {\n    key: \"getGoto\",\n    value: function getGoto(state, term) {\n      var loose = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var table = this.goto;\n      if (term >= table[0]) return -1;\n\n      for (var pos = table[term + 1];;) {\n        var groupTag = table[pos++],\n            last = groupTag & 1;\n        var target = table[pos++];\n        if (last && loose) return target;\n\n        for (var end = pos + (groupTag >> 1); pos < end; pos++) {\n          if (table[pos] == state) return target;\n        }\n\n        if (last) return -1;\n      }\n    } /// Check if this state has an action for a given terminal @internal\n\n  }, {\n    key: \"hasAction\",\n    value: function hasAction(state, terminal) {\n      var data = this.data;\n\n      for (var set = 0; set < 2; set++) {\n        for (var i = this.stateSlot(state, set ? 2\n        /* Skip */\n        : 1\n        /* Actions */\n        ), next;; i += 3) {\n          if ((next = data[i]) == 65535\n          /* End */\n          ) {\n              if (data[i + 1] == 1\n              /* Next */\n              ) next = data[i = pair(data, i + 2)];else if (data[i + 1] == 2\n              /* Other */\n              ) return pair(data, i + 2);else break;\n            }\n\n          if (next == terminal || next == 0\n          /* Err */\n          ) return pair(data, i + 1);\n        }\n      }\n\n      return 0;\n    } /// @internal\n\n  }, {\n    key: \"stateSlot\",\n    value: function stateSlot(state, slot) {\n      return this.states[state * 6\n      /* Size */\n      + slot];\n    } /// @internal\n\n  }, {\n    key: \"stateFlag\",\n    value: function stateFlag(state, flag) {\n      return (this.stateSlot(state, 0\n      /* Flags */\n      ) & flag) > 0;\n    } /// @internal\n\n  }, {\n    key: \"findNested\",\n    value: function findNested(state) {\n      var flags = this.stateSlot(state, 0\n      /* Flags */\n      );\n      return flags & 4\n      /* StartNest */\n      ? this.nested[flags >> 10\n      /* NestShift */\n      ] : null;\n    } /// @internal\n\n  }, {\n    key: \"validAction\",\n    value: function validAction(state, action) {\n      if (action == this.stateSlot(state, 4\n      /* DefaultReduce */\n      )) return true;\n\n      for (var i = this.stateSlot(state, 1\n      /* Actions */\n      );; i += 3) {\n        if (this.data[i] == 65535\n        /* End */\n        ) {\n            if (this.data[i + 1] == 1\n            /* Next */\n            ) i = pair(this.data, i + 2);else return false;\n          }\n\n        if (action == pair(this.data, i + 1)) return true;\n      }\n    } /// Get the states that can follow this one through shift actions or\n    /// goto jumps. @internal\n\n  }, {\n    key: \"nextStates\",\n    value: function nextStates(state) {\n      var _this3 = this;\n\n      var result = [];\n\n      for (var i = this.stateSlot(state, 1\n      /* Actions */\n      );; i += 3) {\n        if (this.data[i] == 65535\n        /* End */\n        ) {\n            if (this.data[i + 1] == 1\n            /* Next */\n            ) i = pair(this.data, i + 2);else break;\n          }\n\n        if ((this.data[i + 2] & 65536\n        /* ReduceFlag */\n        >> 16) == 0) {\n          (function () {\n            var value = _this3.data[i + 1];\n            if (!result.some(function (v, i) {\n              return i & 1 && v == value;\n            })) result.push(_this3.data[i], value);\n          })();\n        }\n      }\n\n      return result;\n    } /// @internal\n\n  }, {\n    key: \"overrides\",\n    value: function overrides(token, prev) {\n      var iPrev = findOffset(this.data, this.tokenPrecTable, prev);\n      return iPrev < 0 || findOffset(this.data, this.tokenPrecTable, token) < iPrev;\n    } /// Configure the parser. Returns a new parser instance that has the\n    /// given settings modified. Settings not provided in `config` are\n    /// kept from the original parser.\n\n  }, {\n    key: \"configure\",\n    value: function configure(config) {\n      var _this$nodeSet;\n\n      // Hideous reflection-based kludge to make it easy to create a\n      // slightly modified copy of a parser.\n      var copy = Object.assign(Object.create(Parser.prototype), this);\n      if (config.props) copy.nodeSet = (_this$nodeSet = this.nodeSet).extend.apply(_this$nodeSet, _toConsumableArray(config.props));\n\n      if (config.top) {\n        var info = this.topRules[config.top];\n        if (!info) throw new RangeError(\"Invalid top rule name \".concat(config.top));\n        copy.top = info;\n      }\n\n      if (config.tokenizers) copy.tokenizers = this.tokenizers.map(function (t) {\n        var found = config.tokenizers.find(function (r) {\n          return r.from == t;\n        });\n        return found ? found.to : t;\n      });\n      if (config.dialect) copy.dialect = this.parseDialect(config.dialect);\n      if (config.nested) copy.nested = this.nested.map(function (obj) {\n        if (!Object.prototype.hasOwnProperty.call(config.nested, obj.name)) return obj;\n        return {\n          name: obj.name,\n          value: config.nested[obj.name],\n          end: obj.end,\n          placeholder: obj.placeholder\n        };\n      });\n      if (config.strict != null) copy.strict = config.strict;\n      if (config.bufferLength != null) copy.bufferLength = config.bufferLength;\n      return copy;\n    } /// Returns the name associated with a given term. This will only\n    /// work for all terms when the parser was generated with the\n    /// `--names` option. By default, only the names of tagged terms are\n    /// stored.\n\n  }, {\n    key: \"getName\",\n    value: function getName(term) {\n      return this.termNames ? this.termNames[term] : String(term <= this.maxNode && this.nodeSet.types[term].name || term);\n    } /// The eof term id is always allocated directly after the node\n    /// types. @internal\n\n  }, {\n    key: \"eofTerm\",\n    get: function get() {\n      return this.maxNode + 1;\n    } /// Tells you whether this grammar has any nested grammars.\n\n  }, {\n    key: \"hasNested\",\n    get: function get() {\n      return this.nested.length > 0;\n    } /// The type of top node produced by the parser.\n\n  }, {\n    key: \"topNode\",\n    get: function get() {\n      return this.nodeSet.types[this.top[1]];\n    } /// @internal\n\n  }, {\n    key: \"dynamicPrecedence\",\n    value: function dynamicPrecedence(term) {\n      var prec = this.dynamicPrecedences;\n      return prec == null ? 0 : prec[term] || 0;\n    } /// @internal\n\n  }, {\n    key: \"parseDialect\",\n    value: function parseDialect(dialect) {\n      if (this.cachedDialect && this.cachedDialect.source == dialect) return this.cachedDialect;\n      var values = Object.keys(this.dialects),\n          flags = values.map(function () {\n        return false;\n      });\n\n      if (dialect) {\n        var _iterator4 = _createForOfIteratorHelper(dialect.split(\" \")),\n            _step4;\n\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var part = _step4.value;\n\n            var _id = values.indexOf(part);\n\n            if (_id >= 0) flags[_id] = true;\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n      }\n\n      var disabled = null;\n\n      for (var i = 0; i < values.length; i++) {\n        if (!flags[i]) {\n          for (var j = this.dialects[values[i]], _id2; (_id2 = this.data[j++]) != 65535\n          /* End */\n          ;) {\n            (disabled || (disabled = new Uint8Array(this.maxTerm + 1)))[_id2] = 1;\n          }\n        }\n      }\n\n      return this.cachedDialect = new Dialect(dialect, flags, disabled);\n    } /// (used by the output of the parser generator) @internal\n\n  }], [{\n    key: \"deserialize\",\n    value: function deserialize(spec) {\n      return new Parser(spec);\n    }\n  }]);\n\n  return Parser;\n}();\n\nfunction pair(data, off) {\n  return data[off] | data[off + 1] << 16;\n}\n\nfunction findOffset(data, start, term) {\n  for (var i = start, next; (next = data[i]) != 65535\n  /* End */\n  ; i++) {\n    if (next == term) return i - start;\n  }\n\n  return -1;\n}\n\nfunction findFinished(stacks) {\n  var best = null;\n\n  var _iterator5 = _createForOfIteratorHelper(stacks),\n      _step5;\n\n  try {\n    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n      var stack = _step5.value;\n      if (stack.pos == stack.p.input.length && stack.p.parser.stateFlag(stack.state, 2\n      /* Accepting */\n      ) && (!best || best.score < stack.score)) best = stack;\n    }\n  } catch (err) {\n    _iterator5.e(err);\n  } finally {\n    _iterator5.f();\n  }\n\n  return best;\n}\n\nexport { ContextTracker, ExternalTokenizer, Parser, Stack, Token };","map":{"version":3,"sources":["../src/stack.ts","../src/token.ts","../src/decode.ts","../src/parse.ts"],"names":[],"mappings":"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","sourcesContent":["import {Action, Term, StateFlag, ParseState, Seq} from \"./constants\"\nimport {Parse, ContextTracker} from \"./parse\"\nimport {Tree, TreeBuffer, BufferCursor} from \"lezer-tree\"\n\n/// A parse stack. These are used internally by the parser to track\n/// parsing progress. They also provide some properties and methods\n/// that external code such as a tokenizer can use to get information\n/// about the parse state.\nexport class Stack {\n  /// @internal\n  constructor(\n    /// A the parse that this stack is part of @internal\n    readonly p: Parse,\n    /// Holds state, pos, value stack pos (15 bits array index, 15 bits\n    /// buffer index) triplets for all but the top state\n    /// @internal\n    readonly stack: number[],\n    /// The current parse state @internal\n    public state: number,\n    // The position at which the next reduce should take place. This\n    // can be less than `this.pos` when skipped expressions have been\n    // added to the stack (which should be moved outside of the next\n    // reduction)\n    /// @internal\n    public reducePos: number,\n    /// The input position up to which this stack has parsed.\n    public pos: number,\n    /// The dynamic score of the stack, including dynamic precedence\n    /// and error-recovery penalties\n    /// @internal\n    public score: number,\n    // The output buffer. Holds (type, start, end, size) quads\n    // representing nodes created by the parser, where `size` is\n    // amount of buffer array entries covered by this node.\n    /// @internal\n    readonly buffer: number[],\n    // The base offset of the buffer. When stacks are split, the split\n    // instance shared the buffer history with its parent up to\n    // `bufferBase`, which is the absolute offset (including the\n    // offset of previous splits) into the buffer at which this stack\n    // starts writing.\n    /// @internal\n    readonly bufferBase: number,\n    /// @internal\n    public curContext: StackContext | null,\n    // A parent stack from which this was split off, if any. This is\n    // set up so that it always points to a stack that has some\n    // additional buffer content, never to a stack with an equal\n    // `bufferBase`.\n    /// @internal\n    readonly parent: Stack | null\n  ) {}\n\n  /// @internal\n  toString() {\n    return `[${this.stack.filter((_, i) => i % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? \"!\" + this.score : \"\"}`\n  }\n\n  // Start an empty stack\n  /// @internal\n  static start(p: Parse, state: number, pos = 0) {\n    let cx = p.parser.context\n    return new Stack(p, [], state, pos, pos, 0, [], 0, cx ? new StackContext(cx, cx.start) : null, null)\n  }\n\n  /// The stack's current [context](#lezer.ContextTracker) value, if\n  /// any. Its type will depend on the context tracker's type\n  /// parameter, or it will be `null` if there is no context\n  /// tracker.\n  get context() { return this.curContext ? this.curContext.context : null }\n\n  // Push a state onto the stack, tracking its start position as well\n  // as the buffer base at that point.\n  /// @internal\n  pushState(state: number, start: number) {\n    this.stack.push(this.state, start, this.bufferBase + this.buffer.length)\n    this.state = state\n  }\n\n  // Apply a reduce action\n  /// @internal\n  reduce(action: number) {\n    let depth = action >> Action.ReduceDepthShift, type = action & Action.ValueMask\n    let {parser} = this.p\n\n    let dPrec = parser.dynamicPrecedence(type)\n    if (dPrec) this.score += dPrec\n\n    if (depth == 0) {\n      // Zero-depth reductions are a special caseâ€”they add stuff to\n      // the stack without popping anything off.\n      if (type < parser.minRepeatTerm) this.storeNode(type, this.reducePos, this.reducePos, 4, true)\n      this.pushState(parser.getGoto(this.state, type, true), this.reducePos)\n      this.reduceContext(type)\n      return\n    }\n\n    // Find the base index into `this.stack`, content after which will\n    // be dropped. Note that with `StayFlag` reductions we need to\n    // consume two extra frames (the dummy parent node for the skipped\n    // expression and the state that we'll be staying in, which should\n    // be moved to `this.state`).\n    let base = this.stack.length - ((depth - 1) * 3) - (action & Action.StayFlag ? 6 : 0)\n    let start = this.stack[base - 2]\n    let bufferBase = this.stack[base - 1], count = this.bufferBase + this.buffer.length - bufferBase\n    // Store normal terms or `R -> R R` repeat reductions\n    if (type < parser.minRepeatTerm || (action & Action.RepeatFlag)) {\n      let pos = parser.stateFlag(this.state, StateFlag.Skipped) ? this.pos : this.reducePos\n      this.storeNode(type, start, pos, count + 4, true)\n    }\n    if (action & Action.StayFlag) {\n      this.state = this.stack[base]\n    } else {\n      let baseStateID = this.stack[base - 3]\n      this.state = parser.getGoto(baseStateID, type, true)\n    }\n    while (this.stack.length > base) this.stack.pop()\n    this.reduceContext(type)\n  }\n\n  // Shift a value into the buffer\n  /// @internal\n  storeNode(term: number, start: number, end: number, size = 4, isReduce = false) {\n    if (term == Term.Err) { // Try to omit/merge adjacent error nodes\n      let cur: Stack | null = this, top = this.buffer.length\n      if (top == 0 && cur.parent) {\n        top = cur.bufferBase - cur.parent.bufferBase\n        cur = cur.parent\n      }\n      if (top > 0 && cur.buffer[top - 4] == Term.Err && cur.buffer[top - 1] > -1) {\n        if (start == end) return\n        if (cur.buffer[top - 2] >= start) { cur.buffer[top - 2] = end; return }\n      }\n    }\n\n    if (!isReduce || this.pos == end) { // Simple case, just append\n      this.buffer.push(term, start, end, size)\n    } else { // There may be skipped nodes that have to be moved forward\n      let index = this.buffer.length\n      if (index > 0 && this.buffer[index - 4] != Term.Err) while (index > 0 && this.buffer[index - 2] > end) {\n        // Move this record forward\n        this.buffer[index] = this.buffer[index - 4]\n        this.buffer[index + 1] = this.buffer[index - 3]\n        this.buffer[index + 2] = this.buffer[index - 2]\n        this.buffer[index + 3] = this.buffer[index - 1]\n        index -= 4\n        if (size > 4) size -= 4\n      }\n      this.buffer[index] = term\n      this.buffer[index + 1] = start\n      this.buffer[index + 2] = end\n      this.buffer[index + 3] = size\n    }\n  }\n\n  // Apply a shift action\n  /// @internal\n  shift(action: number, next: number, nextEnd: number) {\n    if (action & Action.GotoFlag) {\n      this.pushState(action & Action.ValueMask, this.pos)\n    } else if ((action & Action.StayFlag) == 0) { // Regular shift\n      let start = this.pos, nextState = action, {parser} = this.p\n      if (nextEnd > this.pos || next <= parser.maxNode) {\n        this.pos = nextEnd\n        if (!parser.stateFlag(nextState, StateFlag.Skipped)) this.reducePos = nextEnd\n      }\n      this.pushState(nextState, start)\n      if (next <= parser.maxNode) this.buffer.push(next, start, nextEnd, 4)\n      this.shiftContext(next)\n    } else { // Shift-and-stay, which means this is a skipped token\n      if (next <= this.p.parser.maxNode) this.buffer.push(next, this.pos, nextEnd, 4)\n      this.pos = nextEnd\n    }\n  }\n\n  // Apply an action\n  /// @internal\n  apply(action: number, next: number, nextEnd: number) {\n    if (action & Action.ReduceFlag) this.reduce(action)\n    else this.shift(action, next, nextEnd)\n  }\n\n  // Add a prebuilt node into the buffer. This may be a reused node or\n  // the result of running a nested parser.\n  /// @internal\n  useNode(value: Tree | TreeBuffer, next: number) {\n    let index = this.p.reused.length - 1\n    if (index < 0 || this.p.reused[index] != value) {\n      this.p.reused.push(value)\n      index++\n    }\n    let start = this.pos\n    this.reducePos = this.pos = start + value.length\n    this.pushState(next, start)\n    this.buffer.push(index, start, this.reducePos, -1 /* size < 0 means this is a reused value */)\n    if (this.curContext) this.updateContext(this.curContext.tracker.reuse(this.curContext.context, value, this.p.input, this))\n  }\n\n  // Split the stack. Due to the buffer sharing and the fact\n  // that `this.stack` tends to stay quite shallow, this isn't very\n  // expensive.\n  /// @internal\n  split() {\n    let parent: Stack | null = this\n    let off = parent.buffer.length\n    // Because the top of the buffer (after this.pos) may be mutated\n    // to reorder reductions and skipped tokens, and shared buffers\n    // should be immutable, this copies any outstanding skipped tokens\n    // to the new buffer, and puts the base pointer before them.\n    while (off > 0 && parent.buffer[off - 2] > parent.reducePos) off -= 4\n    let buffer = parent.buffer.slice(off), base = parent.bufferBase + off\n    // Make sure parent points to an actual parent with content, if there is such a parent.\n    while (parent && base == parent.bufferBase) parent = parent.parent\n    return new Stack(this.p, this.stack.slice(), this.state, this.reducePos, this.pos,\n                     this.score, buffer, base, this.curContext, parent)\n  }\n\n  // Try to recover from an error by 'deleting' (ignoring) one token.\n  /// @internal\n  recoverByDelete(next: number, nextEnd: number) {\n    let isNode = next <= this.p.parser.maxNode\n    if (isNode) this.storeNode(next, this.pos, nextEnd)\n    this.storeNode(Term.Err, this.pos, nextEnd, isNode ? 8 : 4)\n    this.pos = this.reducePos = nextEnd\n    this.score -= Recover.Token\n  }\n\n  /// Check if the given term would be able to be shifted (optionally\n  /// after some reductions) on this stack. This can be useful for\n  /// external tokenizers that want to make sure they only provide a\n  /// given token when it applies.\n  canShift(term: number) {\n    for (let sim = new SimulatedStack(this);;) {\n      let action = this.p.parser.stateSlot(sim.top, ParseState.DefaultReduce) || this.p.parser.hasAction(sim.top, term)\n      if ((action & Action.ReduceFlag) == 0) return true\n      if (action == 0) return false\n      sim.reduce(action)\n    }\n  }\n\n  /// Find the start position of the rule that is currently being parsed.\n  get ruleStart() {\n    for (let state = this.state, base = this.stack.length;;) {\n      let force = this.p.parser.stateSlot(state, ParseState.ForcedReduce)\n      if (!(force & Action.ReduceFlag)) return 0\n      base -= 3 * (force >> Action.ReduceDepthShift)\n      if ((force & Action.ValueMask) < this.p.parser.minRepeatTerm)\n        return this.stack[base + 1]\n      state = this.stack[base]\n    }\n  }\n\n  /// Find the start position of an instance of any of the given term\n  /// types, or return `null` when none of them are found.\n  ///\n  /// **Note:** this is only reliable when there is at least some\n  /// state that unambiguously matches the given rule on the stack.\n  /// I.e. if you have a grammar like this, where the difference\n  /// between `a` and `b` is only apparent at the third token:\n  ///\n  ///     a { b | c }\n  ///     b { \"x\" \"y\" \"x\" }\n  ///     c { \"x\" \"y\" \"z\" }\n  ///\n  /// Then a parse state after `\"x\"` will not reliably tell you that\n  /// `b` is on the stack. You _can_ pass `[b, c]` to reliably check\n  /// for either of those two rules (assuming that `a` isn't part of\n  /// some rule that includes other things starting with `\"x\"`).\n  ///\n  /// When `before` is given, this keeps scanning up the stack until\n  /// it finds a match that starts before that position.\n  ///\n  /// Note that you have to be careful when using this in tokenizers,\n  /// since it's relatively easy to introduce data dependencies that\n  /// break incremental parsing by using this method.\n  startOf(types: readonly number[], before?: number) {\n    let state = this.state, frame = this.stack.length, {parser} = this.p\n    for (;;) {\n      let force = parser.stateSlot(state, ParseState.ForcedReduce)\n      let depth = force >> Action.ReduceDepthShift, term = force & Action.ValueMask\n      if (types.indexOf(term) > -1) {\n        let base = frame - (3 * (force >> Action.ReduceDepthShift)), pos = this.stack[base + 1]\n        if (before == null || before > pos) return pos\n      }\n      if (frame == 0) return null\n      if (depth == 0) {\n        frame -= 3\n        state = this.stack[frame]\n      } else {\n        frame -= 3 * (depth - 1)\n        state = parser.getGoto(this.stack[frame - 3], term, true)\n      }\n    }\n  }\n\n  // Apply up to Recover.MaxNext recovery actions that conceptually\n  // inserts some missing token or rule.\n  /// @internal\n  recoverByInsert(next: number): Stack[] {\n    if (this.stack.length >= Recover.MaxInsertStackDepth) return []\n\n    let nextStates = this.p.parser.nextStates(this.state)\n    if (nextStates.length > Recover.MaxNext << 1 || this.stack.length >= Recover.DampenInsertStackDepth) {\n      let best = []\n      for (let i = 0, s; i < nextStates.length; i += 2) {\n        if ((s = nextStates[i + 1]) != this.state && this.p.parser.hasAction(s, next))\n          best.push(nextStates[i], s)\n      }\n      if (this.stack.length < Recover.DampenInsertStackDepth)\n        for (let i = 0; best.length < Recover.MaxNext << 1 && i < nextStates.length; i += 2) {\n          let s = nextStates[i + 1]\n          if (!best.some((v, i) => (i & 1) && v == s)) best.push(nextStates[i], s)\n        }\n      nextStates = best\n    }\n    let result: Stack[] = []\n    for (let i = 0; i < nextStates.length && result.length < Recover.MaxNext; i += 2) {\n      let s = nextStates[i + 1]\n      if (s == this.state) continue\n      let stack = this.split()\n      stack.storeNode(Term.Err, stack.pos, stack.pos, 4, true)\n      stack.pushState(s, this.pos)\n      stack.shiftContext(nextStates[i])\n      stack.score -= Recover.Token\n      result.push(stack)\n    }\n    return result\n  }\n\n  // Force a reduce, if possible. Return false if that can't\n  // be done.\n  /// @internal\n  forceReduce() {\n    let reduce = this.p.parser.stateSlot(this.state, ParseState.ForcedReduce)\n    if ((reduce & Action.ReduceFlag) == 0) return false\n    if (!this.p.parser.validAction(this.state, reduce)) {\n      this.storeNode(Term.Err, this.reducePos, this.reducePos, 4, true)\n      this.score -= Recover.Reduce\n    }\n    this.reduce(reduce)\n    return true\n  }\n\n  /// @internal\n  forceAll() {\n    while (!this.p.parser.stateFlag(this.state, StateFlag.Accepting) && this.forceReduce()) {}\n    return this\n  }\n\n  /// Check whether this state has no further actions (assumed to be a direct descendant of the\n  /// top state, since any other states must be able to continue\n  /// somehow). @internal\n  get deadEnd() {\n    if (this.stack.length != 3) return false\n    let {parser} = this.p\n    return parser.data[parser.stateSlot(this.state, ParseState.Actions)] == Seq.End &&\n      !parser.stateSlot(this.state, ParseState.DefaultReduce)\n  }\n\n  /// Restart the stack (put it back in its start state). Only safe\n  /// when this.stack.length == 3 (state is directly below the top\n  /// state). @internal\n  restart() {\n    this.state = this.stack[0]\n    this.stack.length = 0\n  }\n\n  /// @internal\n  sameState(other: Stack) {\n    if (this.state != other.state || this.stack.length != other.stack.length) return false\n    for (let i = 0; i < this.stack.length; i += 3)\n      if (this.stack[i] != other.stack[i]) return false\n    return true\n  }\n\n  /// Get the parser used by this stack.\n  get parser() { return this.p.parser }\n\n  /// Test whether a given dialect (by numeric ID, as exported from\n  /// the terms file) is enabled.\n  dialectEnabled(dialectID: number) { return this.p.parser.dialect.flags[dialectID] }\n\n  private shiftContext(term: number) {\n    if (this.curContext)\n      this.updateContext(this.curContext.tracker.shift(this.curContext.context, term, this.p.input, this))\n  }\n\n  private reduceContext(term: number) {\n    if (this.curContext)\n      this.updateContext(this.curContext.tracker.reduce(this.curContext.context, term, this.p.input, this))\n  }\n\n  /// @internal\n  emitContext() {\n    let cx = this.curContext!\n    if (!cx.tracker.strict) return\n    let last = this.buffer.length - 1\n    if (last < 0 || this.buffer[last] != -2)\n      this.buffer.push(cx.hash, this.reducePos, this.reducePos, -2)\n  }\n\n  private updateContext(context: any) {\n    if (context != this.curContext!.context) {\n      let newCx = new StackContext(this.curContext!.tracker, context)\n      if (newCx.hash != this.curContext!.hash) this.emitContext()\n      this.curContext = newCx\n    }\n  }\n}\n\nclass StackContext {\n  readonly hash: number\n  constructor(readonly tracker: ContextTracker<any>, readonly context: any) {\n    this.hash = tracker.hash(context)\n  }\n}\n\nexport const enum Recover {\n  Token = 200,\n  Reduce = 100,\n  MaxNext = 4,\n  MaxInsertStackDepth = 300,\n  DampenInsertStackDepth = 120\n}\n\n// Used to cheaply run some reductions to scan ahead without mutating\n// an entire stack\nclass SimulatedStack {\n  top: number\n  rest: number[]\n  offset: number\n\n  constructor(readonly stack: Stack) {\n    this.top = stack.state\n    this.rest = stack.stack\n    this.offset = this.rest.length\n  }\n\n  reduce(action: number) {\n    let term = action & Action.ValueMask, depth = action >> Action.ReduceDepthShift\n    if (depth == 0) {\n      if (this.rest == this.stack.stack) this.rest = this.rest.slice()\n      this.rest.push(this.top, 0, 0)\n      this.offset += 3\n    } else {\n      this.offset -= (depth - 1) * 3\n    }\n    let goto = this.stack.p.parser.getGoto(this.rest[this.offset - 3], term, true)\n    this.top = goto\n  }\n}\n\n// This is given to `Tree.build` to build a buffer, and encapsulates\n// the parent-stack-walking necessary to read the nodes.\nexport class StackBufferCursor implements BufferCursor {\n  buffer: number[]\n\n  constructor(public stack: Stack, public pos: number, public index: number) {\n    this.buffer = stack.buffer\n    if (this.index == 0) this.maybeNext()\n  }\n\n  static create(stack: Stack) {\n    return new StackBufferCursor(stack, stack.bufferBase + stack.buffer.length, stack.buffer.length)\n  }\n\n  maybeNext() {\n    let next = this.stack.parent\n    if (next != null) {\n      this.index = this.stack.bufferBase - next.bufferBase\n      this.stack = next\n      this.buffer = next.buffer\n    }\n  }\n\n  get id() { return this.buffer[this.index - 4] }\n  get start() { return this.buffer[this.index - 3] }\n  get end() { return this.buffer[this.index - 2] }\n  get size() { return this.buffer[this.index - 1] }\n\n  next() {\n    this.index -= 4\n    this.pos -= 4\n    if (this.index == 0) this.maybeNext()\n  }\n\n  fork() {\n    return new StackBufferCursor(this.stack, this.pos, this.index)\n  }\n}\n","import {Input} from \"lezer-tree\"\nimport {Stack} from \"./stack\"\n\n/// Tokenizers write the tokens they read into instances of this class.\nexport class Token {\n  /// The start of the token. This is set by the parser, and should not\n  /// be mutated by the tokenizer.\n  start = -1\n  /// This starts at -1, and should be updated to a term id when a\n  /// matching token is found.\n  value = -1\n  /// When setting `.value`, you should also set `.end` to the end\n  /// position of the token. (You'll usually want to use the `accept`\n  /// method.)\n  end = -1\n\n  /// Accept a token, setting `value` and `end` to the given values.\n  accept(value: number, end: number) {\n    this.value = value\n    this.end = end\n  }\n}\n\nexport interface Tokenizer {\n  token(input: Input, token: Token, stack: Stack): void\n  contextual: boolean\n  fallback: boolean\n  extend: boolean\n}\n\n/// @internal\nexport class TokenGroup implements Tokenizer {\n  contextual!: boolean\n  fallback!: boolean\n  extend!: boolean\n\n  constructor(readonly data: Readonly<Uint16Array>, readonly id: number) {}\n\n  token(input: Input, token: Token, stack: Stack) { readToken(this.data, input, token, stack, this.id) }\n}\n\nTokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false\n\ninterface ExternalOptions {\n  /// When set to true, mark this tokenizer as depending on the\n  /// current parse stack, which prevents its result from being cached\n  /// between parser actions at the same positions.\n  contextual?: boolean,\n  /// By defaults, when a tokenizer returns a token, that prevents\n  /// tokenizers with lower precedence from even running. When\n  /// `fallback` is true, the tokenizer is allowed to run when a\n  /// previous tokenizer returned a token that didn't match any of the\n  /// current state's actions.\n  fallback?: boolean\n  /// When set to true, tokenizing will not stop after this tokenizer\n  /// has produced a token. (But it will still fail to reach this one\n  /// if a higher-precedence tokenizer produced a token.)\n  extend?: boolean\n}\n\n/// Exports that are used for `@external tokens` in the grammar should\n/// export an instance of this class.\nexport class ExternalTokenizer {\n  /// @internal\n  contextual: boolean\n  /// @internal\n  fallback: boolean\n  /// @internal\n  extend: boolean\n\n  /// Create a tokenizer. The first argument is the function that,\n  /// given an input stream and a token object,\n  /// [fills](#lezer.Token.accept) the token object if it recognizes a\n  /// token. `token.start` should be used as the start position to\n  /// scan from.\n  constructor(\n    /// @internal\n    readonly token: (input: Input, token: Token, stack: Stack) => void,\n    options: ExternalOptions = {}\n  ) {\n    this.contextual = !!options.contextual\n    this.fallback = !!options.fallback\n    this.extend = !!options.extend\n  }\n}\n\n// Tokenizer data is stored a big uint16 array containing, for each\n// state:\n//\n//  - A group bitmask, indicating what token groups are reachable from\n//    this state, so that paths that can only lead to tokens not in\n//    any of the current groups can be cut off early.\n//\n//  - The position of the end of the state's sequence of accepting\n//    tokens\n//\n//  - The number of outgoing edges for the state\n//\n//  - The accepting tokens, as (token id, group mask) pairs\n//\n//  - The outgoing edges, as (start character, end character, state\n//    index) triples, with end character being exclusive\n//\n// This function interprets that data, running through a stream as\n// long as new states with the a matching group mask can be reached,\n// and updating `token` when it matches a token.\nfunction readToken(data: Readonly<Uint16Array>,\n                   input: Input,\n                   token: Token,\n                   stack: Stack,\n                   group: number) {\n  let state = 0, groupMask = 1 << group, dialect = stack.p.parser.dialect\n  scan: for (let pos = token.start;;) {\n    if ((groupMask & data[state]) == 0) break\n    let accEnd = data[state + 1]\n    // Check whether this state can lead to a token in the current group\n    // Accept tokens in this state, possibly overwriting\n    // lower-precedence / shorter tokens\n    for (let i = state + 3; i < accEnd; i += 2) if ((data[i + 1] & groupMask) > 0) {\n      let term = data[i]\n      if (dialect.allows(term) &&\n          (token.value == -1 || token.value == term || stack.p.parser.overrides(term, token.value))) {\n        token.accept(term, pos)\n        break\n      }\n    }\n    let next = input.get(pos++)\n    // Do a binary search on the state's edges\n    for (let low = 0, high = data[state + 2]; low < high;) {\n      let mid = (low + high) >> 1\n      let index = accEnd + mid + (mid << 1)\n      let from = data[index], to = data[index + 1]\n      if (next < from) high = mid\n      else if (next >= to) low = mid + 1\n      else { state = data[index + 2]; continue scan }\n    }\n    break\n  }\n}\n","// See lezer-generator/src/encode.ts for comments about the encoding\n// used here\n\nimport {Encode} from \"./constants\"\n\nexport function decodeArray<T extends {[i: number]: number} = Uint16Array>(\n  input: string | T,\n  Type: {new (n: number): T} = Uint16Array as any\n): T {\n  if (typeof input != \"string\") return input\n  let array: T | null = null\n  for (let pos = 0, out = 0; pos < input.length;) {\n    let value = 0\n    for (;;) {\n      let next = input.charCodeAt(pos++), stop = false\n      if (next == Encode.BigValCode) { value = Encode.BigVal; break }\n      if (next >= Encode.Gap2) next--\n      if (next >= Encode.Gap1) next--\n      let digit = next - Encode.Start\n      if (digit >= Encode.Base) { digit -= Encode.Base; stop = true }\n      value += digit\n      if (stop) break\n      value *= Encode.Base\n    }\n    if (array) array[out++] = value\n    else array = new Type(value)\n  }\n  return array!\n}\n","import {DefaultBufferLength, Tree, TreeBuffer, TreeFragment, NodeSet, NodeType, NodeProp, NodePropSource,\n        Input, stringInput, PartialParse, ParseContext} from \"lezer-tree\"\nimport {Stack, StackBufferCursor} from \"./stack\"\nimport {Action, Specialize, Term, Seq, StateFlag, ParseState, File} from \"./constants\"\nimport {Token, Tokenizer, TokenGroup, ExternalTokenizer} from \"./token\"\nimport {decodeArray} from \"./decode\"\n\n// FIXME find some way to reduce recovery work done when the input\n// doesn't match the grammar at all.\n\n// Environment variable used to control console output\nconst verbose = typeof process != \"undefined\" && /\\bparse\\b/.test(process.env.LOG!)\n\nlet stackIDs: WeakMap<Stack, string> | null = null\n\n/// Used to configure a [nested parse](#lezer.Parser.withNested).\nexport type NestedParserSpec = {\n  /// The inner parser. Will be passed the input,\n  /// [clipped](#lezer.Input.clip) to the size of the parseable\n  /// region, the start position of the inner region as `startPos`,\n  /// and an optional array of tree fragments from a previous parse\n  /// that can be reused.\n  ///\n  /// When this property isn't given, the inner region is simply\n  /// skipped over intead of parsed.\n  startParse?: (input: Input, startPos: number, context: ParseContext) => PartialParse\n  /// When given, an additional node will be wrapped around the\n  /// part of the tree produced by this inner parse.\n  wrapType?: NodeType | number\n  /// When given, this will be called with the token that ends the\n  /// inner region. It can return `false` to cause a given end token\n  /// to be ignored.\n  filterEnd?(endToken: string): boolean\n}\n\n/// This type is used to specify a nested parser. It may directly be a\n/// nested parse [spec](#lezer.NestedParseSpec), or a function that,\n/// given an input document and a stack, returns such a spec or `null`\n/// to indicate that the nested parse should not happen (and the\n/// grammar's fallback expression should be used).\nexport type NestedParser = NestedParserSpec | ((input: Input, stack: Stack) => NestedParserSpec | null)\n\nfunction cutAt(tree: Tree, pos: number, side: 1 | -1) {\n  let cursor = tree.cursor(pos)\n  for (;;) {\n    if (!(side < 0 ? cursor.childBefore(pos) : cursor.childAfter(pos))) for (;;) {\n      if ((side < 0 ? cursor.to <= pos : cursor.from >= pos) && !cursor.type.isError)\n        return side < 0 ? Math.max(0, Math.min(cursor.to - 1, pos - 5)) : Math.min(tree.length, Math.max(cursor.from + 1, pos + 5))\n      if (side < 0 ? cursor.prevSibling() : cursor.nextSibling()) break\n      if (!cursor.parent()) return side < 0 ? 0 : tree.length\n    }\n  }\n}\n\nclass FragmentCursor {\n  i = 0\n  fragment: TreeFragment | null = null\n  safeFrom = -1\n  safeTo = -1\n  trees: Tree[] = []\n  start: number[] = []\n  index: number[] = []\n  nextStart!: number\n\n  constructor(readonly fragments: readonly TreeFragment[]) {\n    this.nextFragment()\n  }\n\n  nextFragment() {\n    let fr = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++]\n    if (fr) {\n      this.safeFrom = fr.openStart ? cutAt(fr.tree, fr.from + fr.offset, 1) - fr.offset : fr.from\n      this.safeTo = fr.openEnd ? cutAt(fr.tree, fr.to + fr.offset, -1) - fr.offset : fr.to\n      while (this.trees.length) { this.trees.pop(); this.start.pop(); this.index.pop() }\n      this.trees.push(fr.tree)\n      this.start.push(-fr.offset)\n      this.index.push(0)\n      this.nextStart = this.safeFrom\n    } else {\n      this.nextStart = 1e9\n    }\n  }\n\n  // `pos` must be >= any previously given `pos` for this cursor\n  nodeAt(pos: number): Tree | TreeBuffer | null {\n    if (pos < this.nextStart) return null\n    while (this.fragment && this.safeTo <= pos) this.nextFragment()\n    if (!this.fragment) return null\n\n    for (;;) {\n      let last = this.trees.length - 1\n      if (last < 0) { // End of tree\n        this.nextFragment()\n        return null\n      }\n      let top = this.trees[last], index = this.index[last]\n      if (index == top.children.length) {\n        this.trees.pop()\n        this.start.pop()\n        this.index.pop()\n        continue\n      }\n      let next = top.children[index]\n      let start = this.start[last] + top.positions[index]\n      if (start > pos) {\n        this.nextStart = start\n        return null\n      } else if (start == pos && start + next.length <= this.safeTo) {\n        return start == pos && start >= this.safeFrom ? next : null\n      }\n      if (next instanceof TreeBuffer) {\n        this.index[last]++\n        this.nextStart = start + next.length\n      } else {\n        this.index[last]++\n        if (start + next.length >= pos) { // Enter this node\n          this.trees.push(next)\n          this.start.push(start)\n          this.index.push(0)\n        }\n      }\n    }\n  }\n}\n\nclass CachedToken extends Token {\n  extended = -1\n  mask = 0\n  context = 0\n\n  clear(start: number) {\n    this.start = start\n    this.value = this.extended = -1\n  }\n}\n\nconst dummyToken = new Token\n\nclass TokenCache {\n  tokens: CachedToken[] = []\n  mainToken: Token = dummyToken\n\n  actions: number[] = []\n\n  constructor(parser: Parser) {\n    this.tokens = parser.tokenizers.map(_ => new CachedToken)\n  }\n\n  getActions(stack: Stack, input: Input) {\n    let actionIndex = 0\n    let main: Token | null = null\n    let {parser} = stack.p, {tokenizers} = parser\n\n    let mask = parser.stateSlot(stack.state, ParseState.TokenizerMask)\n    let context = stack.curContext ? stack.curContext.hash : 0\n    for (let i = 0; i < tokenizers.length; i++) {\n      if (((1 << i) & mask) == 0) continue\n      let tokenizer = tokenizers[i], token = this.tokens[i]\n      if (main && !tokenizer.fallback) continue\n      if (tokenizer.contextual || token.start != stack.pos || token.mask != mask || token.context != context) {\n        this.updateCachedToken(token, tokenizer, stack, input)\n        token.mask = mask\n        token.context = context\n      }\n\n      if (token.value != Term.Err) {\n        let startIndex = actionIndex\n        if (token.extended > -1) actionIndex = this.addActions(stack, token.extended, token.end, actionIndex)\n        actionIndex = this.addActions(stack, token.value, token.end, actionIndex)\n        if (!tokenizer.extend) {\n          main = token\n          if (actionIndex > startIndex) break\n        }\n      }\n    }\n\n    while (this.actions.length > actionIndex) this.actions.pop()\n    if (!main) {\n      main = dummyToken\n      main.start = stack.pos\n      if (stack.pos == input.length) main.accept(stack.p.parser.eofTerm, stack.pos)\n      else main.accept(Term.Err, stack.pos + 1)\n    }\n    this.mainToken = main\n    return this.actions\n  }\n\n  updateCachedToken(token: CachedToken, tokenizer: Tokenizer, stack: Stack, input: Input) {\n    token.clear(stack.pos)\n    tokenizer.token(input, token, stack)\n    if (token.value > -1) {\n      let {parser} = stack.p\n\n      for (let i = 0; i < parser.specialized.length; i++) if (parser.specialized[i] == token.value) {\n        let result = parser.specializers[i](input.read(token.start, token.end), stack)\n        if (result >= 0 && stack.p.parser.dialect.allows(result >> 1)) {\n          if ((result & 1) == Specialize.Specialize) token.value = result >> 1\n          else token.extended = result >> 1\n          break\n        }\n      }\n    } else if (stack.pos == input.length) {\n      token.accept(stack.p.parser.eofTerm, stack.pos)\n    } else {\n      token.accept(Term.Err, stack.pos + 1)\n    }\n  }\n\n  putAction(action: number, token: number, end: number, index: number) {\n    // Don't add duplicate actions\n    for (let i = 0; i < index; i += 3) if (this.actions[i] == action) return index\n    this.actions[index++] = action\n    this.actions[index++] = token\n    this.actions[index++] = end\n    return index\n  }\n\n  addActions(stack: Stack, token: number, end: number, index: number) {\n    let {state} = stack, {parser} = stack.p, {data} = parser\n    for (let set = 0; set < 2; set++) {\n      for (let i = parser.stateSlot(state, set ? ParseState.Skip : ParseState.Actions);; i += 3) {\n        if (data[i] == Seq.End) {\n          if (data[i + 1] == Seq.Next) {\n            i = pair(data, i + 2)\n          } else {\n            if (index == 0 && data[i + 1] == Seq.Other)\n              index = this.putAction(pair(data, i + 1), token, end, index)\n            break\n          }\n        }\n        if (data[i] == token) index = this.putAction(pair(data, i + 1), token, end, index)\n      }\n    }\n    return index\n  }\n}\n\nconst enum Rec {\n  Distance = 5,\n  MaxRemainingPerStep = 3,\n  MinBufferLengthPrune = 200,\n  ForceReduceLimit = 10\n}\n\n/// A parse context can be used for step-by-step parsing. After\n/// creating it, you repeatedly call `.advance()` until it returns a\n/// tree to indicate it has reached the end of the parse.\nexport class Parse implements PartialParse {\n  // Active parse stacks.\n  stacks: Stack[]\n  // The position to which the parse has advanced.\n  pos = 0\n  recovering = 0\n  fragments: FragmentCursor | null\n  nextStackID = 0x2654\n  nested: PartialParse | null = null\n  nestEnd = 0\n  nestWrap: NodeType | null = null\n\n  reused: (Tree | TreeBuffer)[] = []\n  tokens: TokenCache\n  topTerm: number\n\n  constructor(\n    public parser: Parser,\n    public input: Input,\n    public startPos: number,\n    public context: ParseContext\n  ) {\n    this.tokens = new TokenCache(parser)\n    this.topTerm = parser.top[1]\n    this.stacks = [Stack.start(this, parser.top[0], this.startPos)]\n    let fragments = context?.fragments\n    this.fragments = fragments && fragments.length ? new FragmentCursor(fragments) : null\n  }\n\n  // Move the parser forward. This will process all parse stacks at\n  // `this.pos` and try to advance them to a further position. If no\n  // stack for such a position is found, it'll start error-recovery.\n  //\n  // When the parse is finished, this will return a syntax tree. When\n  // not, it returns `null`.\n  advance() {\n    if (this.nested) {\n      let result = this.nested.advance()\n      this.pos = this.nested.pos\n      if (result) {\n        this.finishNested(this.stacks[0], result)\n        this.nested = null\n      }\n      return null\n    }\n\n    let stacks = this.stacks, pos = this.pos\n    // This will hold stacks beyond `pos`.\n    let newStacks: Stack[] = this.stacks = []\n    let stopped: Stack[] | undefined, stoppedTokens: number[] | undefined\n    let maybeNest\n\n    // Keep advancing any stacks at `pos` until they either move\n    // forward or can't be advanced. Gather stacks that can't be\n    // advanced further in `stopped`.\n    for (let i = 0; i < stacks.length; i++) {\n      let stack = stacks[i], nest\n      for (;;) {\n        if (stack.pos > pos) {\n          newStacks.push(stack)\n        } else if (nest = this.checkNest(stack)) {\n          if (!maybeNest || maybeNest.stack.score < stack.score) maybeNest = nest\n        } else if (this.advanceStack(stack, newStacks, stacks)) {\n          continue\n        } else {\n          if (!stopped) { stopped = []; stoppedTokens = [] }\n          stopped.push(stack)\n          let tok = this.tokens.mainToken\n          stoppedTokens!.push(tok.value, tok.end)\n        }\n        break\n      }\n    }\n\n    if (maybeNest) {\n      this.startNested(maybeNest)\n      return null\n    }\n\n    if (!newStacks.length) {\n      let finished = stopped && findFinished(stopped)\n      if (finished) return this.stackToTree(finished)\n\n      if (this.parser.strict) {\n        if (verbose && stopped)\n          console.log(\"Stuck with token \" + this.parser.getName(this.tokens.mainToken.value))\n        throw new SyntaxError(\"No parse at \" + pos)\n      }\n      if (!this.recovering) this.recovering = Rec.Distance\n    }\n\n    if (this.recovering && stopped) {\n      let finished = this.runRecovery(stopped, stoppedTokens!, newStacks)\n      if (finished) return this.stackToTree(finished.forceAll())\n    }\n\n    if (this.recovering) {\n      let maxRemaining = this.recovering == 1 ? 1 : this.recovering * Rec.MaxRemainingPerStep\n      if (newStacks.length > maxRemaining) {\n        newStacks.sort((a, b) => b.score - a.score)\n        while (newStacks.length > maxRemaining) newStacks.pop()\n      }\n      if (newStacks.some(s => s.reducePos > pos)) this.recovering--\n    } else if (newStacks.length > 1) {\n      // Prune stacks that are in the same state, or that have been\n      // running without splitting for a while, to avoid getting stuck\n      // with multiple successful stacks running endlessly on.\n      outer: for (let i = 0; i < newStacks.length - 1; i++) {\n        let stack = newStacks[i]\n        for (let j = i + 1; j < newStacks.length; j++) {\n          let other = newStacks[j]\n          if (stack.sameState(other) ||\n              stack.buffer.length > Rec.MinBufferLengthPrune && other.buffer.length > Rec.MinBufferLengthPrune) {\n            if (((stack.score - other.score) || (stack.buffer.length - other.buffer.length)) > 0) {\n              newStacks.splice(j--, 1)\n            } else {\n              newStacks.splice(i--, 1)\n              continue outer\n            }\n          }\n        }\n      }\n    }\n\n    this.pos = newStacks[0].pos\n    for (let i = 1; i < newStacks.length; i++) if (newStacks[i].pos < this.pos) this.pos = newStacks[i].pos\n    return null\n  }\n\n  // Returns an updated version of the given stack, or null if the\n  // stack can't advance normally. When `split` and `stacks` are\n  // given, stacks split off by ambiguous operations will be pushed to\n  // `split`, or added to `stacks` if they move `pos` forward.\n  private advanceStack(stack: Stack, stacks: null | Stack[], split: null | Stack[]) {\n    let start = stack.pos, {input, parser} = this\n    let base = verbose ? this.stackID(stack) + \" -> \" : \"\"\n\n    if (this.fragments) {\n      let strictCx = stack.curContext && stack.curContext.tracker.strict, cxHash = strictCx ? stack.curContext!.hash : 0\n      for (let cached = this.fragments.nodeAt(start); cached;) {\n        let match = this.parser.nodeSet.types[cached.type.id] == cached.type ? parser.getGoto(stack.state, cached.type.id) : -1\n        if (match > -1 && cached.length && (!strictCx || ((cached as any).contextHash || 0) == cxHash)) {\n          stack.useNode(cached, match)\n          if (verbose) console.log(base + this.stackID(stack) + ` (via reuse of ${parser.getName(cached.type.id)})`)\n          return true\n        }\n        if (!(cached instanceof Tree) || cached.children.length == 0 || cached.positions[0] > 0) break\n        let inner = cached.children[0]\n        if (inner instanceof Tree) cached = inner\n        else break\n      }\n    }\n\n    let defaultReduce = parser.stateSlot(stack.state, ParseState.DefaultReduce)\n    if (defaultReduce > 0) {\n      stack.reduce(defaultReduce)\n      if (verbose)\n        console.log(base + this.stackID(stack) + ` (via always-reduce ${parser.getName(defaultReduce & Action.ValueMask)})`)\n      return true\n    }\n\n    let actions = this.tokens.getActions(stack, input)\n    for (let i = 0; i < actions.length;) {\n      let action = actions[i++], term = actions[i++], end = actions[i++]\n      let last = i == actions.length || !split\n      let localStack = last ? stack : stack.split()\n      localStack.apply(action, term, end)\n      if (verbose)\n        console.log(base + this.stackID(localStack) + ` (via ${(action & Action.ReduceFlag) == 0 ? \"shift\"\n                     : `reduce of ${parser.getName(action & Action.ValueMask)}`} for ${\n        parser.getName(term)} @ ${start}${localStack == stack ? \"\" : \", split\"})`)\n      if (last) return true\n      else if (localStack.pos > start) stacks!.push(localStack)\n      else split!.push(localStack)\n    }\n\n    return false\n  }\n\n  // Advance a given stack forward as far as it will go. Returns the\n  // (possibly updated) stack if it got stuck, or null if it moved\n  // forward and was given to `pushStackDedup`.\n  private advanceFully(stack: Stack, newStacks: Stack[]) {\n    let pos = stack.pos\n    for (;;) {\n      let nest = this.checkNest(stack)\n      if (nest) return nest\n      if (!this.advanceStack(stack, null, null)) return false\n      if (stack.pos > pos) {\n        pushStackDedup(stack, newStacks)\n        return true\n      }\n    }\n  }\n\n  private runRecovery(stacks: Stack[], tokens: number[], newStacks: Stack[]) {\n    let finished: Stack | null = null, restarted = false\n    let maybeNest\n    for (let i = 0; i < stacks.length; i++) {\n      let stack = stacks[i], token = tokens[i << 1], tokenEnd = tokens[(i << 1) + 1]\n      let base = verbose ? this.stackID(stack) + \" -> \" : \"\"\n\n      if (stack.deadEnd) {\n        if (restarted) continue\n        restarted = true\n        stack.restart()\n        if (verbose) console.log(base + this.stackID(stack) + \" (restarted)\")\n        let done = this.advanceFully(stack, newStacks)\n        if (done) {\n          if (done !== true) maybeNest = done\n          continue\n        }\n      }\n\n      let force = stack.split(), forceBase = base\n      for (let j = 0; force.forceReduce() && j < Rec.ForceReduceLimit; j++) {\n        if (verbose) console.log(forceBase + this.stackID(force) + \" (via force-reduce)\")\n        let done = this.advanceFully(force, newStacks)\n        if (done) {\n          if (done !== true) maybeNest = done\n          break\n        }\n        if (verbose) forceBase = this.stackID(force) + \" -> \"\n      }\n\n      for (let insert of stack.recoverByInsert(token)) {\n        if (verbose) console.log(base + this.stackID(insert) + \" (via recover-insert)\")\n        this.advanceFully(insert, newStacks)\n      }\n\n      if (this.input.length > stack.pos) {\n        if (tokenEnd == stack.pos) {\n          tokenEnd++\n          token = Term.Err\n        }\n        stack.recoverByDelete(token, tokenEnd)\n        if (verbose) console.log(base + this.stackID(stack) + ` (via recover-delete ${this.parser.getName(token)})`)\n        pushStackDedup(stack, newStacks)\n      } else if (!finished || finished.score < stack.score) {\n        finished = stack\n      }\n    }\n\n    if (finished) return finished\n\n    if (maybeNest) for (let s of this.stacks) if (s.score > maybeNest.stack.score) {\n      maybeNest = undefined\n      break\n    }\n    if (maybeNest) this.startNested(maybeNest)\n    return null\n  }\n\n  forceFinish() {\n    let stack = this.stacks[0].split()\n    if (this.nested) this.finishNested(stack, this.nested.forceFinish())\n    return this.stackToTree(stack.forceAll())\n  }\n\n  // Convert the stack's buffer to a syntax tree.\n  stackToTree(stack: Stack, pos: number = stack.pos): Tree {\n    if (this.parser.context) stack.emitContext()\n    return Tree.build({buffer: StackBufferCursor.create(stack),\n                       nodeSet: this.parser.nodeSet,\n                       topID: this.topTerm,\n                       maxBufferLength: this.parser.bufferLength,\n                       reused: this.reused,\n                       start: this.startPos,\n                       length: pos - this.startPos,\n                       minRepeatType: this.parser.minRepeatTerm})\n  }\n\n  private checkNest(stack: Stack) {\n    let info = this.parser.findNested(stack.state)\n    if (!info) return null\n    let spec: NestedParser | null = info.value\n    if (typeof spec == \"function\") spec = spec(this.input, stack)\n    return spec ? {stack, info, spec} : null\n  }\n\n  private startNested(nest: {stack: Stack, info: NestInfo, spec: NestedParserSpec}) {\n    let {stack, info, spec} = nest\n    this.stacks = [stack]\n    this.nestEnd = this.scanForNestEnd(stack, info.end, spec.filterEnd)\n    this.nestWrap = typeof spec.wrapType == \"number\" ? this.parser.nodeSet.types[spec.wrapType] : spec.wrapType || null\n    if (spec.startParse) {\n      this.nested = spec.startParse(this.input.clip(this.nestEnd), stack.pos, this.context)\n    } else {\n      this.finishNested(stack)\n    }\n  }\n\n  private scanForNestEnd(stack: Stack, endToken: TokenGroup, filter?: (token: string) => boolean) {\n    for (let pos = stack.pos; pos < this.input.length; pos++) {\n      dummyToken.start = pos\n      dummyToken.value = -1\n      endToken.token(this.input, dummyToken, stack)\n      if (dummyToken.value > -1 && (!filter || filter(this.input.read(pos, dummyToken.end)))) return pos\n    }\n    return this.input.length\n  }\n\n  private finishNested(stack: Stack, tree?: Tree) {\n    if (this.nestWrap) tree = new Tree(this.nestWrap, tree ? [tree] : [], tree ? [0] : [], this.nestEnd - stack.pos)\n    else if (!tree) tree = new Tree(NodeType.none, [], [], this.nestEnd - stack.pos)\n    let info = this.parser.findNested(stack.state)!\n    stack.useNode(tree, this.parser.getGoto(stack.state, info.placeholder, true))\n    if (verbose) console.log(this.stackID(stack) + ` (via unnest)`)\n  }\n\n  private stackID(stack: Stack) {\n    let id = (stackIDs || (stackIDs = new WeakMap)).get(stack)\n    if (!id) stackIDs.set(stack, id = String.fromCodePoint(this.nextStackID++))\n    return id + stack\n  }\n}\n\nfunction pushStackDedup(stack: Stack, newStacks: Stack[]) {\n  for (let i = 0; i < newStacks.length; i++) {\n    let other = newStacks[i]\n    if (other.pos == stack.pos && other.sameState(stack)) {\n      if (newStacks[i].score < stack.score) newStacks[i] = stack\n      return\n    }\n  }\n  newStacks.push(stack)\n}\n\nexport class Dialect {\n  constructor(readonly source: string | undefined,\n              readonly flags: readonly boolean[],\n              readonly disabled: null | Uint8Array) {}\n\n  allows(term: number) { return !this.disabled || this.disabled[term] == 0 }\n}\n\nconst id: <T>(x: T) => T = x => x\n\n/// Context trackers are used to track stateful context (such as\n/// indentation in the Python grammar, or parent elements in the XML\n/// grammar) needed by external tokenizers. You declare them in a\n/// grammar file as `@context exportName from \"module\"`.\n///\n/// Context values should be immutable, and can be updated (replaced)\n/// on shift or reduce actions.\nexport class ContextTracker<T> {\n  /// @internal\n  start: T\n  /// @internal\n  shift: (context: T, term: number, input: Input, stack: Stack) => T\n  /// @internal\n  reduce: (context: T, term: number, input: Input, stack: Stack) => T\n  /// @internal\n  reuse: (context: T, node: Tree | TreeBuffer, input: Input, stack: Stack) => T\n  /// @internal\n  hash: (context: T) => number\n  /// @internal\n  strict: boolean\n\n  /// The export used in a `@context` declaration should be of this\n  /// type.\n  constructor(spec: {\n    /// The initial value of the context.\n    start: T,\n    /// Update the context when the parser executes a\n    /// [shift](https://en.wikipedia.org/wiki/LR_parser#Shift_and_reduce_actions)\n    /// action.\n    shift?(context: T, term: number, input: Input, stack: Stack): T\n    /// Update the context when the parser executes a reduce action.\n    reduce?(context: T, term: number, input: Input, stack: Stack): T\n    /// Update the context when the parser reuses a node from a tree\n    /// fragment.\n    reuse?(context: T, node: Tree | TreeBuffer, input: Input, stack: Stack): T\n    /// Reduce a context value to a number (for cheap storage and\n    /// comparison).\n    hash(context: T): number\n    /// By default, nodes can only be reused during incremental\n    /// parsing if they were created in the same context as the one in\n    /// which they are reused. Set this to false to disable that\n    /// check.\n    strict?: boolean\n  }) {\n    this.start = spec.start\n    this.shift = spec.shift || id\n    this.reduce = spec.reduce || id\n    this.reuse = spec.reuse || id\n    this.hash = spec.hash\n    this.strict = spec.strict !== false\n  }\n}\n\ntype ParserSpec = {\n  version: number,\n  states: string | Uint32Array,\n  stateData: string | Uint16Array,\n  goto: string | Uint16Array,\n  nodeNames: string,\n  maxTerm: number,\n  repeatNodeCount: number,\n  nodeProps?: [NodeProp<any>, ...(string | number)[]][],\n  skippedNodes?: number[],\n  tokenData: string,\n  tokenizers: (Tokenizer | number)[],\n  topRules: {[name: string]: [number, number]},\n  context: ContextTracker<any> | null,\n  nested?: [string, NestedParser, string | Uint16Array, number][],\n  dialects?: {[name: string]: number},\n  dynamicPrecedences?: {[term: number]: number},\n  specialized?: {term: number, get: (value: string, stack: Stack) => number}[],\n  tokenPrec: number,\n  termNames?: {[id: number]: string}\n}\n\ntype NestInfo = {\n  // A name, used by `withNested`\n  name: string,\n  value: NestedParser,\n  // A token-recognizing automaton for the end of the nesting\n  end: TokenGroup,\n  // The id of the placeholder term that appears in the grammar at\n  // the position of this nesting\n  placeholder: number\n}\n\n/// Configuration options to pass to a parser.\nexport interface ParserConfig {\n  /// Node props to add to the parser's node set.\n  props?: readonly NodePropSource[],\n  /// The name of the @top declaration to parse from. If not\n  /// specified, the first @top declaration is used.\n  top?: string,\n  /// A space-separated string of dialects to enable.\n  dialect?: string,\n  /// The nested grammars to use. This can be used to, for example,\n  /// swap in a different language for a nested grammar or fill in a\n  /// nested grammar that was left blank by the original grammar.\n  nested?: {[name: string]: NestedParser},\n  /// Replace the given external tokenizers with new ones.\n  tokenizers?: {from: ExternalTokenizer, to: ExternalTokenizer}[],\n  /// When true, the parser will raise an exception, rather than run\n  /// its error-recovery strategies, when the input doesn't match the\n  /// grammar.\n  strict?: boolean\n  /// The maximum length of the TreeBuffers generated in the output\n  /// tree. Defaults to 1024.\n  bufferLength?: number\n}\n\n/// A parser holds the parse tables for a given grammar, as generated\n/// by `lezer-generator`.\nexport class Parser {\n  /// The parse states for this grammar @internal\n  readonly states: Readonly<Uint32Array>\n  /// A blob of data that the parse states, as well as some\n  /// of `Parser`'s fields, point into @internal\n  readonly data: Readonly<Uint16Array>\n  /// The goto table. See `computeGotoTable` in\n  /// lezer-generator for details on the format @internal\n  readonly goto: Readonly<Uint16Array>\n  /// A node set with the node types used by this parser.\n  readonly nodeSet: NodeSet\n  /// The highest term id @internal\n  readonly maxTerm: number\n  /// The first repeat-related term id @internal\n  readonly minRepeatTerm: number\n  /// The tokenizer objects used by the grammar @internal\n  readonly tokenizers: readonly Tokenizer[]\n  /// Maps top rule names to [state ID, top term ID] pairs. @internal\n  readonly topRules: {[name: string]: [number, number]}\n  /// @internal\n  readonly context: ContextTracker<unknown> | null\n  /// Metadata about nested grammars used in this grammar @internal\n  readonly nested: readonly NestInfo[]\n  /// A mapping from dialect names to the tokens that are exclusive\n  /// to them. @internal\n  readonly dialects: {[name: string]: number}\n  /// Null if there are no dynamic precedences, a map from term ids\n  /// to precedence otherwise. @internal\n  readonly dynamicPrecedences: {[term: number]: number} | null\n  /// The token types have specializers (in this.specializers) @internal\n  readonly specialized: Uint16Array\n  /// The specializer functions for the token types in specialized @internal\n  readonly specializers: ((value: string, stack: Stack) => number)[]\n  /// Points into this.data at an array that holds the\n  /// precedence order (higher precedence first) for ambiguous\n  /// tokens @internal\n  readonly tokenPrecTable: number\n  /// An optional object mapping term ids to name strings @internal\n  readonly termNames: null | {[id: number]: string}\n  /// @internal\n  readonly maxNode: number\n  /// @internal\n  readonly dialect: Dialect\n  /// @internal\n  readonly top: [number, number]\n  /// @internal\n  readonly bufferLength = DefaultBufferLength\n  /// @internal\n  readonly strict = false\n\n  private cachedDialect: Dialect | null = null\n\n  /// @internal\n  constructor(spec: ParserSpec) {\n    if (spec.version != File.Version)\n      throw new RangeError(`Parser version (${spec.version}) doesn't match runtime version (${File.Version})`)\n    let tokenArray = decodeArray<Uint16Array>(spec.tokenData)\n    let nodeNames = spec.nodeNames.split(\" \")\n    this.minRepeatTerm = nodeNames.length\n    this.context = spec.context\n    for (let i = 0; i < spec.repeatNodeCount; i++) nodeNames.push(\"\")\n    let nodeProps: [NodeProp<any>, any][][] = []\n    for (let i = 0; i < nodeNames.length; i++) nodeProps.push([])\n    function setProp(nodeID: number, prop: NodeProp<any>, value: any) {\n      nodeProps[nodeID].push([prop, prop.deserialize(String(value))])\n    }\n    if (spec.nodeProps) for (let propSpec of spec.nodeProps) {\n      let prop = propSpec[0]\n      for (let i = 1; i < propSpec.length;) {\n        let next = propSpec[i++]\n        if (next >= 0) {\n          setProp(next as number, prop, propSpec[i++] as string)\n        } else {\n          let value = propSpec[i + -next] as string\n          for (let j = -next; j > 0; j--) setProp(propSpec[i++] as number, prop, value)\n          i++\n        }\n      }\n    }\n    this.specialized = new Uint16Array(spec.specialized ? spec.specialized.length : 0)\n    this.specializers = []\n    if (spec.specialized) for (let i = 0; i < spec.specialized.length; i++) {\n      this.specialized[i] = spec.specialized[i].term\n      this.specializers[i] = spec.specialized[i].get\n    }\n\n    this.states = decodeArray(spec.states, Uint32Array)\n    this.data = decodeArray(spec.stateData)\n    this.goto = decodeArray(spec.goto)\n    let topTerms = Object.keys(spec.topRules).map(r => spec.topRules[r][1])\n    this.nodeSet = new NodeSet(nodeNames.map((name, i) => NodeType.define({\n      name: i >= this.minRepeatTerm ? undefined: name,\n      id: i,\n      props: nodeProps[i],\n      top: topTerms.indexOf(i) > -1,\n      error: i == 0,\n      skipped: spec.skippedNodes && spec.skippedNodes.indexOf(i) > -1\n    })))\n    this.maxTerm = spec.maxTerm\n    this.tokenizers = spec.tokenizers.map(value => typeof value == \"number\" ? new TokenGroup(tokenArray, value) : value)\n    this.topRules = spec.topRules\n    this.nested = (spec.nested || []).map(([name, value, endToken, placeholder]) => {\n      return {name, value, end: new TokenGroup(decodeArray(endToken), 0), placeholder}\n    })\n    this.dialects = spec.dialects || {}\n    this.dynamicPrecedences = spec.dynamicPrecedences || null\n    this.tokenPrecTable = spec.tokenPrec\n    this.termNames = spec.termNames || null\n    this.maxNode = this.nodeSet.types.length - 1\n\n    this.dialect = this.parseDialect()\n    this.top = this.topRules[Object.keys(this.topRules)[0]]\n  }\n\n  /// Parse a given string or stream.\n  parse(input: Input | string, startPos: number = 0, context: ParseContext = {}) {\n    if (typeof input == \"string\") input = stringInput(input)\n    let cx = new Parse(this, input, startPos, context)\n    for (;;) {\n      let done = cx.advance()\n      if (done) return done\n    }\n  }\n\n  /// Start an incremental parse.\n  startParse(input: Input | string, startPos: number = 0, context: ParseContext = {}): PartialParse {\n    if (typeof input == \"string\") input = stringInput(input)\n    return new Parse(this, input, startPos, context)\n  }\n\n  /// Get a goto table entry @internal\n  getGoto(state: number, term: number, loose = false) {\n    let table = this.goto\n    if (term >= table[0]) return -1\n    for (let pos = table[term + 1];;) {\n      let groupTag = table[pos++], last = groupTag & 1\n      let target = table[pos++]\n      if (last && loose) return target\n      for (let end = pos + (groupTag >> 1); pos < end; pos++)\n        if (table[pos] == state) return target\n      if (last) return -1\n    }\n  }\n\n  /// Check if this state has an action for a given terminal @internal\n  hasAction(state: number, terminal: number) {\n    let data = this.data\n    for (let set = 0; set < 2; set++) {\n      for (let i = this.stateSlot(state, set ? ParseState.Skip : ParseState.Actions), next;; i += 3) {\n        if ((next = data[i]) == Seq.End) {\n          if (data[i + 1] == Seq.Next) next = data[i = pair(data, i + 2)]\n          else if (data[i + 1] == Seq.Other) return pair(data, i + 2)\n          else break\n        }\n        if (next == terminal || next == Term.Err) return pair(data, i + 1)\n      }\n    }\n    return 0\n  }\n\n  /// @internal\n  stateSlot(state: number, slot: number) {\n    return this.states[(state * ParseState.Size) + slot]\n  }\n\n  /// @internal\n  stateFlag(state: number, flag: number) {\n    return (this.stateSlot(state, ParseState.Flags) & flag) > 0\n  }\n\n  /// @internal\n  findNested(state: number) {\n    let flags = this.stateSlot(state, ParseState.Flags)\n    return flags & StateFlag.StartNest ? this.nested[flags >> StateFlag.NestShift] : null\n  }\n\n  /// @internal\n  validAction(state: number, action: number) {\n    if (action == this.stateSlot(state, ParseState.DefaultReduce)) return true\n    for (let i = this.stateSlot(state, ParseState.Actions);; i += 3) {\n      if (this.data[i] == Seq.End) {\n        if (this.data[i + 1] == Seq.Next) i = pair(this.data, i + 2)\n        else return false\n      }\n      if (action == pair(this.data, i + 1)) return true\n    }\n  }\n\n  /// Get the states that can follow this one through shift actions or\n  /// goto jumps. @internal\n  nextStates(state: number): readonly number[] {\n    let result: number[] = []\n    for (let i = this.stateSlot(state, ParseState.Actions);; i += 3) {\n      if (this.data[i] == Seq.End) {\n        if (this.data[i + 1] == Seq.Next) i = pair(this.data, i + 2)\n        else break\n      }\n      if ((this.data[i + 2] & (Action.ReduceFlag >> 16)) == 0) {\n        let value = this.data[i + 1]\n        if (!result.some((v, i) => (i & 1) && v == value)) result.push(this.data[i], value)\n      }\n    }\n    return result\n  }\n\n  /// @internal\n  overrides(token: number, prev: number) {\n    let iPrev = findOffset(this.data, this.tokenPrecTable, prev)\n    return iPrev < 0 || findOffset(this.data, this.tokenPrecTable, token) < iPrev\n  }\n\n  /// Configure the parser. Returns a new parser instance that has the\n  /// given settings modified. Settings not provided in `config` are\n  /// kept from the original parser.\n  configure(config: ParserConfig) {\n    // Hideous reflection-based kludge to make it easy to create a\n    // slightly modified copy of a parser.\n    let copy = Object.assign(Object.create(Parser.prototype), this)\n    if (config.props)\n      copy.nodeSet = this.nodeSet.extend(...config.props)\n    if (config.top) {\n      let info = this.topRules[config.top!]\n      if (!info) throw new RangeError(`Invalid top rule name ${config.top}`)\n      copy.top = info\n    }\n    if (config.tokenizers)\n      copy.tokenizers = this.tokenizers.map(t => {\n        let found = config.tokenizers!.find(r => r.from == t)\n        return found ? found.to : t\n      })\n    if (config.dialect)\n      copy.dialect = this.parseDialect(config.dialect)\n    if (config.nested)\n      copy.nested = this.nested.map(obj => {\n        if (!Object.prototype.hasOwnProperty.call(config.nested, obj.name)) return obj\n        return {name: obj.name, value: config.nested![obj.name], end: obj.end, placeholder: obj.placeholder}\n      })\n    if (config.strict != null)\n      copy.strict = config.strict\n    if (config.bufferLength != null)\n      copy.bufferLength = config.bufferLength\n    return copy as Parser\n  }\n\n  /// Returns the name associated with a given term. This will only\n  /// work for all terms when the parser was generated with the\n  /// `--names` option. By default, only the names of tagged terms are\n  /// stored.\n  getName(term: number): string {\n    return this.termNames ? this.termNames[term] : String(term <= this.maxNode && this.nodeSet.types[term].name || term)\n  }\n\n  /// The eof term id is always allocated directly after the node\n  /// types. @internal\n  get eofTerm() { return this.maxNode + 1 }\n\n  /// Tells you whether this grammar has any nested grammars.\n  get hasNested() { return this.nested.length > 0 }\n\n  /// The type of top node produced by the parser.\n  get topNode() { return this.nodeSet.types[this.top[1]] }\n\n  /// @internal\n  dynamicPrecedence(term: number) {\n    let prec = this.dynamicPrecedences\n    return prec == null ? 0 : prec[term] || 0\n  }\n\n  /// @internal\n  parseDialect(dialect?: string) {\n    if (this.cachedDialect && this.cachedDialect.source == dialect) return this.cachedDialect\n    let values = Object.keys(this.dialects), flags = values.map(() => false)\n    if (dialect) for (let part of dialect.split(\" \")) {\n      let id = values.indexOf(part)\n      if (id >= 0) flags[id] = true\n    }\n    let disabled: Uint8Array | null = null\n    for (let i = 0; i < values.length; i++) if (!flags[i]) {\n      for (let j = this.dialects[values[i]], id; (id = this.data[j++]) != Seq.End;)\n        (disabled || (disabled = new Uint8Array(this.maxTerm + 1)))[id] = 1\n    }\n    return this.cachedDialect = new Dialect(dialect, flags, disabled)\n  }\n\n  /// (used by the output of the parser generator) @internal\n  static deserialize(spec: ParserSpec) {\n    return new Parser(spec)\n  }\n}\n\nfunction pair(data: Readonly<Uint16Array>, off: number) { return data[off] | (data[off + 1] << 16) }\n\nfunction findOffset(data: Readonly<Uint16Array>, start: number, term: number) {\n  for (let i = start, next; (next = data[i]) != Seq.End; i++)\n    if (next == term) return i - start\n  return -1\n}\n\nfunction findFinished(stacks: Stack[]) {\n  let best: Stack | null = null\n  for (let stack of stacks) {\n    if (stack.pos == stack.p.input.length &&\n        stack.p.parser.stateFlag(stack.state, StateFlag.Accepting) &&\n        (!best || best.score < stack.score))\n      best = stack\n  }\n  return best\n}\n"]},"metadata":{},"sourceType":"module"}