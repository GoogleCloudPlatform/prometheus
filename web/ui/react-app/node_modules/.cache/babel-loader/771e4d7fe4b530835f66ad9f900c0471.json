{"ast":null,"code":"import _slicedToArray from\"/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{Fragment,useState}from'react';import{Badge,Tooltip}from'reactstrap';import'css.escape';import styles from'./TargetLabels.module.css';var formatLabels=function formatLabels(labels){return Object.keys(labels).map(function(key){return\"\".concat(key,\"=\\\"\").concat(labels[key],\"\\\"\");});};var TargetLabels=function TargetLabels(_ref){var discoveredLabels=_ref.discoveredLabels,labels=_ref.labels,idx=_ref.idx,scrapePool=_ref.scrapePool;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),tooltipOpen=_useState2[0],setTooltipOpen=_useState2[1];var toggle=function toggle(){return setTooltipOpen(!tooltipOpen);};var id=\"series-labels-\".concat(scrapePool,\"-\").concat(idx);return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"div\",{id:id,className:\"series-labels-container\"},Object.keys(labels).map(function(labelName){return/*#__PURE__*/React.createElement(Badge,{color:\"primary\",className:\"mr-1\",key:labelName},\"\".concat(labelName,\"=\\\"\").concat(labels[labelName],\"\\\"\"));})),/*#__PURE__*/React.createElement(Tooltip,{isOpen:tooltipOpen,target:CSS.escape(id),toggle:toggle,style:{maxWidth:'none',textAlign:'left'}},/*#__PURE__*/React.createElement(\"b\",null,\"Before relabeling:\"),formatLabels(discoveredLabels).map(function(s,idx){return/*#__PURE__*/React.createElement(Fragment,{key:idx},/*#__PURE__*/React.createElement(\"br\",null),/*#__PURE__*/React.createElement(\"span\",{className:styles.discovered},s));})));};export default TargetLabels;","map":{"version":3,"sources":["/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/src/pages/targets/TargetLabels.tsx"],"names":["React","Fragment","useState","Badge","Tooltip","styles","formatLabels","labels","Object","keys","map","key","TargetLabels","discoveredLabels","idx","scrapePool","tooltipOpen","setTooltipOpen","toggle","id","labelName","CSS","escape","maxWidth","textAlign","s","discovered"],"mappings":"kOAAA,MAAOA,CAAAA,KAAP,EAAoBC,QAApB,CAA8BC,QAA9B,KAA8C,OAA9C,CACA,OAASC,KAAT,CAAgBC,OAAhB,KAA+B,YAA/B,CACA,MAAO,YAAP,CACA,MAAOC,CAAAA,MAAP,KAAmB,2BAAnB,CAaA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,MAAD,QAA8BC,CAAAA,MAAM,CAACC,IAAP,CAAYF,MAAZ,EAAoBG,GAApB,CAAwB,SAAAC,GAAG,kBAAOA,GAAP,eAAeJ,MAAM,CAACI,GAAD,CAArB,QAA3B,CAA9B,EAArB,CAEA,GAAMC,CAAAA,YAAmC,CAAG,QAAtCA,CAAAA,YAAsC,MAAmD,IAAhDC,CAAAA,gBAAgD,MAAhDA,gBAAgD,CAA9BN,MAA8B,MAA9BA,MAA8B,CAAtBO,GAAsB,MAAtBA,GAAsB,CAAjBC,UAAiB,MAAjBA,UAAiB,CAC7F,cAAsCb,QAAQ,CAAC,KAAD,CAA9C,wCAAOc,WAAP,eAAoBC,cAApB,eAEA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,SAAYD,CAAAA,cAAc,CAAC,CAACD,WAAF,CAA1B,EAAf,CACA,GAAMG,CAAAA,EAAE,yBAAoBJ,UAApB,aAAkCD,GAAlC,CAAR,CAEA,mBACE,qDACE,2BAAK,EAAE,CAAEK,EAAT,CAAa,SAAS,CAAC,yBAAvB,EACGX,MAAM,CAACC,IAAP,CAAYF,MAAZ,EAAoBG,GAApB,CAAwB,SAAAU,SAAS,CAAI,CACpC,mBACE,oBAAC,KAAD,EAAO,KAAK,CAAC,SAAb,CAAuB,SAAS,CAAC,MAAjC,CAAwC,GAAG,CAAEA,SAA7C,YACMA,SADN,eACoBb,MAAM,CAACa,SAAD,CAD1B,OADF,CAKD,CANA,CADH,CADF,cAUE,oBAAC,OAAD,EAAS,MAAM,CAAEJ,WAAjB,CAA8B,MAAM,CAAEK,GAAG,CAACC,MAAJ,CAAWH,EAAX,CAAtC,CAAsD,MAAM,CAAED,MAA9D,CAAsE,KAAK,CAAE,CAAEK,QAAQ,CAAE,MAAZ,CAAoBC,SAAS,CAAE,MAA/B,CAA7E,eACE,kDADF,CAEGlB,YAAY,CAACO,gBAAD,CAAZ,CAA+BH,GAA/B,CAAmC,SAACe,CAAD,CAAYX,GAAZ,qBAClC,oBAAC,QAAD,EAAU,GAAG,CAAEA,GAAf,eACE,8BADF,cAEE,4BAAM,SAAS,CAAET,MAAM,CAACqB,UAAxB,EAAqCD,CAArC,CAFF,CADkC,EAAnC,CAFH,CAVF,CADF,CAsBD,CA5BD,CA8BA,cAAeb,CAAAA,YAAf","sourcesContent":["import React, { FC, Fragment, useState } from 'react';\nimport { Badge, Tooltip } from 'reactstrap';\nimport 'css.escape';\nimport styles from './TargetLabels.module.css';\n\ninterface Labels {\n  [key: string]: string;\n}\n\nexport interface TargetLabelsProps {\n  discoveredLabels: Labels;\n  labels: Labels;\n  idx: number;\n  scrapePool: string;\n}\n\nconst formatLabels = (labels: Labels): string[] => Object.keys(labels).map(key => `${key}=\"${labels[key]}\"`);\n\nconst TargetLabels: FC<TargetLabelsProps> = ({ discoveredLabels, labels, idx, scrapePool }) => {\n  const [tooltipOpen, setTooltipOpen] = useState(false);\n\n  const toggle = (): void => setTooltipOpen(!tooltipOpen);\n  const id = `series-labels-${scrapePool}-${idx}`;\n\n  return (\n    <>\n      <div id={id} className=\"series-labels-container\">\n        {Object.keys(labels).map(labelName => {\n          return (\n            <Badge color=\"primary\" className=\"mr-1\" key={labelName}>\n              {`${labelName}=\"${labels[labelName]}\"`}\n            </Badge>\n          );\n        })}\n      </div>\n      <Tooltip isOpen={tooltipOpen} target={CSS.escape(id)} toggle={toggle} style={{ maxWidth: 'none', textAlign: 'left' }}>\n        <b>Before relabeling:</b>\n        {formatLabels(discoveredLabels).map((s: string, idx: number) => (\n          <Fragment key={idx}>\n            <br />\n            <span className={styles.discovered}>{s}</span>\n          </Fragment>\n        ))}\n      </Tooltip>\n    </>\n  );\n};\n\nexport default TargetLabels;\n"]},"metadata":{},"sourceType":"module"}