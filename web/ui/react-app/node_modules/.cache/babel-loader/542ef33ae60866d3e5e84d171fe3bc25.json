{"ast":null,"code":"'use strict';\n\nvar _slicedToArray = require(\"/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _createForOfIteratorHelper = require(\"/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar Declaration = require('./declaration');\n\nvar tokenizer = require('./tokenize');\n\nvar Comment = require('./comment');\n\nvar AtRule = require('./at-rule');\n\nvar Root = require('./root');\n\nvar Rule = require('./rule');\n\nvar Parser = /*#__PURE__*/function () {\n  function Parser(input) {\n    _classCallCheck(this, Parser);\n\n    this.input = input;\n    this.root = new Root();\n    this.current = this.root;\n    this.spaces = '';\n    this.semicolon = false;\n    this.customProperty = false;\n    this.createTokenizer();\n    this.root.source = {\n      input: input,\n      start: {\n        offset: 0,\n        line: 1,\n        column: 1\n      }\n    };\n  }\n\n  _createClass(Parser, [{\n    key: \"createTokenizer\",\n    value: function createTokenizer() {\n      this.tokenizer = tokenizer(this.input);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse() {\n      var token;\n\n      while (!this.tokenizer.endOfFile()) {\n        token = this.tokenizer.nextToken();\n\n        switch (token[0]) {\n          case 'space':\n            this.spaces += token[1];\n            break;\n\n          case ';':\n            this.freeSemicolon(token);\n            break;\n\n          case '}':\n            this.end(token);\n            break;\n\n          case 'comment':\n            this.comment(token);\n            break;\n\n          case 'at-word':\n            this.atrule(token);\n            break;\n\n          case '{':\n            this.emptyRule(token);\n            break;\n\n          default:\n            this.other(token);\n            break;\n        }\n      }\n\n      this.endFile();\n    }\n  }, {\n    key: \"comment\",\n    value: function comment(token) {\n      var node = new Comment();\n      this.init(node, token[2]);\n      node.source.end = this.getPosition(token[3] || token[2]);\n      var text = token[1].slice(2, -2);\n\n      if (/^\\s*$/.test(text)) {\n        node.text = '';\n        node.raws.left = text;\n        node.raws.right = '';\n      } else {\n        var match = text.match(/^(\\s*)([^]*\\S)(\\s*)$/);\n        node.text = match[2];\n        node.raws.left = match[1];\n        node.raws.right = match[3];\n      }\n    }\n  }, {\n    key: \"emptyRule\",\n    value: function emptyRule(token) {\n      var node = new Rule();\n      this.init(node, token[2]);\n      node.selector = '';\n      node.raws.between = '';\n      this.current = node;\n    }\n  }, {\n    key: \"other\",\n    value: function other(start) {\n      var end = false;\n      var type = null;\n      var colon = false;\n      var bracket = null;\n      var brackets = [];\n      var customProperty = start[1].startsWith('--');\n      var tokens = [];\n      var token = start;\n\n      while (token) {\n        type = token[0];\n        tokens.push(token);\n\n        if (type === '(' || type === '[') {\n          if (!bracket) bracket = token;\n          brackets.push(type === '(' ? ')' : ']');\n        } else if (customProperty && colon && type === '{') {\n          if (!bracket) bracket = token;\n          brackets.push('}');\n        } else if (brackets.length === 0) {\n          if (type === ';') {\n            if (colon) {\n              this.decl(tokens, customProperty);\n              return;\n            } else {\n              break;\n            }\n          } else if (type === '{') {\n            this.rule(tokens);\n            return;\n          } else if (type === '}') {\n            this.tokenizer.back(tokens.pop());\n            end = true;\n            break;\n          } else if (type === ':') {\n            colon = true;\n          }\n        } else if (type === brackets[brackets.length - 1]) {\n          brackets.pop();\n          if (brackets.length === 0) bracket = null;\n        }\n\n        token = this.tokenizer.nextToken();\n      }\n\n      if (this.tokenizer.endOfFile()) end = true;\n      if (brackets.length > 0) this.unclosedBracket(bracket);\n\n      if (end && colon) {\n        while (tokens.length) {\n          token = tokens[tokens.length - 1][0];\n          if (token !== 'space' && token !== 'comment') break;\n          this.tokenizer.back(tokens.pop());\n        }\n\n        this.decl(tokens, customProperty);\n      } else {\n        this.unknownWord(tokens);\n      }\n    }\n  }, {\n    key: \"rule\",\n    value: function rule(tokens) {\n      tokens.pop();\n      var node = new Rule();\n      this.init(node, tokens[0][2]);\n      node.raws.between = this.spacesAndCommentsFromEnd(tokens);\n      this.raw(node, 'selector', tokens);\n      this.current = node;\n    }\n  }, {\n    key: \"decl\",\n    value: function decl(tokens, customProperty) {\n      var node = new Declaration();\n      this.init(node, tokens[0][2]);\n      var last = tokens[tokens.length - 1];\n\n      if (last[0] === ';') {\n        this.semicolon = true;\n        tokens.pop();\n      }\n\n      node.source.end = this.getPosition(last[3] || last[2]);\n\n      while (tokens[0][0] !== 'word') {\n        if (tokens.length === 1) this.unknownWord(tokens);\n        node.raws.before += tokens.shift()[1];\n      }\n\n      node.source.start = this.getPosition(tokens[0][2]);\n      node.prop = '';\n\n      while (tokens.length) {\n        var type = tokens[0][0];\n\n        if (type === ':' || type === 'space' || type === 'comment') {\n          break;\n        }\n\n        node.prop += tokens.shift()[1];\n      }\n\n      node.raws.between = '';\n      var token;\n\n      while (tokens.length) {\n        token = tokens.shift();\n\n        if (token[0] === ':') {\n          node.raws.between += token[1];\n          break;\n        } else {\n          if (token[0] === 'word' && /\\w/.test(token[1])) {\n            this.unknownWord([token]);\n          }\n\n          node.raws.between += token[1];\n        }\n      }\n\n      if (node.prop[0] === '_' || node.prop[0] === '*') {\n        node.raws.before += node.prop[0];\n        node.prop = node.prop.slice(1);\n      }\n\n      var firstSpaces = this.spacesAndCommentsFromStart(tokens);\n      this.precheckMissedSemicolon(tokens);\n\n      for (var i = tokens.length - 1; i >= 0; i--) {\n        token = tokens[i];\n\n        if (token[1].toLowerCase() === '!important') {\n          node.important = true;\n          var string = this.stringFrom(tokens, i);\n          string = this.spacesFromEnd(tokens) + string;\n          if (string !== ' !important') node.raws.important = string;\n          break;\n        } else if (token[1].toLowerCase() === 'important') {\n          var cache = tokens.slice(0);\n          var str = '';\n\n          for (var j = i; j > 0; j--) {\n            var _type = cache[j][0];\n\n            if (str.trim().indexOf('!') === 0 && _type !== 'space') {\n              break;\n            }\n\n            str = cache.pop()[1] + str;\n          }\n\n          if (str.trim().indexOf('!') === 0) {\n            node.important = true;\n            node.raws.important = str;\n            tokens = cache;\n          }\n        }\n\n        if (token[0] !== 'space' && token[0] !== 'comment') {\n          break;\n        }\n      }\n\n      var hasWord = tokens.some(function (i) {\n        return i[0] !== 'space' && i[0] !== 'comment';\n      });\n      this.raw(node, 'value', tokens);\n\n      if (hasWord) {\n        node.raws.between += firstSpaces;\n      } else {\n        node.value = firstSpaces + node.value;\n      }\n\n      if (node.value.includes(':') && !customProperty) {\n        this.checkMissedSemicolon(tokens);\n      }\n    }\n  }, {\n    key: \"atrule\",\n    value: function atrule(token) {\n      var node = new AtRule();\n      node.name = token[1].slice(1);\n\n      if (node.name === '') {\n        this.unnamedAtrule(node, token);\n      }\n\n      this.init(node, token[2]);\n      var type;\n      var prev;\n      var shift;\n      var last = false;\n      var open = false;\n      var params = [];\n      var brackets = [];\n\n      while (!this.tokenizer.endOfFile()) {\n        token = this.tokenizer.nextToken();\n        type = token[0];\n\n        if (type === '(' || type === '[') {\n          brackets.push(type === '(' ? ')' : ']');\n        } else if (type === '{' && brackets.length > 0) {\n          brackets.push('}');\n        } else if (type === brackets[brackets.length - 1]) {\n          brackets.pop();\n        }\n\n        if (brackets.length === 0) {\n          if (type === ';') {\n            node.source.end = this.getPosition(token[2]);\n            this.semicolon = true;\n            break;\n          } else if (type === '{') {\n            open = true;\n            break;\n          } else if (type === '}') {\n            if (params.length > 0) {\n              shift = params.length - 1;\n              prev = params[shift];\n\n              while (prev && prev[0] === 'space') {\n                prev = params[--shift];\n              }\n\n              if (prev) {\n                node.source.end = this.getPosition(prev[3] || prev[2]);\n              }\n            }\n\n            this.end(token);\n            break;\n          } else {\n            params.push(token);\n          }\n        } else {\n          params.push(token);\n        }\n\n        if (this.tokenizer.endOfFile()) {\n          last = true;\n          break;\n        }\n      }\n\n      node.raws.between = this.spacesAndCommentsFromEnd(params);\n\n      if (params.length) {\n        node.raws.afterName = this.spacesAndCommentsFromStart(params);\n        this.raw(node, 'params', params);\n\n        if (last) {\n          token = params[params.length - 1];\n          node.source.end = this.getPosition(token[3] || token[2]);\n          this.spaces = node.raws.between;\n          node.raws.between = '';\n        }\n      } else {\n        node.raws.afterName = '';\n        node.params = '';\n      }\n\n      if (open) {\n        node.nodes = [];\n        this.current = node;\n      }\n    }\n  }, {\n    key: \"end\",\n    value: function end(token) {\n      if (this.current.nodes && this.current.nodes.length) {\n        this.current.raws.semicolon = this.semicolon;\n      }\n\n      this.semicolon = false;\n      this.current.raws.after = (this.current.raws.after || '') + this.spaces;\n      this.spaces = '';\n\n      if (this.current.parent) {\n        this.current.source.end = this.getPosition(token[2]);\n        this.current = this.current.parent;\n      } else {\n        this.unexpectedClose(token);\n      }\n    }\n  }, {\n    key: \"endFile\",\n    value: function endFile() {\n      if (this.current.parent) this.unclosedBlock();\n\n      if (this.current.nodes && this.current.nodes.length) {\n        this.current.raws.semicolon = this.semicolon;\n      }\n\n      this.current.raws.after = (this.current.raws.after || '') + this.spaces;\n    }\n  }, {\n    key: \"freeSemicolon\",\n    value: function freeSemicolon(token) {\n      this.spaces += token[1];\n\n      if (this.current.nodes) {\n        var prev = this.current.nodes[this.current.nodes.length - 1];\n\n        if (prev && prev.type === 'rule' && !prev.raws.ownSemicolon) {\n          prev.raws.ownSemicolon = this.spaces;\n          this.spaces = '';\n        }\n      }\n    } // Helpers\n\n  }, {\n    key: \"getPosition\",\n    value: function getPosition(offset) {\n      var pos = this.input.fromOffset(offset);\n      return {\n        offset: offset,\n        line: pos.line,\n        column: pos.col\n      };\n    }\n  }, {\n    key: \"init\",\n    value: function init(node, offset) {\n      this.current.push(node);\n      node.source = {\n        start: this.getPosition(offset),\n        input: this.input\n      };\n      node.raws.before = this.spaces;\n      this.spaces = '';\n      if (node.type !== 'comment') this.semicolon = false;\n    }\n  }, {\n    key: \"raw\",\n    value: function raw(node, prop, tokens) {\n      var token, type;\n      var length = tokens.length;\n      var value = '';\n      var clean = true;\n      var next, prev;\n      var pattern = /^([#.|])?(\\w)+/i;\n\n      for (var i = 0; i < length; i += 1) {\n        token = tokens[i];\n        type = token[0];\n\n        if (type === 'comment' && node.type === 'rule') {\n          prev = tokens[i - 1];\n          next = tokens[i + 1];\n\n          if (prev[0] !== 'space' && next[0] !== 'space' && pattern.test(prev[1]) && pattern.test(next[1])) {\n            value += token[1];\n          } else {\n            clean = false;\n          }\n\n          continue;\n        }\n\n        if (type === 'comment' || type === 'space' && i === length - 1) {\n          clean = false;\n        } else {\n          value += token[1];\n        }\n      }\n\n      if (!clean) {\n        var raw = tokens.reduce(function (all, i) {\n          return all + i[1];\n        }, '');\n        node.raws[prop] = {\n          value: value,\n          raw: raw\n        };\n      }\n\n      node[prop] = value;\n    }\n  }, {\n    key: \"spacesAndCommentsFromEnd\",\n    value: function spacesAndCommentsFromEnd(tokens) {\n      var lastTokenType;\n      var spaces = '';\n\n      while (tokens.length) {\n        lastTokenType = tokens[tokens.length - 1][0];\n        if (lastTokenType !== 'space' && lastTokenType !== 'comment') break;\n        spaces = tokens.pop()[1] + spaces;\n      }\n\n      return spaces;\n    }\n  }, {\n    key: \"spacesAndCommentsFromStart\",\n    value: function spacesAndCommentsFromStart(tokens) {\n      var next;\n      var spaces = '';\n\n      while (tokens.length) {\n        next = tokens[0][0];\n        if (next !== 'space' && next !== 'comment') break;\n        spaces += tokens.shift()[1];\n      }\n\n      return spaces;\n    }\n  }, {\n    key: \"spacesFromEnd\",\n    value: function spacesFromEnd(tokens) {\n      var lastTokenType;\n      var spaces = '';\n\n      while (tokens.length) {\n        lastTokenType = tokens[tokens.length - 1][0];\n        if (lastTokenType !== 'space') break;\n        spaces = tokens.pop()[1] + spaces;\n      }\n\n      return spaces;\n    }\n  }, {\n    key: \"stringFrom\",\n    value: function stringFrom(tokens, from) {\n      var result = '';\n\n      for (var i = from; i < tokens.length; i++) {\n        result += tokens[i][1];\n      }\n\n      tokens.splice(from, tokens.length - from);\n      return result;\n    }\n  }, {\n    key: \"colon\",\n    value: function colon(tokens) {\n      var brackets = 0;\n      var token, type, prev;\n\n      var _iterator = _createForOfIteratorHelper(tokens.entries()),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              i = _step$value[0],\n              element = _step$value[1];\n\n          token = element;\n          type = token[0];\n\n          if (type === '(') {\n            brackets += 1;\n          }\n\n          if (type === ')') {\n            brackets -= 1;\n          }\n\n          if (brackets === 0 && type === ':') {\n            if (!prev) {\n              this.doubleColon(token);\n            } else if (prev[0] === 'word' && prev[1] === 'progid') {\n              continue;\n            } else {\n              return i;\n            }\n          }\n\n          prev = token;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return false;\n    } // Errors\n\n  }, {\n    key: \"unclosedBracket\",\n    value: function unclosedBracket(bracket) {\n      throw this.input.error('Unclosed bracket', bracket[2]);\n    }\n  }, {\n    key: \"unknownWord\",\n    value: function unknownWord(tokens) {\n      throw this.input.error('Unknown word', tokens[0][2]);\n    }\n  }, {\n    key: \"unexpectedClose\",\n    value: function unexpectedClose(token) {\n      throw this.input.error('Unexpected }', token[2]);\n    }\n  }, {\n    key: \"unclosedBlock\",\n    value: function unclosedBlock() {\n      var pos = this.current.source.start;\n      throw this.input.error('Unclosed block', pos.line, pos.column);\n    }\n  }, {\n    key: \"doubleColon\",\n    value: function doubleColon(token) {\n      throw this.input.error('Double colon', token[2]);\n    }\n  }, {\n    key: \"unnamedAtrule\",\n    value: function unnamedAtrule(node, token) {\n      throw this.input.error('At-rule without name', token[2]);\n    }\n  }, {\n    key: \"precheckMissedSemicolon\",\n    value: function precheckMissedSemicolon()\n    /* tokens */\n    {// Hook for Safe Parser\n    }\n  }, {\n    key: \"checkMissedSemicolon\",\n    value: function checkMissedSemicolon(tokens) {\n      var colon = this.colon(tokens);\n      if (colon === false) return;\n      var founded = 0;\n      var token;\n\n      for (var j = colon - 1; j >= 0; j--) {\n        token = tokens[j];\n\n        if (token[0] !== 'space') {\n          founded += 1;\n          if (founded === 2) break;\n        }\n      }\n\n      throw this.input.error('Missed semicolon', token[2]);\n    }\n  }]);\n\n  return Parser;\n}();\n\nmodule.exports = Parser;","map":{"version":3,"sources":["/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/sanitize-html/node_modules/postcss/lib/parser.js"],"names":["Declaration","require","tokenizer","Comment","AtRule","Root","Rule","Parser","input","root","current","spaces","semicolon","customProperty","createTokenizer","source","start","offset","line","column","token","endOfFile","nextToken","freeSemicolon","end","comment","atrule","emptyRule","other","endFile","node","init","getPosition","text","slice","test","raws","left","right","match","selector","between","type","colon","bracket","brackets","startsWith","tokens","push","length","decl","rule","back","pop","unclosedBracket","unknownWord","spacesAndCommentsFromEnd","raw","last","before","shift","prop","firstSpaces","spacesAndCommentsFromStart","precheckMissedSemicolon","i","toLowerCase","important","string","stringFrom","spacesFromEnd","cache","str","j","trim","indexOf","hasWord","some","value","includes","checkMissedSemicolon","name","unnamedAtrule","prev","open","params","afterName","nodes","after","parent","unexpectedClose","unclosedBlock","ownSemicolon","pos","fromOffset","col","clean","next","pattern","reduce","all","lastTokenType","from","result","splice","entries","element","doubleColon","error","founded","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nlet Declaration = require('./declaration')\nlet tokenizer = require('./tokenize')\nlet Comment = require('./comment')\nlet AtRule = require('./at-rule')\nlet Root = require('./root')\nlet Rule = require('./rule')\n\nclass Parser {\n  constructor(input) {\n    this.input = input\n\n    this.root = new Root()\n    this.current = this.root\n    this.spaces = ''\n    this.semicolon = false\n    this.customProperty = false\n\n    this.createTokenizer()\n    this.root.source = { input, start: { offset: 0, line: 1, column: 1 } }\n  }\n\n  createTokenizer() {\n    this.tokenizer = tokenizer(this.input)\n  }\n\n  parse() {\n    let token\n    while (!this.tokenizer.endOfFile()) {\n      token = this.tokenizer.nextToken()\n\n      switch (token[0]) {\n        case 'space':\n          this.spaces += token[1]\n          break\n\n        case ';':\n          this.freeSemicolon(token)\n          break\n\n        case '}':\n          this.end(token)\n          break\n\n        case 'comment':\n          this.comment(token)\n          break\n\n        case 'at-word':\n          this.atrule(token)\n          break\n\n        case '{':\n          this.emptyRule(token)\n          break\n\n        default:\n          this.other(token)\n          break\n      }\n    }\n    this.endFile()\n  }\n\n  comment(token) {\n    let node = new Comment()\n    this.init(node, token[2])\n    node.source.end = this.getPosition(token[3] || token[2])\n\n    let text = token[1].slice(2, -2)\n    if (/^\\s*$/.test(text)) {\n      node.text = ''\n      node.raws.left = text\n      node.raws.right = ''\n    } else {\n      let match = text.match(/^(\\s*)([^]*\\S)(\\s*)$/)\n      node.text = match[2]\n      node.raws.left = match[1]\n      node.raws.right = match[3]\n    }\n  }\n\n  emptyRule(token) {\n    let node = new Rule()\n    this.init(node, token[2])\n    node.selector = ''\n    node.raws.between = ''\n    this.current = node\n  }\n\n  other(start) {\n    let end = false\n    let type = null\n    let colon = false\n    let bracket = null\n    let brackets = []\n    let customProperty = start[1].startsWith('--')\n\n    let tokens = []\n    let token = start\n    while (token) {\n      type = token[0]\n      tokens.push(token)\n\n      if (type === '(' || type === '[') {\n        if (!bracket) bracket = token\n        brackets.push(type === '(' ? ')' : ']')\n      } else if (customProperty && colon && type === '{') {\n        if (!bracket) bracket = token\n        brackets.push('}')\n      } else if (brackets.length === 0) {\n        if (type === ';') {\n          if (colon) {\n            this.decl(tokens, customProperty)\n            return\n          } else {\n            break\n          }\n        } else if (type === '{') {\n          this.rule(tokens)\n          return\n        } else if (type === '}') {\n          this.tokenizer.back(tokens.pop())\n          end = true\n          break\n        } else if (type === ':') {\n          colon = true\n        }\n      } else if (type === brackets[brackets.length - 1]) {\n        brackets.pop()\n        if (brackets.length === 0) bracket = null\n      }\n\n      token = this.tokenizer.nextToken()\n    }\n\n    if (this.tokenizer.endOfFile()) end = true\n    if (brackets.length > 0) this.unclosedBracket(bracket)\n\n    if (end && colon) {\n      while (tokens.length) {\n        token = tokens[tokens.length - 1][0]\n        if (token !== 'space' && token !== 'comment') break\n        this.tokenizer.back(tokens.pop())\n      }\n      this.decl(tokens, customProperty)\n    } else {\n      this.unknownWord(tokens)\n    }\n  }\n\n  rule(tokens) {\n    tokens.pop()\n\n    let node = new Rule()\n    this.init(node, tokens[0][2])\n\n    node.raws.between = this.spacesAndCommentsFromEnd(tokens)\n    this.raw(node, 'selector', tokens)\n    this.current = node\n  }\n\n  decl(tokens, customProperty) {\n    let node = new Declaration()\n    this.init(node, tokens[0][2])\n\n    let last = tokens[tokens.length - 1]\n    if (last[0] === ';') {\n      this.semicolon = true\n      tokens.pop()\n    }\n    node.source.end = this.getPosition(last[3] || last[2])\n\n    while (tokens[0][0] !== 'word') {\n      if (tokens.length === 1) this.unknownWord(tokens)\n      node.raws.before += tokens.shift()[1]\n    }\n    node.source.start = this.getPosition(tokens[0][2])\n\n    node.prop = ''\n    while (tokens.length) {\n      let type = tokens[0][0]\n      if (type === ':' || type === 'space' || type === 'comment') {\n        break\n      }\n      node.prop += tokens.shift()[1]\n    }\n\n    node.raws.between = ''\n\n    let token\n    while (tokens.length) {\n      token = tokens.shift()\n\n      if (token[0] === ':') {\n        node.raws.between += token[1]\n        break\n      } else {\n        if (token[0] === 'word' && /\\w/.test(token[1])) {\n          this.unknownWord([token])\n        }\n        node.raws.between += token[1]\n      }\n    }\n\n    if (node.prop[0] === '_' || node.prop[0] === '*') {\n      node.raws.before += node.prop[0]\n      node.prop = node.prop.slice(1)\n    }\n    let firstSpaces = this.spacesAndCommentsFromStart(tokens)\n    this.precheckMissedSemicolon(tokens)\n\n    for (let i = tokens.length - 1; i >= 0; i--) {\n      token = tokens[i]\n      if (token[1].toLowerCase() === '!important') {\n        node.important = true\n        let string = this.stringFrom(tokens, i)\n        string = this.spacesFromEnd(tokens) + string\n        if (string !== ' !important') node.raws.important = string\n        break\n      } else if (token[1].toLowerCase() === 'important') {\n        let cache = tokens.slice(0)\n        let str = ''\n        for (let j = i; j > 0; j--) {\n          let type = cache[j][0]\n          if (str.trim().indexOf('!') === 0 && type !== 'space') {\n            break\n          }\n          str = cache.pop()[1] + str\n        }\n        if (str.trim().indexOf('!') === 0) {\n          node.important = true\n          node.raws.important = str\n          tokens = cache\n        }\n      }\n\n      if (token[0] !== 'space' && token[0] !== 'comment') {\n        break\n      }\n    }\n\n    let hasWord = tokens.some(i => i[0] !== 'space' && i[0] !== 'comment')\n    this.raw(node, 'value', tokens)\n    if (hasWord) {\n      node.raws.between += firstSpaces\n    } else {\n      node.value = firstSpaces + node.value\n    }\n\n    if (node.value.includes(':') && !customProperty) {\n      this.checkMissedSemicolon(tokens)\n    }\n  }\n\n  atrule(token) {\n    let node = new AtRule()\n    node.name = token[1].slice(1)\n    if (node.name === '') {\n      this.unnamedAtrule(node, token)\n    }\n    this.init(node, token[2])\n\n    let type\n    let prev\n    let shift\n    let last = false\n    let open = false\n    let params = []\n    let brackets = []\n\n    while (!this.tokenizer.endOfFile()) {\n      token = this.tokenizer.nextToken()\n      type = token[0]\n\n      if (type === '(' || type === '[') {\n        brackets.push(type === '(' ? ')' : ']')\n      } else if (type === '{' && brackets.length > 0) {\n        brackets.push('}')\n      } else if (type === brackets[brackets.length - 1]) {\n        brackets.pop()\n      }\n\n      if (brackets.length === 0) {\n        if (type === ';') {\n          node.source.end = this.getPosition(token[2])\n          this.semicolon = true\n          break\n        } else if (type === '{') {\n          open = true\n          break\n        } else if (type === '}') {\n          if (params.length > 0) {\n            shift = params.length - 1\n            prev = params[shift]\n            while (prev && prev[0] === 'space') {\n              prev = params[--shift]\n            }\n            if (prev) {\n              node.source.end = this.getPosition(prev[3] || prev[2])\n            }\n          }\n          this.end(token)\n          break\n        } else {\n          params.push(token)\n        }\n      } else {\n        params.push(token)\n      }\n\n      if (this.tokenizer.endOfFile()) {\n        last = true\n        break\n      }\n    }\n\n    node.raws.between = this.spacesAndCommentsFromEnd(params)\n    if (params.length) {\n      node.raws.afterName = this.spacesAndCommentsFromStart(params)\n      this.raw(node, 'params', params)\n      if (last) {\n        token = params[params.length - 1]\n        node.source.end = this.getPosition(token[3] || token[2])\n        this.spaces = node.raws.between\n        node.raws.between = ''\n      }\n    } else {\n      node.raws.afterName = ''\n      node.params = ''\n    }\n\n    if (open) {\n      node.nodes = []\n      this.current = node\n    }\n  }\n\n  end(token) {\n    if (this.current.nodes && this.current.nodes.length) {\n      this.current.raws.semicolon = this.semicolon\n    }\n    this.semicolon = false\n\n    this.current.raws.after = (this.current.raws.after || '') + this.spaces\n    this.spaces = ''\n\n    if (this.current.parent) {\n      this.current.source.end = this.getPosition(token[2])\n      this.current = this.current.parent\n    } else {\n      this.unexpectedClose(token)\n    }\n  }\n\n  endFile() {\n    if (this.current.parent) this.unclosedBlock()\n    if (this.current.nodes && this.current.nodes.length) {\n      this.current.raws.semicolon = this.semicolon\n    }\n    this.current.raws.after = (this.current.raws.after || '') + this.spaces\n  }\n\n  freeSemicolon(token) {\n    this.spaces += token[1]\n    if (this.current.nodes) {\n      let prev = this.current.nodes[this.current.nodes.length - 1]\n      if (prev && prev.type === 'rule' && !prev.raws.ownSemicolon) {\n        prev.raws.ownSemicolon = this.spaces\n        this.spaces = ''\n      }\n    }\n  }\n\n  // Helpers\n\n  getPosition(offset) {\n    let pos = this.input.fromOffset(offset)\n    return {\n      offset,\n      line: pos.line,\n      column: pos.col\n    }\n  }\n\n  init(node, offset) {\n    this.current.push(node)\n    node.source = {\n      start: this.getPosition(offset),\n      input: this.input\n    }\n    node.raws.before = this.spaces\n    this.spaces = ''\n    if (node.type !== 'comment') this.semicolon = false\n  }\n\n  raw(node, prop, tokens) {\n    let token, type\n    let length = tokens.length\n    let value = ''\n    let clean = true\n    let next, prev\n    let pattern = /^([#.|])?(\\w)+/i\n\n    for (let i = 0; i < length; i += 1) {\n      token = tokens[i]\n      type = token[0]\n\n      if (type === 'comment' && node.type === 'rule') {\n        prev = tokens[i - 1]\n        next = tokens[i + 1]\n\n        if (\n          prev[0] !== 'space' &&\n          next[0] !== 'space' &&\n          pattern.test(prev[1]) &&\n          pattern.test(next[1])\n        ) {\n          value += token[1]\n        } else {\n          clean = false\n        }\n\n        continue\n      }\n\n      if (type === 'comment' || (type === 'space' && i === length - 1)) {\n        clean = false\n      } else {\n        value += token[1]\n      }\n    }\n    if (!clean) {\n      let raw = tokens.reduce((all, i) => all + i[1], '')\n      node.raws[prop] = { value, raw }\n    }\n    node[prop] = value\n  }\n\n  spacesAndCommentsFromEnd(tokens) {\n    let lastTokenType\n    let spaces = ''\n    while (tokens.length) {\n      lastTokenType = tokens[tokens.length - 1][0]\n      if (lastTokenType !== 'space' && lastTokenType !== 'comment') break\n      spaces = tokens.pop()[1] + spaces\n    }\n    return spaces\n  }\n\n  spacesAndCommentsFromStart(tokens) {\n    let next\n    let spaces = ''\n    while (tokens.length) {\n      next = tokens[0][0]\n      if (next !== 'space' && next !== 'comment') break\n      spaces += tokens.shift()[1]\n    }\n    return spaces\n  }\n\n  spacesFromEnd(tokens) {\n    let lastTokenType\n    let spaces = ''\n    while (tokens.length) {\n      lastTokenType = tokens[tokens.length - 1][0]\n      if (lastTokenType !== 'space') break\n      spaces = tokens.pop()[1] + spaces\n    }\n    return spaces\n  }\n\n  stringFrom(tokens, from) {\n    let result = ''\n    for (let i = from; i < tokens.length; i++) {\n      result += tokens[i][1]\n    }\n    tokens.splice(from, tokens.length - from)\n    return result\n  }\n\n  colon(tokens) {\n    let brackets = 0\n    let token, type, prev\n    for (let [i, element] of tokens.entries()) {\n      token = element\n      type = token[0]\n\n      if (type === '(') {\n        brackets += 1\n      }\n      if (type === ')') {\n        brackets -= 1\n      }\n      if (brackets === 0 && type === ':') {\n        if (!prev) {\n          this.doubleColon(token)\n        } else if (prev[0] === 'word' && prev[1] === 'progid') {\n          continue\n        } else {\n          return i\n        }\n      }\n\n      prev = token\n    }\n    return false\n  }\n\n  // Errors\n\n  unclosedBracket(bracket) {\n    throw this.input.error('Unclosed bracket', bracket[2])\n  }\n\n  unknownWord(tokens) {\n    throw this.input.error('Unknown word', tokens[0][2])\n  }\n\n  unexpectedClose(token) {\n    throw this.input.error('Unexpected }', token[2])\n  }\n\n  unclosedBlock() {\n    let pos = this.current.source.start\n    throw this.input.error('Unclosed block', pos.line, pos.column)\n  }\n\n  doubleColon(token) {\n    throw this.input.error('Double colon', token[2])\n  }\n\n  unnamedAtrule(node, token) {\n    throw this.input.error('At-rule without name', token[2])\n  }\n\n  precheckMissedSemicolon(/* tokens */) {\n    // Hook for Safe Parser\n  }\n\n  checkMissedSemicolon(tokens) {\n    let colon = this.colon(tokens)\n    if (colon === false) return\n\n    let founded = 0\n    let token\n    for (let j = colon - 1; j >= 0; j--) {\n      token = tokens[j]\n      if (token[0] !== 'space') {\n        founded += 1\n        if (founded === 2) break\n      }\n    }\n    throw this.input.error('Missed semicolon', token[2])\n  }\n}\n\nmodule.exports = Parser\n"]},"metadata":{},"sourceType":"script"}