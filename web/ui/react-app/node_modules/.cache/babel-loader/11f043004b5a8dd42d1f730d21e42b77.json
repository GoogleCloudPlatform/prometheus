{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _classCallCheck = require(\"/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _createForOfIteratorHelper = require(\"/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar Declaration = require('./declaration');\n\nvar _require = require('./symbols'),\n    isClean = _require.isClean;\n\nvar Comment = require('./comment');\n\nvar Node = require('./node');\n\nvar parse, Rule, AtRule;\n\nfunction cleanSource(nodes) {\n  return nodes.map(function (i) {\n    if (i.nodes) i.nodes = cleanSource(i.nodes);\n    delete i.source;\n    return i;\n  });\n}\n\nfunction markDirtyUp(node) {\n  node[isClean] = false;\n\n  if (node.proxyOf.nodes) {\n    var _iterator = _createForOfIteratorHelper(node.proxyOf.nodes),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var i = _step.value;\n        markDirtyUp(i);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n} // istanbul ignore next\n\n\nfunction rebuild(node) {\n  if (node.type === 'atrule') {\n    Object.setPrototypeOf(node, AtRule.prototype);\n  } else if (node.type === 'rule') {\n    Object.setPrototypeOf(node, Rule.prototype);\n  } else if (node.type === 'decl') {\n    Object.setPrototypeOf(node, Declaration.prototype);\n  } else if (node.type === 'comment') {\n    Object.setPrototypeOf(node, Comment.prototype);\n  }\n\n  if (node.nodes) {\n    node.nodes.forEach(function (child) {\n      rebuild(child);\n    });\n  }\n}\n\nvar Container = /*#__PURE__*/function (_Node) {\n  _inherits(Container, _Node);\n\n  var _super = _createSuper(Container);\n\n  function Container() {\n    _classCallCheck(this, Container);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Container, [{\n    key: \"push\",\n    value: function push(child) {\n      child.parent = this;\n      this.proxyOf.nodes.push(child);\n      return this;\n    }\n  }, {\n    key: \"each\",\n    value: function each(callback) {\n      if (!this.proxyOf.nodes) return undefined;\n      var iterator = this.getIterator();\n      var index, result;\n\n      while (this.indexes[iterator] < this.proxyOf.nodes.length) {\n        index = this.indexes[iterator];\n        result = callback(this.proxyOf.nodes[index], index);\n        if (result === false) break;\n        this.indexes[iterator] += 1;\n      }\n\n      delete this.indexes[iterator];\n      return result;\n    }\n  }, {\n    key: \"walk\",\n    value: function walk(callback) {\n      return this.each(function (child, i) {\n        var result;\n\n        try {\n          result = callback(child, i);\n        } catch (e) {\n          throw child.addToError(e);\n        }\n\n        if (result !== false && child.walk) {\n          result = child.walk(callback);\n        }\n\n        return result;\n      });\n    }\n  }, {\n    key: \"walkDecls\",\n    value: function walkDecls(prop, callback) {\n      if (!callback) {\n        callback = prop;\n        return this.walk(function (child, i) {\n          if (child.type === 'decl') {\n            return callback(child, i);\n          }\n        });\n      }\n\n      if (prop instanceof RegExp) {\n        return this.walk(function (child, i) {\n          if (child.type === 'decl' && prop.test(child.prop)) {\n            return callback(child, i);\n          }\n        });\n      }\n\n      return this.walk(function (child, i) {\n        if (child.type === 'decl' && child.prop === prop) {\n          return callback(child, i);\n        }\n      });\n    }\n  }, {\n    key: \"walkRules\",\n    value: function walkRules(selector, callback) {\n      if (!callback) {\n        callback = selector;\n        return this.walk(function (child, i) {\n          if (child.type === 'rule') {\n            return callback(child, i);\n          }\n        });\n      }\n\n      if (selector instanceof RegExp) {\n        return this.walk(function (child, i) {\n          if (child.type === 'rule' && selector.test(child.selector)) {\n            return callback(child, i);\n          }\n        });\n      }\n\n      return this.walk(function (child, i) {\n        if (child.type === 'rule' && child.selector === selector) {\n          return callback(child, i);\n        }\n      });\n    }\n  }, {\n    key: \"walkAtRules\",\n    value: function walkAtRules(name, callback) {\n      if (!callback) {\n        callback = name;\n        return this.walk(function (child, i) {\n          if (child.type === 'atrule') {\n            return callback(child, i);\n          }\n        });\n      }\n\n      if (name instanceof RegExp) {\n        return this.walk(function (child, i) {\n          if (child.type === 'atrule' && name.test(child.name)) {\n            return callback(child, i);\n          }\n        });\n      }\n\n      return this.walk(function (child, i) {\n        if (child.type === 'atrule' && child.name === name) {\n          return callback(child, i);\n        }\n      });\n    }\n  }, {\n    key: \"walkComments\",\n    value: function walkComments(callback) {\n      return this.walk(function (child, i) {\n        if (child.type === 'comment') {\n          return callback(child, i);\n        }\n      });\n    }\n  }, {\n    key: \"append\",\n    value: function append() {\n      for (var _len = arguments.length, children = new Array(_len), _key = 0; _key < _len; _key++) {\n        children[_key] = arguments[_key];\n      }\n\n      for (var _i = 0, _children = children; _i < _children.length; _i++) {\n        var child = _children[_i];\n        var nodes = this.normalize(child, this.last);\n\n        var _iterator2 = _createForOfIteratorHelper(nodes),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var node = _step2.value;\n            this.proxyOf.nodes.push(node);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n\n      this.markDirty();\n      return this;\n    }\n  }, {\n    key: \"prepend\",\n    value: function prepend() {\n      for (var _len2 = arguments.length, children = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        children[_key2] = arguments[_key2];\n      }\n\n      children = children.reverse();\n\n      var _iterator3 = _createForOfIteratorHelper(children),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var child = _step3.value;\n          var nodes = this.normalize(child, this.first, 'prepend').reverse();\n\n          var _iterator4 = _createForOfIteratorHelper(nodes),\n              _step4;\n\n          try {\n            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n              var node = _step4.value;\n              this.proxyOf.nodes.unshift(node);\n            }\n          } catch (err) {\n            _iterator4.e(err);\n          } finally {\n            _iterator4.f();\n          }\n\n          for (var id in this.indexes) {\n            this.indexes[id] = this.indexes[id] + nodes.length;\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      this.markDirty();\n      return this;\n    }\n  }, {\n    key: \"cleanRaws\",\n    value: function cleanRaws(keepBetween) {\n      _get(_getPrototypeOf(Container.prototype), \"cleanRaws\", this).call(this, keepBetween);\n\n      if (this.nodes) {\n        var _iterator5 = _createForOfIteratorHelper(this.nodes),\n            _step5;\n\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var node = _step5.value;\n            node.cleanRaws(keepBetween);\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n      }\n    }\n  }, {\n    key: \"insertBefore\",\n    value: function insertBefore(exist, add) {\n      exist = this.index(exist);\n      var type = exist === 0 ? 'prepend' : false;\n      var nodes = this.normalize(add, this.proxyOf.nodes[exist], type).reverse();\n\n      var _iterator6 = _createForOfIteratorHelper(nodes),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var node = _step6.value;\n          this.proxyOf.nodes.splice(exist, 0, node);\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n\n      var index;\n\n      for (var id in this.indexes) {\n        index = this.indexes[id];\n\n        if (exist <= index) {\n          this.indexes[id] = index + nodes.length;\n        }\n      }\n\n      this.markDirty();\n      return this;\n    }\n  }, {\n    key: \"insertAfter\",\n    value: function insertAfter(exist, add) {\n      exist = this.index(exist);\n      var nodes = this.normalize(add, this.proxyOf.nodes[exist]).reverse();\n\n      var _iterator7 = _createForOfIteratorHelper(nodes),\n          _step7;\n\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var node = _step7.value;\n          this.proxyOf.nodes.splice(exist + 1, 0, node);\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n\n      var index;\n\n      for (var id in this.indexes) {\n        index = this.indexes[id];\n\n        if (exist < index) {\n          this.indexes[id] = index + nodes.length;\n        }\n      }\n\n      this.markDirty();\n      return this;\n    }\n  }, {\n    key: \"removeChild\",\n    value: function removeChild(child) {\n      child = this.index(child);\n      this.proxyOf.nodes[child].parent = undefined;\n      this.proxyOf.nodes.splice(child, 1);\n      var index;\n\n      for (var id in this.indexes) {\n        index = this.indexes[id];\n\n        if (index >= child) {\n          this.indexes[id] = index - 1;\n        }\n      }\n\n      this.markDirty();\n      return this;\n    }\n  }, {\n    key: \"removeAll\",\n    value: function removeAll() {\n      var _iterator8 = _createForOfIteratorHelper(this.proxyOf.nodes),\n          _step8;\n\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var node = _step8.value;\n          node.parent = undefined;\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n\n      this.proxyOf.nodes = [];\n      this.markDirty();\n      return this;\n    }\n  }, {\n    key: \"replaceValues\",\n    value: function replaceValues(pattern, opts, callback) {\n      if (!callback) {\n        callback = opts;\n        opts = {};\n      }\n\n      this.walkDecls(function (decl) {\n        if (opts.props && !opts.props.includes(decl.prop)) return;\n        if (opts.fast && !decl.value.includes(opts.fast)) return;\n        decl.value = decl.value.replace(pattern, callback);\n      });\n      this.markDirty();\n      return this;\n    }\n  }, {\n    key: \"every\",\n    value: function every(condition) {\n      return this.nodes.every(condition);\n    }\n  }, {\n    key: \"some\",\n    value: function some(condition) {\n      return this.nodes.some(condition);\n    }\n  }, {\n    key: \"index\",\n    value: function index(child) {\n      if (typeof child === 'number') return child;\n      if (child.proxyOf) child = child.proxyOf;\n      return this.proxyOf.nodes.indexOf(child);\n    }\n  }, {\n    key: \"first\",\n    get: function get() {\n      if (!this.proxyOf.nodes) return undefined;\n      return this.proxyOf.nodes[0];\n    }\n  }, {\n    key: \"last\",\n    get: function get() {\n      if (!this.proxyOf.nodes) return undefined;\n      return this.proxyOf.nodes[this.proxyOf.nodes.length - 1];\n    }\n  }, {\n    key: \"normalize\",\n    value: function normalize(nodes, sample) {\n      var _this = this;\n\n      if (typeof nodes === 'string') {\n        nodes = cleanSource(parse(nodes).nodes);\n      } else if (Array.isArray(nodes)) {\n        nodes = nodes.slice(0);\n\n        var _iterator9 = _createForOfIteratorHelper(nodes),\n            _step9;\n\n        try {\n          for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n            var i = _step9.value;\n            if (i.parent) i.parent.removeChild(i, 'ignore');\n          }\n        } catch (err) {\n          _iterator9.e(err);\n        } finally {\n          _iterator9.f();\n        }\n      } else if (nodes.type === 'root') {\n        nodes = nodes.nodes.slice(0);\n\n        var _iterator10 = _createForOfIteratorHelper(nodes),\n            _step10;\n\n        try {\n          for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n            var _i2 = _step10.value;\n            if (_i2.parent) _i2.parent.removeChild(_i2, 'ignore');\n          }\n        } catch (err) {\n          _iterator10.e(err);\n        } finally {\n          _iterator10.f();\n        }\n      } else if (nodes.type) {\n        nodes = [nodes];\n      } else if (nodes.prop) {\n        if (typeof nodes.value === 'undefined') {\n          throw new Error('Value field is missed in node creation');\n        } else if (typeof nodes.value !== 'string') {\n          nodes.value = String(nodes.value);\n        }\n\n        nodes = [new Declaration(nodes)];\n      } else if (nodes.selector) {\n        nodes = [new Rule(nodes)];\n      } else if (nodes.name) {\n        nodes = [new AtRule(nodes)];\n      } else if (nodes.text) {\n        nodes = [new Comment(nodes)];\n      } else {\n        throw new Error('Unknown node type in node creation');\n      }\n\n      var processed = nodes.map(function (i) {\n        // istanbul ignore next\n        if (typeof i.markDirty !== 'function') rebuild(i);\n        i = i.proxyOf;\n        if (i.parent) i.parent.removeChild(i);\n        if (i[isClean]) markDirtyUp(i);\n\n        if (typeof i.raws.before === 'undefined') {\n          if (sample && typeof sample.raws.before !== 'undefined') {\n            i.raws.before = sample.raws.before.replace(/\\S/g, '');\n          }\n        }\n\n        i.parent = _this;\n        return i;\n      });\n      return processed;\n    }\n  }, {\n    key: \"getProxyProcessor\",\n    value: function getProxyProcessor() {\n      return {\n        set: function set(node, prop, value) {\n          if (node[prop] === value) return true;\n          node[prop] = value;\n\n          if (prop === 'name' || prop === 'params' || prop === 'selector') {\n            node.markDirty();\n          }\n\n          return true;\n        },\n        get: function get(node, prop) {\n          if (prop === 'proxyOf') {\n            return node;\n          } else if (!node[prop]) {\n            return node[prop];\n          } else if (prop === 'each' || typeof prop === 'string' && prop.startsWith('walk')) {\n            return function () {\n              for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n                args[_key3] = arguments[_key3];\n              }\n\n              return node[prop].apply(node, _toConsumableArray(args.map(function (i) {\n                if (typeof i === 'function') {\n                  return function (child, index) {\n                    return i(child.toProxy(), index);\n                  };\n                } else {\n                  return i;\n                }\n              })));\n            };\n          } else if (prop === 'every' || prop === 'some') {\n            return function (cb) {\n              return node[prop](function (child) {\n                for (var _len4 = arguments.length, other = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n                  other[_key4 - 1] = arguments[_key4];\n                }\n\n                return cb.apply(void 0, [child.toProxy()].concat(other));\n              });\n            };\n          } else if (prop === 'root') {\n            return function () {\n              return node.root().toProxy();\n            };\n          } else if (prop === 'nodes') {\n            return node.nodes.map(function (i) {\n              return i.toProxy();\n            });\n          } else if (prop === 'first' || prop === 'last') {\n            return node[prop].toProxy();\n          } else {\n            return node[prop];\n          }\n        }\n      };\n    }\n  }, {\n    key: \"getIterator\",\n    value: function getIterator() {\n      if (!this.lastEach) this.lastEach = 0;\n      if (!this.indexes) this.indexes = {};\n      this.lastEach += 1;\n      var iterator = this.lastEach;\n      this.indexes[iterator] = 0;\n      return iterator;\n    }\n  }]);\n\n  return Container;\n}(Node);\n\nContainer.registerParse = function (dependant) {\n  parse = dependant;\n};\n\nContainer.registerRule = function (dependant) {\n  Rule = dependant;\n};\n\nContainer.registerAtRule = function (dependant) {\n  AtRule = dependant;\n};\n\nmodule.exports = Container;\nContainer.default = Container;","map":{"version":3,"sources":["/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/sanitize-html/node_modules/postcss/lib/container.js"],"names":["Declaration","require","isClean","Comment","Node","parse","Rule","AtRule","cleanSource","nodes","map","i","source","markDirtyUp","node","proxyOf","rebuild","type","Object","setPrototypeOf","prototype","forEach","child","Container","parent","push","callback","undefined","iterator","getIterator","index","result","indexes","length","each","e","addToError","walk","prop","RegExp","test","selector","name","children","normalize","last","markDirty","reverse","first","unshift","id","keepBetween","cleanRaws","exist","add","splice","pattern","opts","walkDecls","decl","props","includes","fast","value","replace","condition","every","some","indexOf","sample","Array","isArray","slice","removeChild","Error","String","text","processed","raws","before","set","get","startsWith","args","toProxy","cb","other","root","lastEach","registerParse","dependant","registerRule","registerAtRule","module","exports","default"],"mappings":"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","sourcesContent":["'use strict'\n\nlet Declaration = require('./declaration')\nlet { isClean } = require('./symbols')\nlet Comment = require('./comment')\nlet Node = require('./node')\n\nlet parse, Rule, AtRule\n\nfunction cleanSource(nodes) {\n  return nodes.map(i => {\n    if (i.nodes) i.nodes = cleanSource(i.nodes)\n    delete i.source\n    return i\n  })\n}\n\nfunction markDirtyUp(node) {\n  node[isClean] = false\n  if (node.proxyOf.nodes) {\n    for (let i of node.proxyOf.nodes) {\n      markDirtyUp(i)\n    }\n  }\n}\n\n// istanbul ignore next\nfunction rebuild(node) {\n  if (node.type === 'atrule') {\n    Object.setPrototypeOf(node, AtRule.prototype)\n  } else if (node.type === 'rule') {\n    Object.setPrototypeOf(node, Rule.prototype)\n  } else if (node.type === 'decl') {\n    Object.setPrototypeOf(node, Declaration.prototype)\n  } else if (node.type === 'comment') {\n    Object.setPrototypeOf(node, Comment.prototype)\n  }\n\n  if (node.nodes) {\n    node.nodes.forEach(child => {\n      rebuild(child)\n    })\n  }\n}\n\nclass Container extends Node {\n  push(child) {\n    child.parent = this\n    this.proxyOf.nodes.push(child)\n    return this\n  }\n\n  each(callback) {\n    if (!this.proxyOf.nodes) return undefined\n    let iterator = this.getIterator()\n\n    let index, result\n    while (this.indexes[iterator] < this.proxyOf.nodes.length) {\n      index = this.indexes[iterator]\n      result = callback(this.proxyOf.nodes[index], index)\n      if (result === false) break\n\n      this.indexes[iterator] += 1\n    }\n\n    delete this.indexes[iterator]\n    return result\n  }\n\n  walk(callback) {\n    return this.each((child, i) => {\n      let result\n      try {\n        result = callback(child, i)\n      } catch (e) {\n        throw child.addToError(e)\n      }\n      if (result !== false && child.walk) {\n        result = child.walk(callback)\n      }\n\n      return result\n    })\n  }\n\n  walkDecls(prop, callback) {\n    if (!callback) {\n      callback = prop\n      return this.walk((child, i) => {\n        if (child.type === 'decl') {\n          return callback(child, i)\n        }\n      })\n    }\n    if (prop instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'decl' && prop.test(child.prop)) {\n          return callback(child, i)\n        }\n      })\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'decl' && child.prop === prop) {\n        return callback(child, i)\n      }\n    })\n  }\n\n  walkRules(selector, callback) {\n    if (!callback) {\n      callback = selector\n\n      return this.walk((child, i) => {\n        if (child.type === 'rule') {\n          return callback(child, i)\n        }\n      })\n    }\n    if (selector instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'rule' && selector.test(child.selector)) {\n          return callback(child, i)\n        }\n      })\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'rule' && child.selector === selector) {\n        return callback(child, i)\n      }\n    })\n  }\n\n  walkAtRules(name, callback) {\n    if (!callback) {\n      callback = name\n      return this.walk((child, i) => {\n        if (child.type === 'atrule') {\n          return callback(child, i)\n        }\n      })\n    }\n    if (name instanceof RegExp) {\n      return this.walk((child, i) => {\n        if (child.type === 'atrule' && name.test(child.name)) {\n          return callback(child, i)\n        }\n      })\n    }\n    return this.walk((child, i) => {\n      if (child.type === 'atrule' && child.name === name) {\n        return callback(child, i)\n      }\n    })\n  }\n\n  walkComments(callback) {\n    return this.walk((child, i) => {\n      if (child.type === 'comment') {\n        return callback(child, i)\n      }\n    })\n  }\n\n  append(...children) {\n    for (let child of children) {\n      let nodes = this.normalize(child, this.last)\n      for (let node of nodes) this.proxyOf.nodes.push(node)\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  prepend(...children) {\n    children = children.reverse()\n    for (let child of children) {\n      let nodes = this.normalize(child, this.first, 'prepend').reverse()\n      for (let node of nodes) this.proxyOf.nodes.unshift(node)\n      for (let id in this.indexes) {\n        this.indexes[id] = this.indexes[id] + nodes.length\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  cleanRaws(keepBetween) {\n    super.cleanRaws(keepBetween)\n    if (this.nodes) {\n      for (let node of this.nodes) node.cleanRaws(keepBetween)\n    }\n  }\n\n  insertBefore(exist, add) {\n    exist = this.index(exist)\n\n    let type = exist === 0 ? 'prepend' : false\n    let nodes = this.normalize(add, this.proxyOf.nodes[exist], type).reverse()\n    for (let node of nodes) this.proxyOf.nodes.splice(exist, 0, node)\n\n    let index\n    for (let id in this.indexes) {\n      index = this.indexes[id]\n      if (exist <= index) {\n        this.indexes[id] = index + nodes.length\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  insertAfter(exist, add) {\n    exist = this.index(exist)\n\n    let nodes = this.normalize(add, this.proxyOf.nodes[exist]).reverse()\n    for (let node of nodes) this.proxyOf.nodes.splice(exist + 1, 0, node)\n\n    let index\n    for (let id in this.indexes) {\n      index = this.indexes[id]\n      if (exist < index) {\n        this.indexes[id] = index + nodes.length\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  removeChild(child) {\n    child = this.index(child)\n    this.proxyOf.nodes[child].parent = undefined\n    this.proxyOf.nodes.splice(child, 1)\n\n    let index\n    for (let id in this.indexes) {\n      index = this.indexes[id]\n      if (index >= child) {\n        this.indexes[id] = index - 1\n      }\n    }\n\n    this.markDirty()\n\n    return this\n  }\n\n  removeAll() {\n    for (let node of this.proxyOf.nodes) node.parent = undefined\n    this.proxyOf.nodes = []\n\n    this.markDirty()\n\n    return this\n  }\n\n  replaceValues(pattern, opts, callback) {\n    if (!callback) {\n      callback = opts\n      opts = {}\n    }\n\n    this.walkDecls(decl => {\n      if (opts.props && !opts.props.includes(decl.prop)) return\n      if (opts.fast && !decl.value.includes(opts.fast)) return\n\n      decl.value = decl.value.replace(pattern, callback)\n    })\n\n    this.markDirty()\n\n    return this\n  }\n\n  every(condition) {\n    return this.nodes.every(condition)\n  }\n\n  some(condition) {\n    return this.nodes.some(condition)\n  }\n\n  index(child) {\n    if (typeof child === 'number') return child\n    if (child.proxyOf) child = child.proxyOf\n    return this.proxyOf.nodes.indexOf(child)\n  }\n\n  get first() {\n    if (!this.proxyOf.nodes) return undefined\n    return this.proxyOf.nodes[0]\n  }\n\n  get last() {\n    if (!this.proxyOf.nodes) return undefined\n    return this.proxyOf.nodes[this.proxyOf.nodes.length - 1]\n  }\n\n  normalize(nodes, sample) {\n    if (typeof nodes === 'string') {\n      nodes = cleanSource(parse(nodes).nodes)\n    } else if (Array.isArray(nodes)) {\n      nodes = nodes.slice(0)\n      for (let i of nodes) {\n        if (i.parent) i.parent.removeChild(i, 'ignore')\n      }\n    } else if (nodes.type === 'root') {\n      nodes = nodes.nodes.slice(0)\n      for (let i of nodes) {\n        if (i.parent) i.parent.removeChild(i, 'ignore')\n      }\n    } else if (nodes.type) {\n      nodes = [nodes]\n    } else if (nodes.prop) {\n      if (typeof nodes.value === 'undefined') {\n        throw new Error('Value field is missed in node creation')\n      } else if (typeof nodes.value !== 'string') {\n        nodes.value = String(nodes.value)\n      }\n      nodes = [new Declaration(nodes)]\n    } else if (nodes.selector) {\n      nodes = [new Rule(nodes)]\n    } else if (nodes.name) {\n      nodes = [new AtRule(nodes)]\n    } else if (nodes.text) {\n      nodes = [new Comment(nodes)]\n    } else {\n      throw new Error('Unknown node type in node creation')\n    }\n\n    let processed = nodes.map(i => {\n      // istanbul ignore next\n      if (typeof i.markDirty !== 'function') rebuild(i)\n      i = i.proxyOf\n      if (i.parent) i.parent.removeChild(i)\n      if (i[isClean]) markDirtyUp(i)\n      if (typeof i.raws.before === 'undefined') {\n        if (sample && typeof sample.raws.before !== 'undefined') {\n          i.raws.before = sample.raws.before.replace(/\\S/g, '')\n        }\n      }\n      i.parent = this\n      return i\n    })\n\n    return processed\n  }\n\n  getProxyProcessor() {\n    return {\n      set(node, prop, value) {\n        if (node[prop] === value) return true\n        node[prop] = value\n        if (prop === 'name' || prop === 'params' || prop === 'selector') {\n          node.markDirty()\n        }\n        return true\n      },\n\n      get(node, prop) {\n        if (prop === 'proxyOf') {\n          return node\n        } else if (!node[prop]) {\n          return node[prop]\n        } else if (\n          prop === 'each' ||\n          (typeof prop === 'string' && prop.startsWith('walk'))\n        ) {\n          return (...args) => {\n            return node[prop](\n              ...args.map(i => {\n                if (typeof i === 'function') {\n                  return (child, index) => i(child.toProxy(), index)\n                } else {\n                  return i\n                }\n              })\n            )\n          }\n        } else if (prop === 'every' || prop === 'some') {\n          return cb => {\n            return node[prop]((child, ...other) =>\n              cb(child.toProxy(), ...other)\n            )\n          }\n        } else if (prop === 'root') {\n          return () => node.root().toProxy()\n        } else if (prop === 'nodes') {\n          return node.nodes.map(i => i.toProxy())\n        } else if (prop === 'first' || prop === 'last') {\n          return node[prop].toProxy()\n        } else {\n          return node[prop]\n        }\n      }\n    }\n  }\n\n  getIterator() {\n    if (!this.lastEach) this.lastEach = 0\n    if (!this.indexes) this.indexes = {}\n\n    this.lastEach += 1\n    let iterator = this.lastEach\n    this.indexes[iterator] = 0\n\n    return iterator\n  }\n}\n\nContainer.registerParse = dependant => {\n  parse = dependant\n}\n\nContainer.registerRule = dependant => {\n  Rule = dependant\n}\n\nContainer.registerAtRule = dependant => {\n  AtRule = dependant\n}\n\nmodule.exports = Container\nContainer.default = Container\n"]},"metadata":{},"sourceType":"script"}