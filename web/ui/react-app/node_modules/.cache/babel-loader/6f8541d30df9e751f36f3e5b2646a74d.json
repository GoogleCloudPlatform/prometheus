{"ast":null,"code":"import _createForOfIteratorHelper from \"/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _inherits from \"/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { NodeProp, Tree, TreeFragment, NodeType } from 'lezer-tree';\nimport { Text, countColumn as _countColumn } from '@codemirror/text';\nimport { Facet, EditorState, StateEffect, StateField, Transaction } from '@codemirror/state';\nimport { ViewPlugin } from '@codemirror/view';\n/**\nNode prop stored in a grammar's top syntax node to provide the\nfacet that stores language data for that language.\n*/\n\nvar languageDataProp = new NodeProp();\n/**\nHelper function to define a facet (to be added to the top syntax\nnode(s) for a language via\n[`languageDataProp`](https://codemirror.net/6/docs/ref/#language.languageDataProp)), that will be\nused to associate language data with the language. You\nprobably only need this when subclassing\n[`Language`](https://codemirror.net/6/docs/ref/#language.Language).\n*/\n\nfunction defineLanguageFacet(baseData) {\n  return Facet.define({\n    combine: baseData ? function (values) {\n      return values.concat(baseData);\n    } : undefined\n  });\n}\n/**\nA language object manages parsing and per-language\n[metadata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt). Parse data is\nmanaged as a [Lezer](https://lezer.codemirror.net) tree. You'll\nwant to subclass this class for custom parsers, or use the\n[`LezerLanguage`](https://codemirror.net/6/docs/ref/#language.LezerLanguage) or\n[`StreamLanguage`](https://codemirror.net/6/docs/ref/#stream-parser.StreamLanguage) abstractions for\n[Lezer](https://lezer.codemirror.net/) or stream parsers.\n*/\n\n\nvar Language = /*#__PURE__*/function () {\n  /**\n  Construct a language object. You usually don't need to invoke\n  this directly. But when you do, make sure you use\n  [`defineLanguageFacet`](https://codemirror.net/6/docs/ref/#language.defineLanguageFacet) to create\n  the first argument.\n  */\n  function Language(\n  /**\n  The [language data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) data\n  facet used for this language.\n  */\n  data, parser,\n  /**\n  The node type of the top node of trees produced by this parser.\n  */\n  topNode) {\n    var extraExtensions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n\n    _classCallCheck(this, Language);\n\n    this.data = data;\n    this.topNode = topNode; // Kludge to define EditorState.tree as a debugging helper,\n    // without the EditorState package actually knowing about\n    // languages and lezer trees.\n\n    if (!EditorState.prototype.hasOwnProperty(\"tree\")) Object.defineProperty(EditorState.prototype, \"tree\", {\n      get: function get() {\n        return syntaxTree(this);\n      }\n    });\n    this.parser = parser;\n    this.extension = [language.of(this), EditorState.languageData.of(function (state, pos) {\n      return state.facet(languageDataFacetAt(state, pos));\n    })].concat(extraExtensions);\n  }\n  /**\n  Query whether this language is active at the given position.\n  */\n\n\n  _createClass(Language, [{\n    key: \"isActiveAt\",\n    value: function isActiveAt(state, pos) {\n      return languageDataFacetAt(state, pos) == this.data;\n    }\n    /**\n    Find the document regions that were parsed using this language.\n    The returned regions will _include_ any nested languages rooted\n    in this language, when those exist.\n    */\n\n  }, {\n    key: \"findRegions\",\n    value: function findRegions(state) {\n      var _this = this;\n\n      var lang = state.facet(language);\n      if ((lang === null || lang === void 0 ? void 0 : lang.data) == this.data) return [{\n        from: 0,\n        to: state.doc.length\n      }];\n      if (!lang || !lang.allowsNesting) return [];\n      var result = [];\n      syntaxTree(state).iterate({\n        enter: function enter(type, from, to) {\n          if (type.isTop && type.prop(languageDataProp) == _this.data) {\n            result.push({\n              from: from,\n              to: to\n            });\n            return false;\n          }\n\n          return undefined;\n        }\n      });\n      return result;\n    }\n    /**\n    Indicates whether this language allows nested languages. The\n    default implementation returns true.\n    */\n\n  }, {\n    key: \"allowsNesting\",\n    get: function get() {\n      return true;\n    }\n    /**\n    Use this language to parse the given string into a tree.\n    */\n\n  }, {\n    key: \"parseString\",\n    value: function parseString(code) {\n      var doc = Text.of(code.split(\"\\n\"));\n      var parse = this.parser.startParse(new DocInput(doc), 0, new EditorParseContext(this.parser, EditorState.create({\n        doc: doc\n      }), [], Tree.empty, {\n        from: 0,\n        to: code.length\n      }, [], null));\n      var tree;\n\n      while (!(tree = parse.advance())) {}\n\n      return tree;\n    }\n  }]);\n\n  return Language;\n}();\n/**\n@internal\n*/\n\n\nLanguage.setState = StateEffect.define();\n\nfunction languageDataFacetAt(state, pos) {\n  var topLang = state.facet(language);\n  if (!topLang) return null;\n  if (!topLang.allowsNesting) return topLang.data;\n  var tree = syntaxTree(state);\n  var target = tree.resolve(pos, -1);\n\n  while (target) {\n    var facet = target.type.prop(languageDataProp);\n    if (facet) return facet;\n    target = target.parent;\n  }\n\n  return topLang.data;\n}\n/**\nA subclass of [`Language`](https://codemirror.net/6/docs/ref/#language.Language) for use with\n[Lezer](https://lezer.codemirror.net/docs/ref#lezer.Parser)\nparsers.\n*/\n\n\nvar LezerLanguage = /*#__PURE__*/function (_Language) {\n  _inherits(LezerLanguage, _Language);\n\n  var _super = _createSuper(LezerLanguage);\n\n  function LezerLanguage(data, parser) {\n    var _this2;\n\n    _classCallCheck(this, LezerLanguage);\n\n    _this2 = _super.call(this, data, parser, parser.topNode);\n    _this2.parser = parser;\n    return _this2;\n  }\n  /**\n  Define a language from a parser.\n  */\n\n\n  _createClass(LezerLanguage, [{\n    key: \"configure\",\n    value:\n    /**\n    Create a new instance of this language with a reconfigured\n    version of its parser.\n    */\n    function configure(options) {\n      return new LezerLanguage(this.data, this.parser.configure(options));\n    }\n  }, {\n    key: \"allowsNesting\",\n    get: function get() {\n      return this.parser.hasNested;\n    }\n  }], [{\n    key: \"define\",\n    value: function define(spec) {\n      var data = defineLanguageFacet(spec.languageData);\n      return new LezerLanguage(data, spec.parser.configure({\n        props: [languageDataProp.add(function (type) {\n          return type.isTop ? data : undefined;\n        })]\n      }));\n    }\n  }]);\n\n  return LezerLanguage;\n}(Language);\n/**\nGet the syntax tree for a state, which is the current (possibly\nincomplete) parse tree of active [language](https://codemirror.net/6/docs/ref/#language.Language),\nor the empty tree if there is no language available.\n*/\n\n\nfunction syntaxTree(state) {\n  var field = state.field(Language.state, false);\n  return field ? field.tree : Tree.empty;\n}\n/**\nTry to get a parse tree that spans at least up to `upto`. The\nmethod will do at most `timeout` milliseconds of work to parse\nup to that point if the tree isn't already available.\n*/\n\n\nfunction ensureSyntaxTree(state, upto) {\n  var timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 50;\n\n  var _a;\n\n  var parse = (_a = state.field(Language.state, false)) === null || _a === void 0 ? void 0 : _a.context;\n  return !parse ? null : parse.tree.length >= upto || parse.work(timeout, upto) ? parse.tree : null;\n} // Lezer-style Input object for a Text document.\n\n\nvar DocInput = /*#__PURE__*/function () {\n  function DocInput(doc) {\n    var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : doc.length;\n\n    _classCallCheck(this, DocInput);\n\n    this.doc = doc;\n    this.length = length;\n    this.cursorPos = 0;\n    this.string = \"\";\n    this.prevString = \"\";\n    this.cursor = doc.iter();\n  }\n\n  _createClass(DocInput, [{\n    key: \"syncTo\",\n    value: function syncTo(pos) {\n      if (pos < this.cursorPos) {\n        // Reset the cursor if we have to go back\n        this.cursor = this.doc.iter();\n        this.cursorPos = 0;\n      }\n\n      this.prevString = pos == this.cursorPos ? this.string : \"\";\n      this.string = this.cursor.next(pos - this.cursorPos).value;\n      this.cursorPos = pos + this.string.length;\n      return this.cursorPos - this.string.length;\n    }\n  }, {\n    key: \"get\",\n    value: function get(pos) {\n      if (pos >= this.length) return -1;\n      var stringStart = this.cursorPos - this.string.length;\n\n      if (pos < stringStart || pos >= this.cursorPos) {\n        if (pos < stringStart && pos >= stringStart - this.prevString.length) return this.prevString.charCodeAt(pos - (stringStart - this.prevString.length));\n        stringStart = this.syncTo(pos);\n      }\n\n      return this.string.charCodeAt(pos - stringStart);\n    }\n  }, {\n    key: \"lineAfter\",\n    value: function lineAfter(pos) {\n      if (pos >= this.length || pos < 0) return \"\";\n      var stringStart = this.cursorPos - this.string.length;\n      if (pos < stringStart || pos >= this.cursorPos) stringStart = this.syncTo(pos);\n      return this.cursor.lineBreak ? \"\" : this.string.slice(pos - stringStart, Math.min(this.length - stringStart, this.string.length));\n    }\n  }, {\n    key: \"read\",\n    value: function read(from, to) {\n      var stringStart = this.cursorPos - this.string.length;\n      if (from < stringStart || to >= this.cursorPos) return this.doc.sliceString(from, to);else return this.string.slice(from - stringStart, to - stringStart);\n    }\n  }, {\n    key: \"clip\",\n    value: function clip(at) {\n      return new DocInput(this.doc, at);\n    }\n  }]);\n\n  return DocInput;\n}();\n/**\nA parse context provided to parsers working on the editor content.\n*/\n\n\nvar EditorParseContext = /*#__PURE__*/function () {\n  /**\n  @internal\n  */\n  function EditorParseContext(parser,\n  /**\n  The current editor state.\n  */\n  state) {\n    var fragments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    var\n    /**\n    @internal\n    */\n    tree = arguments.length > 3 ? arguments[3] : undefined;\n    var\n    /**\n    The current editor viewport (or some overapproximation\n    thereof). Intended to be used for opportunistically avoiding\n    work (in which case\n    [`skipUntilInView`](https://codemirror.net/6/docs/ref/#language.EditorParseContext.skipUntilInView)\n    should be called to make sure the parser is restarted when the\n    skipped region becomes visible).\n    */\n    viewport = arguments.length > 4 ? arguments[4] : undefined;\n    var\n    /**\n    @internal\n    */\n    skipped = arguments.length > 5 ? arguments[5] : undefined;\n    var\n    /**\n    This is where skipping parsers can register a promise that,\n    when resolved, will schedule a new parse. It is cleared when\n    the parse worker picks up the promise. @internal\n    */\n    scheduleOn = arguments.length > 6 ? arguments[6] : undefined;\n\n    _classCallCheck(this, EditorParseContext);\n\n    this.parser = parser;\n    this.state = state;\n    this.fragments = fragments;\n    this.tree = tree;\n    this.viewport = viewport;\n    this.skipped = skipped;\n    this.scheduleOn = scheduleOn;\n    this.parse = null;\n    /**\n    @internal\n    */\n\n    this.tempSkipped = [];\n  }\n  /**\n  @internal\n  */\n\n\n  _createClass(EditorParseContext, [{\n    key: \"work\",\n    value: function work(time, upto) {\n      if (this.tree != Tree.empty && (upto == null ? this.tree.length == this.state.doc.length : this.tree.length >= upto)) {\n        this.takeTree();\n        return true;\n      }\n\n      if (!this.parse) this.parse = this.parser.startParse(new DocInput(this.state.doc), 0, this);\n      var endTime = Date.now() + time;\n\n      for (;;) {\n        var done = this.parse.advance();\n\n        if (done) {\n          this.fragments = this.withoutTempSkipped(TreeFragment.addTree(done));\n          this.parse = null;\n          this.tree = done;\n          return true;\n        } else if (upto != null && this.parse.pos >= upto) {\n          this.takeTree();\n          return true;\n        }\n\n        if (Date.now() > endTime) return false;\n      }\n    }\n    /**\n    @internal\n    */\n\n  }, {\n    key: \"takeTree\",\n    value: function takeTree() {\n      if (this.parse && this.parse.pos > this.tree.length) {\n        this.tree = this.parse.forceFinish();\n        this.fragments = this.withoutTempSkipped(TreeFragment.addTree(this.tree, this.fragments, true));\n      }\n    }\n  }, {\n    key: \"withoutTempSkipped\",\n    value: function withoutTempSkipped(fragments) {\n      for (var r; r = this.tempSkipped.pop();) {\n        fragments = cutFragments(fragments, r.from, r.to);\n      }\n\n      return fragments;\n    }\n    /**\n    @internal\n    */\n\n  }, {\n    key: \"changes\",\n    value: function changes(_changes, newState) {\n      var fragments = this.fragments,\n          tree = this.tree,\n          viewport = this.viewport,\n          skipped = this.skipped;\n      this.takeTree();\n\n      if (!_changes.empty) {\n        var ranges = [];\n\n        _changes.iterChangedRanges(function (fromA, toA, fromB, toB) {\n          return ranges.push({\n            fromA: fromA,\n            toA: toA,\n            fromB: fromB,\n            toB: toB\n          });\n        });\n\n        fragments = TreeFragment.applyChanges(fragments, ranges);\n        tree = Tree.empty;\n        viewport = {\n          from: _changes.mapPos(viewport.from, -1),\n          to: _changes.mapPos(viewport.to, 1)\n        };\n\n        if (this.skipped.length) {\n          skipped = [];\n\n          var _iterator = _createForOfIteratorHelper(this.skipped),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var r = _step.value;\n\n              var from = _changes.mapPos(r.from, 1),\n                  to = _changes.mapPos(r.to, -1);\n\n              if (from < to) skipped.push({\n                from: from,\n                to: to\n              });\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        }\n      }\n\n      return new EditorParseContext(this.parser, newState, fragments, tree, viewport, skipped, this.scheduleOn);\n    }\n    /**\n    @internal\n    */\n\n  }, {\n    key: \"updateViewport\",\n    value: function updateViewport(viewport) {\n      this.viewport = viewport;\n      var startLen = this.skipped.length;\n\n      for (var i = 0; i < this.skipped.length; i++) {\n        var _this$skipped$i = this.skipped[i],\n            from = _this$skipped$i.from,\n            to = _this$skipped$i.to;\n\n        if (from < viewport.to && to > viewport.from) {\n          this.fragments = cutFragments(this.fragments, from, to);\n          this.skipped.splice(i--, 1);\n        }\n      }\n\n      return this.skipped.length < startLen;\n    }\n    /**\n    @internal\n    */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      if (this.parse) {\n        this.takeTree();\n        this.parse = null;\n      }\n    }\n    /**\n    Notify the parse scheduler that the given region was skipped\n    because it wasn't in view, and the parse should be restarted\n    when it comes into view.\n    */\n\n  }, {\n    key: \"skipUntilInView\",\n    value: function skipUntilInView(from, to) {\n      this.skipped.push({\n        from: from,\n        to: to\n      });\n    }\n    /**\n    Returns a parser intended to be used as placeholder when\n    asynchronously loading a nested parser. It'll skip its input and\n    mark it as not-really-parsed, so that the next update will parse\n    it again.\n    \n    When `until` is given, a reparse will be scheduled when that\n    promise resolves.\n    */\n\n  }, {\n    key: \"movedPast\",\n    value:\n    /**\n    @internal\n    */\n    function movedPast(pos) {\n      return this.tree.length < pos && this.parse && this.parse.pos >= pos;\n    }\n  }], [{\n    key: \"getSkippingParser\",\n    value: function getSkippingParser(until) {\n      return {\n        startParse: function startParse(input, startPos, context) {\n          return {\n            pos: startPos,\n            advance: function advance() {\n              var ecx = context;\n              ecx.tempSkipped.push({\n                from: startPos,\n                to: input.length\n              });\n              if (until) ecx.scheduleOn = ecx.scheduleOn ? Promise.all([ecx.scheduleOn, until]) : until;\n              this.pos = input.length;\n              return new Tree(NodeType.none, [], [], input.length - startPos);\n            },\n            forceFinish: function forceFinish() {\n              return this.advance();\n            }\n          };\n        }\n      };\n    }\n  }]);\n\n  return EditorParseContext;\n}();\n/**\nFIXME backwards compatible shim, remove on next major @internal\n*/\n\n\nEditorParseContext.skippingParser = EditorParseContext.getSkippingParser();\n\nfunction cutFragments(fragments, from, to) {\n  return TreeFragment.applyChanges(fragments, [{\n    fromA: from,\n    toA: to,\n    fromB: from,\n    toB: to\n  }]);\n}\n\nvar LanguageState = /*#__PURE__*/function () {\n  function LanguageState( // A mutable parse state that is used to preserve work done during\n  // the lifetime of a state when moving to the next state.\n  context) {\n    _classCallCheck(this, LanguageState);\n\n    this.context = context;\n    this.tree = context.tree;\n  }\n\n  _createClass(LanguageState, [{\n    key: \"apply\",\n    value: function apply(tr) {\n      if (!tr.docChanged) return this;\n      var newCx = this.context.changes(tr.changes, tr.state); // If the previous parse wasn't done, go forward only up to its\n      // end position or the end of the viewport, to avoid slowing down\n      // state updates with parse work beyond the viewport.\n\n      var upto = this.context.tree.length == tr.startState.doc.length ? undefined : Math.max(tr.changes.mapPos(this.context.tree.length), newCx.viewport.to);\n      if (!newCx.work(25\n      /* Apply */\n      , upto)) newCx.takeTree();\n      return new LanguageState(newCx);\n    }\n  }], [{\n    key: \"init\",\n    value: function init(state) {\n      var parseState = new EditorParseContext(state.facet(language).parser, state, [], Tree.empty, {\n        from: 0,\n        to: state.doc.length\n      }, [], null);\n      if (!parseState.work(25\n      /* Apply */\n      )) parseState.takeTree();\n      return new LanguageState(parseState);\n    }\n  }]);\n\n  return LanguageState;\n}();\n\nLanguage.state = StateField.define({\n  create: LanguageState.init,\n  update: function update(value, tr) {\n    var _iterator2 = _createForOfIteratorHelper(tr.effects),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var e = _step2.value;\n        if (e.is(Language.setState)) return e.value;\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    if (tr.startState.facet(language) != tr.state.facet(language)) return LanguageState.init(tr.state);\n    return value.apply(tr);\n  }\n});\n\nvar requestIdle = typeof window != \"undefined\" && window.requestIdleCallback || function (callback, _ref) {\n  var timeout = _ref.timeout;\n  return setTimeout(callback, timeout);\n};\n\nvar cancelIdle = typeof window != \"undefined\" && window.cancelIdleCallback || clearTimeout;\nvar parseWorker = ViewPlugin.fromClass( /*#__PURE__*/function () {\n  function ParseWorker(view) {\n    _classCallCheck(this, ParseWorker);\n\n    this.view = view;\n    this.working = -1; // End of the current time chunk\n\n    this.chunkEnd = -1; // Milliseconds of budget left for this chunk\n\n    this.chunkBudget = -1;\n    this.work = this.work.bind(this);\n    this.scheduleWork();\n  }\n\n  _createClass(ParseWorker, [{\n    key: \"update\",\n    value: function update(_update) {\n      var cx = this.view.state.field(Language.state).context;\n\n      if (_update.viewportChanged) {\n        if (cx.updateViewport(_update.view.viewport)) cx.reset();\n        if (this.view.viewport.to > cx.tree.length) this.scheduleWork();\n      }\n\n      if (_update.docChanged) {\n        if (this.view.hasFocus) this.chunkBudget += 50\n        /* ChangeBonus */\n        ;\n        this.scheduleWork();\n      }\n\n      this.checkAsyncSchedule(cx);\n    }\n  }, {\n    key: \"scheduleWork\",\n    value: function scheduleWork() {\n      var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      if (this.working > -1) return;\n      var state = this.view.state,\n          field = state.field(Language.state);\n      if (!force && field.tree.length >= state.doc.length) return;\n      this.working = requestIdle(this.work, {\n        timeout: 500\n        /* Pause */\n\n      });\n    }\n  }, {\n    key: \"work\",\n    value: function work(deadline) {\n      this.working = -1;\n      var now = Date.now();\n\n      if (this.chunkEnd < now && (this.chunkEnd < 0 || this.view.hasFocus)) {\n        // Start a new chunk\n        this.chunkEnd = now + 30000\n        /* ChunkTime */\n        ;\n        this.chunkBudget = 3000\n        /* ChunkBudget */\n        ;\n      }\n\n      if (this.chunkBudget <= 0) return; // No more budget\n\n      var _this$view = this.view,\n          state = _this$view.state,\n          vpTo = _this$view.viewport.to,\n          field = state.field(Language.state);\n      if (field.tree.length >= vpTo + 1000000\n      /* MaxParseAhead */\n      ) return;\n      var time = Math.min(this.chunkBudget, deadline ? Math.max(25\n      /* MinSlice */\n      , deadline.timeRemaining()) : 100\n      /* Slice */\n      );\n      var done = field.context.work(time, vpTo + 1000000\n      /* MaxParseAhead */\n      );\n      this.chunkBudget -= Date.now() - now;\n\n      if (done || this.chunkBudget <= 0 || field.context.movedPast(vpTo)) {\n        field.context.takeTree();\n        this.view.dispatch({\n          effects: Language.setState.of(new LanguageState(field.context))\n        });\n      }\n\n      if (!done && this.chunkBudget > 0) this.scheduleWork();\n      this.checkAsyncSchedule(field.context);\n    }\n  }, {\n    key: \"checkAsyncSchedule\",\n    value: function checkAsyncSchedule(cx) {\n      var _this3 = this;\n\n      if (cx.scheduleOn) {\n        cx.scheduleOn.then(function () {\n          return _this3.scheduleWork(true);\n        });\n        cx.scheduleOn = null;\n      }\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (this.working >= 0) cancelIdle(this.working);\n    }\n  }]);\n\n  return ParseWorker;\n}(), {\n  eventHandlers: {\n    focus: function focus() {\n      this.scheduleWork();\n    }\n  }\n});\n/**\nThe facet used to associate a language with an editor state.\n*/\n\nvar language = Facet.define({\n  combine: function combine(languages) {\n    return languages.length ? languages[0] : null;\n  },\n  enables: [Language.state, parseWorker]\n});\n/**\nThis class bundles a [language object](https://codemirror.net/6/docs/ref/#language.Language) with an\noptional set of supporting extensions. Language packages are\nencouraged to export a function that optionally takes a\nconfiguration object and returns a `LanguageSupport` instance, as\nthe main way for client code to use the package.\n*/\n\nvar LanguageSupport =\n/**\nCreate a support object.\n*/\nfunction LanguageSupport(\n/**\nThe language object.\n*/\nlanguage) {\n  var support = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n  _classCallCheck(this, LanguageSupport);\n\n  this.language = language;\n  this.support = support;\n  this.extension = [language, support];\n};\n/**\nLanguage descriptions are used to store metadata about languages\nand to dynamically load them. Their main role is finding the\nappropriate language for a filename or dynamically loading nested\nparsers.\n*/\n\n\nvar LanguageDescription = /*#__PURE__*/function () {\n  function LanguageDescription(\n  /**\n  The name of this language.\n  */\n  name,\n  /**\n  Alternative names for the mode (lowercased, includes `this.name`).\n  */\n  alias,\n  /**\n  File extensions associated with this language.\n  */\n  extensions,\n  /**\n  Optional filename pattern that should be associated with this\n  language.\n  */\n  filename, loadFunc) {\n    _classCallCheck(this, LanguageDescription);\n\n    this.name = name;\n    this.alias = alias;\n    this.extensions = extensions;\n    this.filename = filename;\n    this.loadFunc = loadFunc;\n    /**\n    If the language has been loaded, this will hold its value.\n    */\n\n    this.support = undefined;\n    this.loading = null;\n  }\n  /**\n  Start loading the the language. Will return a promise that\n  resolves to a [`LanguageSupport`](https://codemirror.net/6/docs/ref/#language.LanguageSupport)\n  object when the language successfully loads.\n  */\n\n\n  _createClass(LanguageDescription, [{\n    key: \"load\",\n    value: function load() {\n      var _this4 = this;\n\n      return this.loading || (this.loading = this.loadFunc().then(function (support) {\n        return _this4.support = support;\n      }, function (err) {\n        _this4.loading = null;\n        throw err;\n      }));\n    }\n    /**\n    Create a language description.\n    */\n\n  }], [{\n    key: \"of\",\n    value: function of(spec) {\n      return new LanguageDescription(spec.name, (spec.alias || []).concat(spec.name).map(function (s) {\n        return s.toLowerCase();\n      }), spec.extensions || [], spec.filename, spec.load);\n    }\n    /**\n    Look for a language in the given array of descriptions that\n    matches the filename. Will first match\n    [`filename`](https://codemirror.net/6/docs/ref/#language.LanguageDescription.filename) patterns,\n    and then [extensions](https://codemirror.net/6/docs/ref/#language.LanguageDescription.extensions),\n    and return the first language that matches.\n    */\n\n  }, {\n    key: \"matchFilename\",\n    value: function matchFilename(descs, filename) {\n      var _iterator3 = _createForOfIteratorHelper(descs),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var _d = _step3.value;\n          if (_d.filename && _d.filename.test(filename)) return _d;\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      var ext = /\\.([^.]+)$/.exec(filename);\n\n      if (ext) {\n        var _iterator4 = _createForOfIteratorHelper(descs),\n            _step4;\n\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var d = _step4.value;\n            if (d.extensions.indexOf(ext[1]) > -1) return d;\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n      }\n\n      return null;\n    }\n    /**\n    Look for a language whose name or alias matches the the given\n    name (case-insensitively). If `fuzzy` is true, and no direct\n    matchs is found, this'll also search for a language whose name\n    or alias occurs in the string (for names shorter than three\n    characters, only when surrounded by non-word characters).\n    */\n\n  }, {\n    key: \"matchLanguageName\",\n    value: function matchLanguageName(descs, name) {\n      var fuzzy = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      name = name.toLowerCase();\n\n      var _iterator5 = _createForOfIteratorHelper(descs),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var _d2 = _step5.value;\n          if (_d2.alias.some(function (a) {\n            return a == name;\n          })) return _d2;\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n\n      if (fuzzy) {\n        var _iterator6 = _createForOfIteratorHelper(descs),\n            _step6;\n\n        try {\n          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n            var d = _step6.value;\n\n            var _iterator7 = _createForOfIteratorHelper(d.alias),\n                _step7;\n\n            try {\n              for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n                var a = _step7.value;\n                var found = name.indexOf(a);\n                if (found > -1 && (a.length > 2 || !/\\w/.test(name[found - 1]) && !/\\w/.test(name[found + a.length]))) return d;\n              }\n            } catch (err) {\n              _iterator7.e(err);\n            } finally {\n              _iterator7.f();\n            }\n          }\n        } catch (err) {\n          _iterator6.e(err);\n        } finally {\n          _iterator6.f();\n        }\n      }\n\n      return null;\n    }\n  }]);\n\n  return LanguageDescription;\n}();\n/**\nFacet that defines a way to provide a function that computes the\nappropriate indentation depth at the start of a given line, or\n`null` to indicate no appropriate indentation could be determined.\n*/\n\n\nvar indentService = Facet.define();\n/**\nFacet for overriding the unit by which indentation happens.\nShould be a string consisting either entirely of spaces or\nentirely of tabs. When not set, this defaults to 2 spaces.\n*/\n\nvar indentUnit = Facet.define({\n  combine: function combine(values) {\n    if (!values.length) return \"  \";\n    if (!/^(?: +|\\t+)$/.test(values[0])) throw new Error(\"Invalid indent unit: \" + JSON.stringify(values[0]));\n    return values[0];\n  }\n});\n/**\nReturn the _column width_ of an indent unit in the state.\nDetermined by the [`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit)\nfacet, and [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) when that\ncontains tabs.\n*/\n\nfunction getIndentUnit(state) {\n  var unit = state.facet(indentUnit);\n  return unit.charCodeAt(0) == 9 ? state.tabSize * unit.length : unit.length;\n}\n/**\nCreate an indentation string that covers columns 0 to `cols`.\nWill use tabs for as much of the columns as possible when the\n[`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit) facet contains\ntabs.\n*/\n\n\nfunction indentString(state, cols) {\n  var result = \"\",\n      ts = state.tabSize;\n  if (state.facet(indentUnit).charCodeAt(0) == 9) while (cols >= ts) {\n    result += \"\\t\";\n    cols -= ts;\n  }\n\n  for (var i = 0; i < cols; i++) {\n    result += \" \";\n  }\n\n  return result;\n}\n/**\nGet the indentation at the given position. Will first consult any\n[indent services](https://codemirror.net/6/docs/ref/#language.indentService) that are registered,\nand if none of those return an indentation, this will check the\nsyntax tree for the [indent node prop](https://codemirror.net/6/docs/ref/#language.indentNodeProp)\nand use that if found. Returns a number when an indentation could\nbe determined, and null otherwise.\n*/\n\n\nfunction getIndentation(context, pos) {\n  if (context instanceof EditorState) context = new IndentContext(context);\n\n  var _iterator8 = _createForOfIteratorHelper(context.state.facet(indentService)),\n      _step8;\n\n  try {\n    for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n      var service = _step8.value;\n      var result = service(context, pos);\n      if (result != null) return result;\n    }\n  } catch (err) {\n    _iterator8.e(err);\n  } finally {\n    _iterator8.f();\n  }\n\n  var tree = syntaxTree(context.state);\n  return tree ? syntaxIndentation(context, tree, pos) : null;\n}\n/**\nIndentation contexts are used when calling [indentation\nservices](https://codemirror.net/6/docs/ref/#language.indentService). They provide helper utilities\nuseful in indentation logic, and can selectively override the\nindentation reported for some lines.\n*/\n\n\nvar IndentContext = /*#__PURE__*/function () {\n  /**\n  Create an indent context.\n  */\n  function IndentContext(\n  /**\n  The editor state.\n  */\n  state) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, IndentContext);\n\n    this.state = state;\n    this.options = options;\n    this.unit = getIndentUnit(state);\n  }\n  /**\n  Get the text directly after `pos`, either the entire line\n  or the next 100 characters, whichever is shorter.\n  */\n\n\n  _createClass(IndentContext, [{\n    key: \"textAfterPos\",\n    value: function textAfterPos(pos) {\n      var _a, _b;\n\n      var sim = (_a = this.options) === null || _a === void 0 ? void 0 : _a.simulateBreak;\n      if (pos == sim && ((_b = this.options) === null || _b === void 0 ? void 0 : _b.simulateDoubleBreak)) return \"\";\n      return this.state.sliceDoc(pos, Math.min(pos + 100, sim != null && sim > pos ? sim : 1e9, this.state.doc.lineAt(pos).to));\n    }\n    /**\n    Find the column for the given position.\n    */\n\n  }, {\n    key: \"column\",\n    value: function column(pos) {\n      var _a;\n\n      var line = this.state.doc.lineAt(pos),\n          text = line.text.slice(0, pos - line.from);\n      var result = this.countColumn(text, pos - line.from);\n      var override = ((_a = this.options) === null || _a === void 0 ? void 0 : _a.overrideIndentation) ? this.options.overrideIndentation(line.from) : -1;\n      if (override > -1) result += override - this.countColumn(text, text.search(/\\S/));\n      return result;\n    }\n    /**\n    find the column position (taking tabs into account) of the given\n    position in the given string.\n    */\n\n  }, {\n    key: \"countColumn\",\n    value: function countColumn(line, pos) {\n      return _countColumn(pos < 0 ? line : line.slice(0, pos), 0, this.state.tabSize);\n    }\n    /**\n    Find the indentation column of the given document line.\n    */\n\n  }, {\n    key: \"lineIndent\",\n    value: function lineIndent(line) {\n      var _a;\n\n      var override = (_a = this.options) === null || _a === void 0 ? void 0 : _a.overrideIndentation;\n\n      if (override) {\n        var overriden = override(line.from);\n        if (overriden > -1) return overriden;\n      }\n\n      return this.countColumn(line.text, line.text.search(/\\S/));\n    }\n  }]);\n\n  return IndentContext;\n}();\n/**\nA syntax tree node prop used to associate indentation strategies\nwith node types. Such a strategy is a function from an indentation\ncontext to a column number or null, where null indicates that no\ndefinitive indentation can be determined.\n*/\n\n\nvar indentNodeProp = new NodeProp(); // Compute the indentation for a given position from the syntax tree.\n\nfunction syntaxIndentation(cx, ast, pos) {\n  var tree = ast.resolve(pos); // Enter previous nodes that end in empty error terms, which means\n  // they were broken off by error recovery, so that indentation\n  // works even if the constructs haven't been finished.\n\n  for (var scan = tree, scanPos = pos;;) {\n    var last = scan.childBefore(scanPos);\n    if (!last) break;\n\n    if (last.type.isError && last.from == last.to) {\n      tree = scan;\n      scanPos = last.from;\n    } else {\n      scan = last;\n      scanPos = scan.to + 1;\n    }\n  }\n\n  return indentFrom(tree, pos, cx);\n}\n\nfunction ignoreClosed(cx) {\n  var _a, _b;\n\n  return cx.pos == ((_a = cx.options) === null || _a === void 0 ? void 0 : _a.simulateBreak) && ((_b = cx.options) === null || _b === void 0 ? void 0 : _b.simulateDoubleBreak);\n}\n\nfunction indentStrategy(tree) {\n  var strategy = tree.type.prop(indentNodeProp);\n  if (strategy) return strategy;\n  var first = tree.firstChild,\n      close;\n\n  if (first && (close = first.type.prop(NodeProp.closedBy))) {\n    var last = tree.lastChild,\n        closed = last && close.indexOf(last.name) > -1;\n    return function (cx) {\n      return delimitedStrategy(cx, true, 1, undefined, closed && !ignoreClosed(cx) ? last.from : undefined);\n    };\n  }\n\n  return tree.parent == null ? topIndent : null;\n}\n\nfunction indentFrom(node, pos, base) {\n  for (; node; node = node.parent) {\n    var strategy = indentStrategy(node);\n    if (strategy) return strategy(new TreeIndentContext(base, pos, node));\n  }\n\n  return null;\n}\n\nfunction topIndent() {\n  return 0;\n}\n/**\nObjects of this type provide context information and helper\nmethods to indentation functions.\n*/\n\n\nvar TreeIndentContext = /*#__PURE__*/function (_IndentContext) {\n  _inherits(TreeIndentContext, _IndentContext);\n\n  var _super2 = _createSuper(TreeIndentContext);\n\n  /**\n  @internal\n  */\n  function TreeIndentContext(base,\n  /**\n  The position at which indentation is being computed.\n  */\n  pos,\n  /**\n  The syntax tree node to which the indentation strategy\n  applies.\n  */\n  node) {\n    var _this5;\n\n    _classCallCheck(this, TreeIndentContext);\n\n    _this5 = _super2.call(this, base.state, base.options);\n    _this5.base = base;\n    _this5.pos = pos;\n    _this5.node = node;\n    return _this5;\n  }\n  /**\n  Get the text directly after `this.pos`, either the entire line\n  or the next 100 characters, whichever is shorter.\n  */\n\n\n  _createClass(TreeIndentContext, [{\n    key: \"textAfter\",\n    get: function get() {\n      return this.textAfterPos(this.pos);\n    }\n    /**\n    Get the indentation at the reference line for `this.node`, which\n    is the line on which it starts, unless there is a node that is\n    _not_ a parent of this node covering the start of that line. If\n    so, the line at the start of that node is tried, again skipping\n    on if it is covered by another such node.\n    */\n\n  }, {\n    key: \"baseIndent\",\n    get: function get() {\n      var line = this.state.doc.lineAt(this.node.from); // Skip line starts that are covered by a sibling (or cousin, etc)\n\n      for (;;) {\n        var atBreak = this.node.resolve(line.from);\n\n        while (atBreak.parent && atBreak.parent.from == atBreak.from) {\n          atBreak = atBreak.parent;\n        }\n\n        if (isParent(atBreak, this.node)) break;\n        line = this.state.doc.lineAt(atBreak.from);\n      }\n\n      return this.lineIndent(line);\n    }\n    /**\n    Continue looking for indentations in the node's parent nodes,\n    and return the result of that.\n    */\n\n  }, {\n    key: \"continue\",\n    value: function _continue() {\n      var parent = this.node.parent;\n      return parent ? indentFrom(parent, this.pos, this.base) : 0;\n    }\n  }]);\n\n  return TreeIndentContext;\n}(IndentContext);\n\nfunction isParent(parent, of) {\n  for (var cur = of; cur; cur = cur.parent) {\n    if (parent == cur) return true;\n  }\n\n  return false;\n} // Check whether a delimited node is aligned (meaning there are\n// non-skipped nodes on the same line as the opening delimiter). And\n// if so, return the opening token.\n\n\nfunction bracketedAligned(context) {\n  var _a;\n\n  var tree = context.node;\n  var openToken = tree.childAfter(tree.from),\n      last = tree.lastChild;\n  if (!openToken) return null;\n  var sim = (_a = context.options) === null || _a === void 0 ? void 0 : _a.simulateBreak;\n  var openLine = context.state.doc.lineAt(openToken.from);\n  var lineEnd = sim == null || sim <= openLine.from ? openLine.to : Math.min(openLine.to, sim);\n\n  for (var pos = openToken.to;;) {\n    var next = tree.childAfter(pos);\n    if (!next || next == last) return null;\n    if (!next.type.isSkipped) return next.from < lineEnd ? openToken : null;\n    pos = next.to;\n  }\n}\n/**\nAn indentation strategy for delimited (usually bracketed) nodes.\nWill, by default, indent one unit more than the parent's base\nindent unless the line starts with a closing token. When `align`\nis true and there are non-skipped nodes on the node's opening\nline, the content of the node will be aligned with the end of the\nopening node, like this:\n\n    foo(bar,\n        baz)\n*/\n\n\nfunction delimitedIndent(_ref2) {\n  var closing = _ref2.closing,\n      _ref2$align = _ref2.align,\n      align = _ref2$align === void 0 ? true : _ref2$align,\n      _ref2$units = _ref2.units,\n      units = _ref2$units === void 0 ? 1 : _ref2$units;\n  return function (context) {\n    return delimitedStrategy(context, align, units, closing);\n  };\n}\n\nfunction delimitedStrategy(context, align, units, closing, closedAt) {\n  var after = context.textAfter,\n      space = after.match(/^\\s*/)[0].length;\n  var closed = closing && after.slice(space, space + closing.length) == closing || closedAt == context.pos + space;\n  var aligned = align ? bracketedAligned(context) : null;\n  if (aligned) return closed ? context.column(aligned.from) : context.column(aligned.to);\n  return context.baseIndent + (closed ? 0 : context.unit * units);\n}\n/**\nAn indentation strategy that aligns a node's content to its base\nindentation.\n*/\n\n\nvar flatIndent = function flatIndent(context) {\n  return context.baseIndent;\n};\n/**\nCreates an indentation strategy that, by default, indents\ncontinued lines one unit more than the node's base indentation.\nYou can provide `except` to prevent indentation of lines that\nmatch a pattern (for example `/^else\\b/` in `if`/`else`\nconstructs), and you can change the amount of units used with the\n`units` option.\n*/\n\n\nfunction continuedIndent() {\n  var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      except = _ref3.except,\n      _ref3$units = _ref3.units,\n      units = _ref3$units === void 0 ? 1 : _ref3$units;\n\n  return function (context) {\n    var matchExcept = except && except.test(context.textAfter);\n    return context.baseIndent + (matchExcept ? 0 : units * context.unit);\n  };\n}\n\nvar DontIndentBeyond = 200;\n/**\nEnables reindentation on input. When a language defines an\n`indentOnInput` field in its [language\ndata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt), which must hold a regular\nexpression, the line at the cursor will be reindented whenever new\ntext is typed and the input from the start of the line up to the\ncursor matches that regexp.\n\nTo avoid unneccesary reindents, it is recommended to start the\nregexp with `^` (usually followed by `\\s*`), and end it with `$`.\nFor example, `/^\\s*\\}$/` will reindent when a closing brace is\nadded at the start of a line.\n*/\n\nfunction indentOnInput() {\n  return EditorState.transactionFilter.of(function (tr) {\n    if (!tr.docChanged || tr.annotation(Transaction.userEvent) != \"input\") return tr;\n    var rules = tr.startState.languageDataAt(\"indentOnInput\", tr.startState.selection.main.head);\n    if (!rules.length) return tr;\n    var doc = tr.newDoc,\n        head = tr.newSelection.main.head,\n        line = doc.lineAt(head);\n    if (head > line.from + DontIndentBeyond) return tr;\n    var lineStart = doc.sliceString(line.from, head);\n    if (!rules.some(function (r) {\n      return r.test(lineStart);\n    })) return tr;\n    var state = tr.state,\n        last = -1,\n        changes = [];\n\n    var _iterator9 = _createForOfIteratorHelper(state.selection.ranges),\n        _step9;\n\n    try {\n      for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n        var _head = _step9.value.head;\n\n        var _line = state.doc.lineAt(_head);\n\n        if (_line.from == last) continue;\n        last = _line.from;\n        var indent = getIndentation(state, _line.from);\n        if (indent == null) continue;\n        var cur = /^\\s*/.exec(_line.text)[0];\n        var norm = indentString(state, indent);\n        if (cur != norm) changes.push({\n          from: _line.from,\n          to: _line.from + cur.length,\n          insert: norm\n        });\n      }\n    } catch (err) {\n      _iterator9.e(err);\n    } finally {\n      _iterator9.f();\n    }\n\n    return changes.length ? [tr, {\n      changes: changes\n    }] : tr;\n  });\n}\n/**\nA facet that registers a code folding service. When called with\nthe extent of a line, such a function should return a foldable\nrange that starts on that line (but continues beyond it), if one\ncan be found.\n*/\n\n\nvar foldService = Facet.define();\n/**\nThis node prop is used to associate folding information with\nsyntax node types. Given a syntax node, it should check whether\nthat tree is foldable and return the range that can be collapsed\nwhen it is.\n*/\n\nvar foldNodeProp = new NodeProp();\n/**\n[Fold](https://codemirror.net/6/docs/ref/#language.foldNodeProp) function that folds everything but\nthe first and the last child of a syntax node. Useful for nodes\nthat start and end with delimiters.\n*/\n\nfunction foldInside(node) {\n  var first = node.firstChild,\n      last = node.lastChild;\n  return first && first.to < last.from ? {\n    from: first.to,\n    to: last.type.isError ? node.to : last.from\n  } : null;\n}\n\nfunction syntaxFolding(state, start, end) {\n  var tree = syntaxTree(state);\n  if (tree.length == 0) return null;\n  var inner = tree.resolve(end);\n  var found = null;\n\n  for (var cur = inner; cur; cur = cur.parent) {\n    if (cur.to <= end || cur.from > end) continue;\n    if (found && cur.from < start) break;\n    var prop = cur.type.prop(foldNodeProp);\n\n    if (prop) {\n      var value = prop(cur, state);\n      if (value && value.from <= end && value.from >= start && value.to > end) found = value;\n    }\n  }\n\n  return found;\n}\n/**\nCheck whether the given line is foldable. First asks any fold\nservices registered through\n[`foldService`](https://codemirror.net/6/docs/ref/#language.foldService), and if none of them return\na result, tries to query the [fold node\nprop](https://codemirror.net/6/docs/ref/#language.foldNodeProp) of syntax nodes that cover the end\nof the line.\n*/\n\n\nfunction foldable(state, lineStart, lineEnd) {\n  var _iterator10 = _createForOfIteratorHelper(state.facet(foldService)),\n      _step10;\n\n  try {\n    for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n      var service = _step10.value;\n      var result = service(state, lineStart, lineEnd);\n      if (result) return result;\n    }\n  } catch (err) {\n    _iterator10.e(err);\n  } finally {\n    _iterator10.f();\n  }\n\n  return syntaxFolding(state, lineStart, lineEnd);\n}\n\nexport { EditorParseContext, IndentContext, Language, LanguageDescription, LanguageSupport, LezerLanguage, TreeIndentContext, continuedIndent, defineLanguageFacet, delimitedIndent, ensureSyntaxTree, flatIndent, foldInside, foldNodeProp, foldService, foldable, getIndentUnit, getIndentation, indentNodeProp, indentOnInput, indentService, indentString, indentUnit, language, languageDataProp, syntaxTree };","map":{"version":3,"sources":["/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/@codemirror/language/dist/index.js"],"names":["NodeProp","Tree","TreeFragment","NodeType","Text","countColumn","Facet","EditorState","StateEffect","StateField","Transaction","ViewPlugin","languageDataProp","defineLanguageFacet","baseData","define","combine","values","concat","undefined","Language","data","parser","topNode","extraExtensions","prototype","hasOwnProperty","Object","defineProperty","get","syntaxTree","extension","language","of","languageData","state","pos","facet","languageDataFacetAt","lang","from","to","doc","length","allowsNesting","result","iterate","enter","type","isTop","prop","push","code","split","parse","startParse","DocInput","EditorParseContext","create","empty","tree","advance","setState","topLang","target","resolve","parent","LezerLanguage","options","configure","hasNested","spec","props","add","field","ensureSyntaxTree","upto","timeout","_a","context","work","cursorPos","string","prevString","cursor","iter","next","value","stringStart","charCodeAt","syncTo","lineBreak","slice","Math","min","sliceString","at","fragments","viewport","skipped","scheduleOn","tempSkipped","time","takeTree","endTime","Date","now","done","withoutTempSkipped","addTree","forceFinish","r","pop","cutFragments","changes","newState","ranges","iterChangedRanges","fromA","toA","fromB","toB","applyChanges","mapPos","startLen","i","splice","until","input","startPos","ecx","Promise","all","none","skippingParser","getSkippingParser","LanguageState","tr","docChanged","newCx","startState","max","parseState","init","update","effects","e","is","apply","requestIdle","window","requestIdleCallback","callback","setTimeout","cancelIdle","cancelIdleCallback","clearTimeout","parseWorker","fromClass","view","working","chunkEnd","chunkBudget","bind","scheduleWork","cx","viewportChanged","updateViewport","reset","hasFocus","checkAsyncSchedule","force","deadline","vpTo","timeRemaining","movedPast","dispatch","then","eventHandlers","focus","languages","enables","LanguageSupport","support","LanguageDescription","name","alias","extensions","filename","loadFunc","loading","err","map","s","toLowerCase","load","descs","d","test","ext","exec","indexOf","fuzzy","some","a","found","indentService","indentUnit","Error","JSON","stringify","getIndentUnit","unit","tabSize","indentString","cols","ts","getIndentation","IndentContext","service","syntaxIndentation","_b","sim","simulateBreak","simulateDoubleBreak","sliceDoc","lineAt","line","text","override","overrideIndentation","search","overriden","indentNodeProp","ast","scan","scanPos","last","childBefore","isError","indentFrom","ignoreClosed","indentStrategy","strategy","first","firstChild","close","closedBy","lastChild","closed","delimitedStrategy","topIndent","node","base","TreeIndentContext","textAfterPos","atBreak","isParent","lineIndent","cur","bracketedAligned","openToken","childAfter","openLine","lineEnd","isSkipped","delimitedIndent","closing","align","units","closedAt","after","textAfter","space","match","aligned","column","baseIndent","flatIndent","continuedIndent","except","matchExcept","DontIndentBeyond","indentOnInput","transactionFilter","annotation","userEvent","rules","languageDataAt","selection","main","head","newDoc","newSelection","lineStart","indent","norm","insert","foldService","foldNodeProp","foldInside","syntaxFolding","start","end","inner","foldable"],"mappings":";;;;;AAAA,SAASA,QAAT,EAAmBC,IAAnB,EAAyBC,YAAzB,EAAuCC,QAAvC,QAAuD,YAAvD;AACA,SAASC,IAAT,EAAeC,WAAW,IAAXA,YAAf,QAAkC,kBAAlC;AACA,SAASC,KAAT,EAAgBC,WAAhB,EAA6BC,WAA7B,EAA0CC,UAA1C,EAAsDC,WAAtD,QAAyE,mBAAzE;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAEA;AACA;AACA;AACA;;AACA,IAAMC,gBAAgB,GAAG,IAAIZ,QAAJ,EAAzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASa,mBAAT,CAA6BC,QAA7B,EAAuC;AACnC,SAAOR,KAAK,CAACS,MAAN,CAAa;AAChBC,IAAAA,OAAO,EAAEF,QAAQ,GAAG,UAAAG,MAAM;AAAA,aAAIA,MAAM,CAACC,MAAP,CAAcJ,QAAd,CAAJ;AAAA,KAAT,GAAuCK;AADxC,GAAb,CAAP;AAGH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;IACMC,Q;AACF;AACJ;AACA;AACA;AACA;AACA;AACI;AACA;AACJ;AACA;AACA;AACIC,EAAAA,IALA,EAKMC,MALN;AAMA;AACJ;AACA;AACIC,EAAAA,OATA,EAS+B;AAAA,QAAtBC,eAAsB,uEAAJ,EAAI;;AAAA;;AAC3B,SAAKH,IAAL,GAAYA,IAAZ;AACA,SAAKE,OAAL,GAAeA,OAAf,CAF2B,CAG3B;AACA;AACA;;AACA,QAAI,CAAChB,WAAW,CAACkB,SAAZ,CAAsBC,cAAtB,CAAqC,MAArC,CAAL,EACIC,MAAM,CAACC,cAAP,CAAsBrB,WAAW,CAACkB,SAAlC,EAA6C,MAA7C,EAAqD;AAAEI,MAAAA,GAAF,iBAAQ;AAAE,eAAOC,UAAU,CAAC,IAAD,CAAjB;AAA0B;AAApC,KAArD;AACJ,SAAKR,MAAL,GAAcA,MAAd;AACA,SAAKS,SAAL,GAAiB,CACbC,QAAQ,CAACC,EAAT,CAAY,IAAZ,CADa,EAEb1B,WAAW,CAAC2B,YAAZ,CAAyBD,EAAzB,CAA4B,UAACE,KAAD,EAAQC,GAAR;AAAA,aAAgBD,KAAK,CAACE,KAAN,CAAYC,mBAAmB,CAACH,KAAD,EAAQC,GAAR,CAA/B,CAAhB;AAAA,KAA5B,CAFa,EAGflB,MAHe,CAGRM,eAHQ,CAAjB;AAIH;AACD;AACJ;AACA;;;;;WACI,oBAAWW,KAAX,EAAkBC,GAAlB,EAAuB;AACnB,aAAOE,mBAAmB,CAACH,KAAD,EAAQC,GAAR,CAAnB,IAAmC,KAAKf,IAA/C;AACH;AACD;AACJ;AACA;AACA;AACA;;;;WACI,qBAAYc,KAAZ,EAAmB;AAAA;;AACf,UAAII,IAAI,GAAGJ,KAAK,CAACE,KAAN,CAAYL,QAAZ,CAAX;AACA,UAAI,CAACO,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAK,KAAK,CAA/B,GAAmC,KAAK,CAAxC,GAA4CA,IAAI,CAAClB,IAAlD,KAA2D,KAAKA,IAApE,EACI,OAAO,CAAC;AAAEmB,QAAAA,IAAI,EAAE,CAAR;AAAWC,QAAAA,EAAE,EAAEN,KAAK,CAACO,GAAN,CAAUC;AAAzB,OAAD,CAAP;AACJ,UAAI,CAACJ,IAAD,IAAS,CAACA,IAAI,CAACK,aAAnB,EACI,OAAO,EAAP;AACJ,UAAIC,MAAM,GAAG,EAAb;AACAf,MAAAA,UAAU,CAACK,KAAD,CAAV,CAAkBW,OAAlB,CAA0B;AACtBC,QAAAA,KAAK,EAAE,eAACC,IAAD,EAAOR,IAAP,EAAaC,EAAb,EAAoB;AACvB,cAAIO,IAAI,CAACC,KAAL,IAAcD,IAAI,CAACE,IAAL,CAAUtC,gBAAV,KAA+B,KAAI,CAACS,IAAtD,EAA4D;AACxDwB,YAAAA,MAAM,CAACM,IAAP,CAAY;AAAEX,cAAAA,IAAI,EAAJA,IAAF;AAAQC,cAAAA,EAAE,EAAFA;AAAR,aAAZ;AACA,mBAAO,KAAP;AACH;;AACD,iBAAOtB,SAAP;AACH;AAPqB,OAA1B;AASA,aAAO0B,MAAP;AACH;AACD;AACJ;AACA;AACA;;;;SACI,eAAoB;AAAE,aAAO,IAAP;AAAc;AACpC;AACJ;AACA;;;;WACI,qBAAYO,IAAZ,EAAkB;AACd,UAAIV,GAAG,GAAGtC,IAAI,CAAC6B,EAAL,CAAQmB,IAAI,CAACC,KAAL,CAAW,IAAX,CAAR,CAAV;AACA,UAAIC,KAAK,GAAG,KAAKhC,MAAL,CAAYiC,UAAZ,CAAuB,IAAIC,QAAJ,CAAad,GAAb,CAAvB,EAA0C,CAA1C,EAA6C,IAAIe,kBAAJ,CAAuB,KAAKnC,MAA5B,EAAoCf,WAAW,CAACmD,MAAZ,CAAmB;AAAEhB,QAAAA,GAAG,EAAHA;AAAF,OAAnB,CAApC,EAAiE,EAAjE,EAAqEzC,IAAI,CAAC0D,KAA1E,EAAiF;AAAEnB,QAAAA,IAAI,EAAE,CAAR;AAAWC,QAAAA,EAAE,EAAEW,IAAI,CAACT;AAApB,OAAjF,EAA+G,EAA/G,EAAmH,IAAnH,CAA7C,CAAZ;AACA,UAAIiB,IAAJ;;AACA,aAAO,EAAEA,IAAI,GAAGN,KAAK,CAACO,OAAN,EAAT,CAAP,EAAkC,CAAG;;AACrC,aAAOD,IAAP;AACH;;;;;AAEL;AACA;AACA;;;AACAxC,QAAQ,CAAC0C,QAAT,GAAoBtD,WAAW,CAACO,MAAZ,EAApB;;AACA,SAASuB,mBAAT,CAA6BH,KAA7B,EAAoCC,GAApC,EAAyC;AACrC,MAAI2B,OAAO,GAAG5B,KAAK,CAACE,KAAN,CAAYL,QAAZ,CAAd;AACA,MAAI,CAAC+B,OAAL,EACI,OAAO,IAAP;AACJ,MAAI,CAACA,OAAO,CAACnB,aAAb,EACI,OAAOmB,OAAO,CAAC1C,IAAf;AACJ,MAAIuC,IAAI,GAAG9B,UAAU,CAACK,KAAD,CAArB;AACA,MAAI6B,MAAM,GAAGJ,IAAI,CAACK,OAAL,CAAa7B,GAAb,EAAkB,CAAC,CAAnB,CAAb;;AACA,SAAO4B,MAAP,EAAe;AACX,QAAI3B,KAAK,GAAG2B,MAAM,CAAChB,IAAP,CAAYE,IAAZ,CAAiBtC,gBAAjB,CAAZ;AACA,QAAIyB,KAAJ,EACI,OAAOA,KAAP;AACJ2B,IAAAA,MAAM,GAAGA,MAAM,CAACE,MAAhB;AACH;;AACD,SAAOH,OAAO,CAAC1C,IAAf;AACH;AACD;AACA;AACA;AACA;AACA;;;IACM8C,a;;;;;AACF,yBAAY9C,IAAZ,EAAkBC,MAAlB,EAA0B;AAAA;;AAAA;;AACtB,+BAAMD,IAAN,EAAYC,MAAZ,EAAoBA,MAAM,CAACC,OAA3B;AACA,WAAKD,MAAL,GAAcA,MAAd;AAFsB;AAGzB;AACD;AACJ;AACA;;;;;;AAOI;AACJ;AACA;AACA;AACI,uBAAU8C,OAAV,EAAmB;AACf,aAAO,IAAID,aAAJ,CAAkB,KAAK9C,IAAvB,EAA6B,KAAKC,MAAL,CAAY+C,SAAZ,CAAsBD,OAAtB,CAA7B,CAAP;AACH;;;SACD,eAAoB;AAAE,aAAO,KAAK9C,MAAL,CAAYgD,SAAnB;AAA+B;;;WAbrD,gBAAcC,IAAd,EAAoB;AAChB,UAAIlD,IAAI,GAAGR,mBAAmB,CAAC0D,IAAI,CAACrC,YAAN,CAA9B;AACA,aAAO,IAAIiC,aAAJ,CAAkB9C,IAAlB,EAAwBkD,IAAI,CAACjD,MAAL,CAAY+C,SAAZ,CAAsB;AACjDG,QAAAA,KAAK,EAAE,CAAC5D,gBAAgB,CAAC6D,GAAjB,CAAqB,UAAAzB,IAAI;AAAA,iBAAIA,IAAI,CAACC,KAAL,GAAa5B,IAAb,GAAoBF,SAAxB;AAAA,SAAzB,CAAD;AAD0C,OAAtB,CAAxB,CAAP;AAGH;;;;EAbuBC,Q;AAuB5B;AACA;AACA;AACA;AACA;;;AACA,SAASU,UAAT,CAAoBK,KAApB,EAA2B;AACvB,MAAIuC,KAAK,GAAGvC,KAAK,CAACuC,KAAN,CAAYtD,QAAQ,CAACe,KAArB,EAA4B,KAA5B,CAAZ;AACA,SAAOuC,KAAK,GAAGA,KAAK,CAACd,IAAT,GAAgB3D,IAAI,CAAC0D,KAAjC;AACH;AACD;AACA;AACA;AACA;AACA;;;AACA,SAASgB,gBAAT,CAA0BxC,KAA1B,EAAiCyC,IAAjC,EAAqD;AAAA,MAAdC,OAAc,uEAAJ,EAAI;;AACjD,MAAIC,EAAJ;;AACA,MAAIxB,KAAK,GAAG,CAACwB,EAAE,GAAG3C,KAAK,CAACuC,KAAN,CAAYtD,QAAQ,CAACe,KAArB,EAA4B,KAA5B,CAAN,MAA8C,IAA9C,IAAsD2C,EAAE,KAAK,KAAK,CAAlE,GAAsE,KAAK,CAA3E,GAA+EA,EAAE,CAACC,OAA9F;AACA,SAAO,CAACzB,KAAD,GAAS,IAAT,GAAgBA,KAAK,CAACM,IAAN,CAAWjB,MAAX,IAAqBiC,IAArB,IAA6BtB,KAAK,CAAC0B,IAAN,CAAWH,OAAX,EAAoBD,IAApB,CAA7B,GAAyDtB,KAAK,CAACM,IAA/D,GAAsE,IAA7F;AACH,C,CACD;;;IACMJ,Q;AACF,oBAAYd,GAAZ,EAAsC;AAAA,QAArBC,MAAqB,uEAAZD,GAAG,CAACC,MAAQ;;AAAA;;AAClC,SAAKD,GAAL,GAAWA,GAAX;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKsC,SAAL,GAAiB,CAAjB;AACA,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKC,UAAL,GAAkB,EAAlB;AACA,SAAKC,MAAL,GAAc1C,GAAG,CAAC2C,IAAJ,EAAd;AACH;;;;WACD,gBAAOjD,GAAP,EAAY;AACR,UAAIA,GAAG,GAAG,KAAK6C,SAAf,EAA0B;AAAE;AACxB,aAAKG,MAAL,GAAc,KAAK1C,GAAL,CAAS2C,IAAT,EAAd;AACA,aAAKJ,SAAL,GAAiB,CAAjB;AACH;;AACD,WAAKE,UAAL,GAAkB/C,GAAG,IAAI,KAAK6C,SAAZ,GAAwB,KAAKC,MAA7B,GAAsC,EAAxD;AACA,WAAKA,MAAL,GAAc,KAAKE,MAAL,CAAYE,IAAZ,CAAiBlD,GAAG,GAAG,KAAK6C,SAA5B,EAAuCM,KAArD;AACA,WAAKN,SAAL,GAAiB7C,GAAG,GAAG,KAAK8C,MAAL,CAAYvC,MAAnC;AACA,aAAO,KAAKsC,SAAL,GAAiB,KAAKC,MAAL,CAAYvC,MAApC;AACH;;;WACD,aAAIP,GAAJ,EAAS;AACL,UAAIA,GAAG,IAAI,KAAKO,MAAhB,EACI,OAAO,CAAC,CAAR;AACJ,UAAI6C,WAAW,GAAG,KAAKP,SAAL,GAAiB,KAAKC,MAAL,CAAYvC,MAA/C;;AACA,UAAIP,GAAG,GAAGoD,WAAN,IAAqBpD,GAAG,IAAI,KAAK6C,SAArC,EAAgD;AAC5C,YAAI7C,GAAG,GAAGoD,WAAN,IAAqBpD,GAAG,IAAIoD,WAAW,GAAG,KAAKL,UAAL,CAAgBxC,MAA9D,EACI,OAAO,KAAKwC,UAAL,CAAgBM,UAAhB,CAA2BrD,GAAG,IAAIoD,WAAW,GAAG,KAAKL,UAAL,CAAgBxC,MAAlC,CAA9B,CAAP;AACJ6C,QAAAA,WAAW,GAAG,KAAKE,MAAL,CAAYtD,GAAZ,CAAd;AACH;;AACD,aAAO,KAAK8C,MAAL,CAAYO,UAAZ,CAAuBrD,GAAG,GAAGoD,WAA7B,CAAP;AACH;;;WACD,mBAAUpD,GAAV,EAAe;AACX,UAAIA,GAAG,IAAI,KAAKO,MAAZ,IAAsBP,GAAG,GAAG,CAAhC,EACI,OAAO,EAAP;AACJ,UAAIoD,WAAW,GAAG,KAAKP,SAAL,GAAiB,KAAKC,MAAL,CAAYvC,MAA/C;AACA,UAAIP,GAAG,GAAGoD,WAAN,IAAqBpD,GAAG,IAAI,KAAK6C,SAArC,EACIO,WAAW,GAAG,KAAKE,MAAL,CAAYtD,GAAZ,CAAd;AACJ,aAAO,KAAKgD,MAAL,CAAYO,SAAZ,GAAwB,EAAxB,GAA6B,KAAKT,MAAL,CAAYU,KAAZ,CAAkBxD,GAAG,GAAGoD,WAAxB,EAAqCK,IAAI,CAACC,GAAL,CAAS,KAAKnD,MAAL,GAAc6C,WAAvB,EAAoC,KAAKN,MAAL,CAAYvC,MAAhD,CAArC,CAApC;AACH;;;WACD,cAAKH,IAAL,EAAWC,EAAX,EAAe;AACX,UAAI+C,WAAW,GAAG,KAAKP,SAAL,GAAiB,KAAKC,MAAL,CAAYvC,MAA/C;AACA,UAAIH,IAAI,GAAGgD,WAAP,IAAsB/C,EAAE,IAAI,KAAKwC,SAArC,EACI,OAAO,KAAKvC,GAAL,CAASqD,WAAT,CAAqBvD,IAArB,EAA2BC,EAA3B,CAAP,CADJ,KAGI,OAAO,KAAKyC,MAAL,CAAYU,KAAZ,CAAkBpD,IAAI,GAAGgD,WAAzB,EAAsC/C,EAAE,GAAG+C,WAA3C,CAAP;AACP;;;WACD,cAAKQ,EAAL,EAAS;AACL,aAAO,IAAIxC,QAAJ,CAAa,KAAKd,GAAlB,EAAuBsD,EAAvB,CAAP;AACH;;;;;AAEL;AACA;AACA;;;IACMvC,kB;AACF;AACJ;AACA;AACI,8BAAYnC,MAAZ;AACA;AACJ;AACA;AACIa,EAAAA,KAJA,EA+BY;AAAA,QAvBZ8D,SAuBY,uEAvBA,EAuBA;AAAA;AAtBZ;AACJ;AACA;AACIrC,IAAAA,IAmBY;AAAA;AAlBZ;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACIsC,IAAAA,QAUY;AAAA;AATZ;AACJ;AACA;AACIC,IAAAA,OAMY;AAAA;AALZ;AACJ;AACA;AACA;AACA;AACIC,IAAAA,UAAY;;AAAA;;AACR,SAAK9E,MAAL,GAAcA,MAAd;AACA,SAAKa,KAAL,GAAaA,KAAb;AACA,SAAK8D,SAAL,GAAiBA,SAAjB;AACA,SAAKrC,IAAL,GAAYA,IAAZ;AACA,SAAKsC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAK9C,KAAL,GAAa,IAAb;AACA;AACR;AACA;;AACQ,SAAK+C,WAAL,GAAmB,EAAnB;AACH;AACD;AACJ;AACA;;;;;WACI,cAAKC,IAAL,EAAW1B,IAAX,EAAiB;AACb,UAAI,KAAKhB,IAAL,IAAa3D,IAAI,CAAC0D,KAAlB,KAA4BiB,IAAI,IAAI,IAAR,GAAe,KAAKhB,IAAL,CAAUjB,MAAV,IAAoB,KAAKR,KAAL,CAAWO,GAAX,CAAeC,MAAlD,GAA2D,KAAKiB,IAAL,CAAUjB,MAAV,IAAoBiC,IAA3G,CAAJ,EAAsH;AAClH,aAAK2B,QAAL;AACA,eAAO,IAAP;AACH;;AACD,UAAI,CAAC,KAAKjD,KAAV,EACI,KAAKA,KAAL,GAAa,KAAKhC,MAAL,CAAYiC,UAAZ,CAAuB,IAAIC,QAAJ,CAAa,KAAKrB,KAAL,CAAWO,GAAxB,CAAvB,EAAqD,CAArD,EAAwD,IAAxD,CAAb;AACJ,UAAI8D,OAAO,GAAGC,IAAI,CAACC,GAAL,KAAaJ,IAA3B;;AACA,eAAS;AACL,YAAIK,IAAI,GAAG,KAAKrD,KAAL,CAAWO,OAAX,EAAX;;AACA,YAAI8C,IAAJ,EAAU;AACN,eAAKV,SAAL,GAAiB,KAAKW,kBAAL,CAAwB1G,YAAY,CAAC2G,OAAb,CAAqBF,IAArB,CAAxB,CAAjB;AACA,eAAKrD,KAAL,GAAa,IAAb;AACA,eAAKM,IAAL,GAAY+C,IAAZ;AACA,iBAAO,IAAP;AACH,SALD,MAMK,IAAI/B,IAAI,IAAI,IAAR,IAAgB,KAAKtB,KAAL,CAAWlB,GAAX,IAAkBwC,IAAtC,EAA4C;AAC7C,eAAK2B,QAAL;AACA,iBAAO,IAAP;AACH;;AACD,YAAIE,IAAI,CAACC,GAAL,KAAaF,OAAjB,EACI,OAAO,KAAP;AACP;AACJ;AACD;AACJ;AACA;;;;WACI,oBAAW;AACP,UAAI,KAAKlD,KAAL,IAAc,KAAKA,KAAL,CAAWlB,GAAX,GAAiB,KAAKwB,IAAL,CAAUjB,MAA7C,EAAqD;AACjD,aAAKiB,IAAL,GAAY,KAAKN,KAAL,CAAWwD,WAAX,EAAZ;AACA,aAAKb,SAAL,GAAiB,KAAKW,kBAAL,CAAwB1G,YAAY,CAAC2G,OAAb,CAAqB,KAAKjD,IAA1B,EAAgC,KAAKqC,SAArC,EAAgD,IAAhD,CAAxB,CAAjB;AACH;AACJ;;;WACD,4BAAmBA,SAAnB,EAA8B;AAC1B,WAAK,IAAIc,CAAT,EAAYA,CAAC,GAAG,KAAKV,WAAL,CAAiBW,GAAjB,EAAhB;AACIf,QAAAA,SAAS,GAAGgB,YAAY,CAAChB,SAAD,EAAYc,CAAC,CAACvE,IAAd,EAAoBuE,CAAC,CAACtE,EAAtB,CAAxB;AADJ;;AAEA,aAAOwD,SAAP;AACH;AACD;AACJ;AACA;;;;WACI,iBAAQiB,QAAR,EAAiBC,QAAjB,EAA2B;AACvB,UAAMlB,SAAN,GAA6C,IAA7C,CAAMA,SAAN;AAAA,UAAiBrC,IAAjB,GAA6C,IAA7C,CAAiBA,IAAjB;AAAA,UAAuBsC,QAAvB,GAA6C,IAA7C,CAAuBA,QAAvB;AAAA,UAAiCC,OAAjC,GAA6C,IAA7C,CAAiCA,OAAjC;AACA,WAAKI,QAAL;;AACA,UAAI,CAACW,QAAO,CAACvD,KAAb,EAAoB;AAChB,YAAIyD,MAAM,GAAG,EAAb;;AACAF,QAAAA,QAAO,CAACG,iBAAR,CAA0B,UAACC,KAAD,EAAQC,GAAR,EAAaC,KAAb,EAAoBC,GAApB;AAAA,iBAA4BL,MAAM,CAACjE,IAAP,CAAY;AAAEmE,YAAAA,KAAK,EAALA,KAAF;AAASC,YAAAA,GAAG,EAAHA,GAAT;AAAcC,YAAAA,KAAK,EAALA,KAAd;AAAqBC,YAAAA,GAAG,EAAHA;AAArB,WAAZ,CAA5B;AAAA,SAA1B;;AACAxB,QAAAA,SAAS,GAAG/F,YAAY,CAACwH,YAAb,CAA0BzB,SAA1B,EAAqCmB,MAArC,CAAZ;AACAxD,QAAAA,IAAI,GAAG3D,IAAI,CAAC0D,KAAZ;AACAuC,QAAAA,QAAQ,GAAG;AAAE1D,UAAAA,IAAI,EAAE0E,QAAO,CAACS,MAAR,CAAezB,QAAQ,CAAC1D,IAAxB,EAA8B,CAAC,CAA/B,CAAR;AAA2CC,UAAAA,EAAE,EAAEyE,QAAO,CAACS,MAAR,CAAezB,QAAQ,CAACzD,EAAxB,EAA4B,CAA5B;AAA/C,SAAX;;AACA,YAAI,KAAK0D,OAAL,CAAaxD,MAAjB,EAAyB;AACrBwD,UAAAA,OAAO,GAAG,EAAV;;AADqB,qDAEP,KAAKA,OAFE;AAAA;;AAAA;AAErB,gEAA4B;AAAA,kBAAnBY,CAAmB;;AACxB,kBAAIvE,IAAI,GAAG0E,QAAO,CAACS,MAAR,CAAeZ,CAAC,CAACvE,IAAjB,EAAuB,CAAvB,CAAX;AAAA,kBAAsCC,EAAE,GAAGyE,QAAO,CAACS,MAAR,CAAeZ,CAAC,CAACtE,EAAjB,EAAqB,CAAC,CAAtB,CAA3C;;AACA,kBAAID,IAAI,GAAGC,EAAX,EACI0D,OAAO,CAAChD,IAAR,CAAa;AAAEX,gBAAAA,IAAI,EAAJA,IAAF;AAAQC,gBAAAA,EAAE,EAAFA;AAAR,eAAb;AACP;AANoB;AAAA;AAAA;AAAA;AAAA;AAOxB;AACJ;;AACD,aAAO,IAAIgB,kBAAJ,CAAuB,KAAKnC,MAA5B,EAAoC6F,QAApC,EAA8ClB,SAA9C,EAAyDrC,IAAzD,EAA+DsC,QAA/D,EAAyEC,OAAzE,EAAkF,KAAKC,UAAvF,CAAP;AACH;AACD;AACJ;AACA;;;;WACI,wBAAeF,QAAf,EAAyB;AACrB,WAAKA,QAAL,GAAgBA,QAAhB;AACA,UAAI0B,QAAQ,GAAG,KAAKzB,OAAL,CAAaxD,MAA5B;;AACA,WAAK,IAAIkF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK1B,OAAL,CAAaxD,MAAjC,EAAyCkF,CAAC,EAA1C,EAA8C;AAC1C,8BAAmB,KAAK1B,OAAL,CAAa0B,CAAb,CAAnB;AAAA,YAAMrF,IAAN,mBAAMA,IAAN;AAAA,YAAYC,EAAZ,mBAAYA,EAAZ;;AACA,YAAID,IAAI,GAAG0D,QAAQ,CAACzD,EAAhB,IAAsBA,EAAE,GAAGyD,QAAQ,CAAC1D,IAAxC,EAA8C;AAC1C,eAAKyD,SAAL,GAAiBgB,YAAY,CAAC,KAAKhB,SAAN,EAAiBzD,IAAjB,EAAuBC,EAAvB,CAA7B;AACA,eAAK0D,OAAL,CAAa2B,MAAb,CAAoBD,CAAC,EAArB,EAAyB,CAAzB;AACH;AACJ;;AACD,aAAO,KAAK1B,OAAL,CAAaxD,MAAb,GAAsBiF,QAA7B;AACH;AACD;AACJ;AACA;;;;WACI,iBAAQ;AACJ,UAAI,KAAKtE,KAAT,EAAgB;AACZ,aAAKiD,QAAL;AACA,aAAKjD,KAAL,GAAa,IAAb;AACH;AACJ;AACD;AACJ;AACA;AACA;AACA;;;;WACI,yBAAgBd,IAAhB,EAAsBC,EAAtB,EAA0B;AACtB,WAAK0D,OAAL,CAAahD,IAAb,CAAkB;AAAEX,QAAAA,IAAI,EAAJA,IAAF;AAAQC,QAAAA,EAAE,EAAFA;AAAR,OAAlB;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAmBI;AACJ;AACA;AACI,uBAAUL,GAAV,EAAe;AACX,aAAO,KAAKwB,IAAL,CAAUjB,MAAV,GAAmBP,GAAnB,IAA0B,KAAKkB,KAA/B,IAAwC,KAAKA,KAAL,CAAWlB,GAAX,IAAkBA,GAAjE;AACH;;;WAvBD,2BAAyB2F,KAAzB,EAAgC;AAC5B,aAAO;AACHxE,QAAAA,UADG,sBACQyE,KADR,EACeC,QADf,EACyBlD,OADzB,EACkC;AACjC,iBAAO;AACH3C,YAAAA,GAAG,EAAE6F,QADF;AAEHpE,YAAAA,OAFG,qBAEO;AACN,kBAAIqE,GAAG,GAAGnD,OAAV;AACAmD,cAAAA,GAAG,CAAC7B,WAAJ,CAAgBlD,IAAhB,CAAqB;AAAEX,gBAAAA,IAAI,EAAEyF,QAAR;AAAkBxF,gBAAAA,EAAE,EAAEuF,KAAK,CAACrF;AAA5B,eAArB;AACA,kBAAIoF,KAAJ,EACIG,GAAG,CAAC9B,UAAJ,GAAiB8B,GAAG,CAAC9B,UAAJ,GAAiB+B,OAAO,CAACC,GAAR,CAAY,CAACF,GAAG,CAAC9B,UAAL,EAAiB2B,KAAjB,CAAZ,CAAjB,GAAwDA,KAAzE;AACJ,mBAAK3F,GAAL,GAAW4F,KAAK,CAACrF,MAAjB;AACA,qBAAO,IAAI1C,IAAJ,CAASE,QAAQ,CAACkI,IAAlB,EAAwB,EAAxB,EAA4B,EAA5B,EAAgCL,KAAK,CAACrF,MAAN,GAAesF,QAA/C,CAAP;AACH,aATE;AAUHnB,YAAAA,WAVG,yBAUW;AAAE,qBAAO,KAAKjD,OAAL,EAAP;AAAwB;AAVrC,WAAP;AAYH;AAdE,OAAP;AAgBH;;;;;AAQL;AACA;AACA;;;AACAJ,kBAAkB,CAAC6E,cAAnB,GAAoC7E,kBAAkB,CAAC8E,iBAAnB,EAApC;;AACA,SAAStB,YAAT,CAAsBhB,SAAtB,EAAiCzD,IAAjC,EAAuCC,EAAvC,EAA2C;AACvC,SAAOvC,YAAY,CAACwH,YAAb,CAA0BzB,SAA1B,EAAqC,CAAC;AAAEqB,IAAAA,KAAK,EAAE9E,IAAT;AAAe+E,IAAAA,GAAG,EAAE9E,EAApB;AAAwB+E,IAAAA,KAAK,EAAEhF,IAA/B;AAAqCiF,IAAAA,GAAG,EAAEhF;AAA1C,GAAD,CAArC,CAAP;AACH;;IACK+F,a;AACF,0BACA;AACA;AACAzD,EAAAA,OAHA,EAGS;AAAA;;AACL,SAAKA,OAAL,GAAeA,OAAf;AACA,SAAKnB,IAAL,GAAYmB,OAAO,CAACnB,IAApB;AACH;;;;WACD,eAAM6E,EAAN,EAAU;AACN,UAAI,CAACA,EAAE,CAACC,UAAR,EACI,OAAO,IAAP;AACJ,UAAIC,KAAK,GAAG,KAAK5D,OAAL,CAAamC,OAAb,CAAqBuB,EAAE,CAACvB,OAAxB,EAAiCuB,EAAE,CAACtG,KAApC,CAAZ,CAHM,CAIN;AACA;AACA;;AACA,UAAIyC,IAAI,GAAG,KAAKG,OAAL,CAAanB,IAAb,CAAkBjB,MAAlB,IAA4B8F,EAAE,CAACG,UAAH,CAAclG,GAAd,CAAkBC,MAA9C,GAAuDxB,SAAvD,GACL0E,IAAI,CAACgD,GAAL,CAASJ,EAAE,CAACvB,OAAH,CAAWS,MAAX,CAAkB,KAAK5C,OAAL,CAAanB,IAAb,CAAkBjB,MAApC,CAAT,EAAsDgG,KAAK,CAACzC,QAAN,CAAezD,EAArE,CADN;AAEA,UAAI,CAACkG,KAAK,CAAC3D,IAAN,CAAW;AAAG;AAAd,QAA2BJ,IAA3B,CAAL,EACI+D,KAAK,CAACpC,QAAN;AACJ,aAAO,IAAIiC,aAAJ,CAAkBG,KAAlB,CAAP;AACH;;;WACD,cAAYxG,KAAZ,EAAmB;AACf,UAAI2G,UAAU,GAAG,IAAIrF,kBAAJ,CAAuBtB,KAAK,CAACE,KAAN,CAAYL,QAAZ,EAAsBV,MAA7C,EAAqDa,KAArD,EAA4D,EAA5D,EAAgElC,IAAI,CAAC0D,KAArE,EAA4E;AAAEnB,QAAAA,IAAI,EAAE,CAAR;AAAWC,QAAAA,EAAE,EAAEN,KAAK,CAACO,GAAN,CAAUC;AAAzB,OAA5E,EAA+G,EAA/G,EAAmH,IAAnH,CAAjB;AACA,UAAI,CAACmG,UAAU,CAAC9D,IAAX,CAAgB;AAAG;AAAnB,OAAL,EACI8D,UAAU,CAACvC,QAAX;AACJ,aAAO,IAAIiC,aAAJ,CAAkBM,UAAlB,CAAP;AACH;;;;;;AAEL1H,QAAQ,CAACe,KAAT,GAAiB1B,UAAU,CAACM,MAAX,CAAkB;AAC/B2C,EAAAA,MAAM,EAAE8E,aAAa,CAACO,IADS;AAE/BC,EAAAA,MAF+B,kBAExBzD,KAFwB,EAEjBkD,EAFiB,EAEb;AAAA,gDACAA,EAAE,CAACQ,OADH;AAAA;;AAAA;AACd;AAAA,YAASC,CAAT;AACI,YAAIA,CAAC,CAACC,EAAF,CAAK/H,QAAQ,CAAC0C,QAAd,CAAJ,EACI,OAAOoF,CAAC,CAAC3D,KAAT;AAFR;AADc;AAAA;AAAA;AAAA;AAAA;;AAId,QAAIkD,EAAE,CAACG,UAAH,CAAcvG,KAAd,CAAoBL,QAApB,KAAiCyG,EAAE,CAACtG,KAAH,CAASE,KAAT,CAAeL,QAAf,CAArC,EACI,OAAOwG,aAAa,CAACO,IAAd,CAAmBN,EAAE,CAACtG,KAAtB,CAAP;AACJ,WAAOoD,KAAK,CAAC6D,KAAN,CAAYX,EAAZ,CAAP;AACH;AAT8B,CAAlB,CAAjB;;AAWA,IAAIY,WAAW,GAAG,OAAOC,MAAP,IAAiB,WAAjB,IAAgCA,MAAM,CAACC,mBAAvC,IACb,UAACC,QAAD;AAAA,MAAa3E,OAAb,QAAaA,OAAb;AAAA,SAA2B4E,UAAU,CAACD,QAAD,EAAW3E,OAAX,CAArC;AAAA,CADL;;AAEA,IAAI6E,UAAU,GAAG,OAAOJ,MAAP,IAAiB,WAAjB,IAAgCA,MAAM,CAACK,kBAAvC,IAA6DC,YAA9E;AACA,IAAMC,WAAW,GAAGlJ,UAAU,CAACmJ,SAAX;AAChB,uBAAYC,IAAZ,EAAkB;AAAA;;AACd,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,OAAL,GAAe,CAAC,CAAhB,CAFc,CAGd;;AACA,SAAKC,QAAL,GAAgB,CAAC,CAAjB,CAJc,CAKd;;AACA,SAAKC,WAAL,GAAmB,CAAC,CAApB;AACA,SAAKlF,IAAL,GAAY,KAAKA,IAAL,CAAUmF,IAAV,CAAe,IAAf,CAAZ;AACA,SAAKC,YAAL;AACH;;AAVe;AAAA;AAAA,WAWhB,gBAAOpB,OAAP,EAAe;AACX,UAAIqB,EAAE,GAAG,KAAKN,IAAL,CAAU5H,KAAV,CAAgBuC,KAAhB,CAAsBtD,QAAQ,CAACe,KAA/B,EAAsC4C,OAA/C;;AACA,UAAIiE,OAAM,CAACsB,eAAX,EAA4B;AACxB,YAAID,EAAE,CAACE,cAAH,CAAkBvB,OAAM,CAACe,IAAP,CAAY7D,QAA9B,CAAJ,EACImE,EAAE,CAACG,KAAH;AACJ,YAAI,KAAKT,IAAL,CAAU7D,QAAV,CAAmBzD,EAAnB,GAAwB4H,EAAE,CAACzG,IAAH,CAAQjB,MAApC,EACI,KAAKyH,YAAL;AACP;;AACD,UAAIpB,OAAM,CAACN,UAAX,EAAuB;AACnB,YAAI,KAAKqB,IAAL,CAAUU,QAAd,EACI,KAAKP,WAAL,IAAoB;AAAG;AAAvB;AACJ,aAAKE,YAAL;AACH;;AACD,WAAKM,kBAAL,CAAwBL,EAAxB;AACH;AAzBe;AAAA;AAAA,WA0BhB,wBAA4B;AAAA,UAAfM,KAAe,uEAAP,KAAO;AACxB,UAAI,KAAKX,OAAL,GAAe,CAAC,CAApB,EACI;AACA,UAAE7H,KAAF,GAAY,KAAK4H,IAAjB,CAAE5H,KAAF;AAAA,UAAuBuC,KAAvB,GAA+BvC,KAAK,CAACuC,KAAN,CAAYtD,QAAQ,CAACe,KAArB,CAA/B;AACJ,UAAI,CAACwI,KAAD,IAAUjG,KAAK,CAACd,IAAN,CAAWjB,MAAX,IAAqBR,KAAK,CAACO,GAAN,CAAUC,MAA7C,EACI;AACJ,WAAKqH,OAAL,GAAeX,WAAW,CAAC,KAAKrE,IAAN,EAAY;AAAEH,QAAAA,OAAO,EAAE;AAAI;;AAAf,OAAZ,CAA1B;AACH;AAjCe;AAAA;AAAA,WAkChB,cAAK+F,QAAL,EAAe;AACX,WAAKZ,OAAL,GAAe,CAAC,CAAhB;AACA,UAAItD,GAAG,GAAGD,IAAI,CAACC,GAAL,EAAV;;AACA,UAAI,KAAKuD,QAAL,GAAgBvD,GAAhB,KAAwB,KAAKuD,QAAL,GAAgB,CAAhB,IAAqB,KAAKF,IAAL,CAAUU,QAAvD,CAAJ,EAAsE;AAAE;AACpE,aAAKR,QAAL,GAAgBvD,GAAG,GAAG;AAAM;AAA5B;AACA,aAAKwD,WAAL,GAAmB;AAAK;AAAxB;AACH;;AACD,UAAI,KAAKA,WAAL,IAAoB,CAAxB,EACI,OARO,CAQC;;AACZ,uBAAwC,KAAKH,IAA7C;AAAA,UAAM5H,KAAN,cAAMA,KAAN;AAAA,UAA6B0I,IAA7B,cAAa3E,QAAb,CAAyBzD,EAAzB;AAAA,UAAmDiC,KAAnD,GAA2DvC,KAAK,CAACuC,KAAN,CAAYtD,QAAQ,CAACe,KAArB,CAA3D;AACA,UAAIuC,KAAK,CAACd,IAAN,CAAWjB,MAAX,IAAqBkI,IAAI,GAAG;AAAQ;AAAxC,QACI;AACJ,UAAIvE,IAAI,GAAGT,IAAI,CAACC,GAAL,CAAS,KAAKoE,WAAd,EAA2BU,QAAQ,GAAG/E,IAAI,CAACgD,GAAL,CAAS;AAAG;AAAZ,QAA4B+B,QAAQ,CAACE,aAAT,EAA5B,CAAH,GAA2D;AAAI;AAAlG,OAAX;AACA,UAAInE,IAAI,GAAGjC,KAAK,CAACK,OAAN,CAAcC,IAAd,CAAmBsB,IAAnB,EAAyBuE,IAAI,GAAG;AAAQ;AAAxC,OAAX;AACA,WAAKX,WAAL,IAAoBzD,IAAI,CAACC,GAAL,KAAaA,GAAjC;;AACA,UAAIC,IAAI,IAAI,KAAKuD,WAAL,IAAoB,CAA5B,IAAiCxF,KAAK,CAACK,OAAN,CAAcgG,SAAd,CAAwBF,IAAxB,CAArC,EAAoE;AAChEnG,QAAAA,KAAK,CAACK,OAAN,CAAcwB,QAAd;AACA,aAAKwD,IAAL,CAAUiB,QAAV,CAAmB;AAAE/B,UAAAA,OAAO,EAAE7H,QAAQ,CAAC0C,QAAT,CAAkB7B,EAAlB,CAAqB,IAAIuG,aAAJ,CAAkB9D,KAAK,CAACK,OAAxB,CAArB;AAAX,SAAnB;AACH;;AACD,UAAI,CAAC4B,IAAD,IAAS,KAAKuD,WAAL,GAAmB,CAAhC,EACI,KAAKE,YAAL;AACJ,WAAKM,kBAAL,CAAwBhG,KAAK,CAACK,OAA9B;AACH;AAxDe;AAAA;AAAA,WAyDhB,4BAAmBsF,EAAnB,EAAuB;AAAA;;AACnB,UAAIA,EAAE,CAACjE,UAAP,EAAmB;AACfiE,QAAAA,EAAE,CAACjE,UAAH,CAAc6E,IAAd,CAAmB;AAAA,iBAAM,MAAI,CAACb,YAAL,CAAkB,IAAlB,CAAN;AAAA,SAAnB;AACAC,QAAAA,EAAE,CAACjE,UAAH,GAAgB,IAAhB;AACH;AACJ;AA9De;AAAA;AAAA,WA+DhB,mBAAU;AACN,UAAI,KAAK4D,OAAL,IAAgB,CAApB,EACIN,UAAU,CAAC,KAAKM,OAAN,CAAV;AACP;AAlEe;;AAAA;AAAA,KAmEjB;AACCkB,EAAAA,aAAa,EAAE;AAAEC,IAAAA,KAAF,mBAAU;AAAE,WAAKf,YAAL;AAAsB;AAAlC;AADhB,CAnEiB,CAApB;AAsEA;AACA;AACA;;AACA,IAAMpI,QAAQ,GAAG1B,KAAK,CAACS,MAAN,CAAa;AAC1BC,EAAAA,OAD0B,mBAClBoK,SADkB,EACP;AAAE,WAAOA,SAAS,CAACzI,MAAV,GAAmByI,SAAS,CAAC,CAAD,CAA5B,GAAkC,IAAzC;AAAgD,GAD3C;AAE1BC,EAAAA,OAAO,EAAE,CAACjK,QAAQ,CAACe,KAAV,EAAiB0H,WAAjB;AAFiB,CAAb,CAAjB;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;IACMyB,e;AACF;AACJ;AACA;AACI;AACA;AACJ;AACA;AACItJ,QAJA,EAWc;AAAA,MAAduJ,OAAc,uEAAJ,EAAI;;AAAA;;AACV,OAAKvJ,QAAL,GAAgBA,QAAhB;AACA,OAAKuJ,OAAL,GAAeA,OAAf;AACA,OAAKxJ,SAAL,GAAiB,CAACC,QAAD,EAAWuJ,OAAX,CAAjB;AACH,C;AAEL;AACA;AACA;AACA;AACA;AACA;;;IACMC,mB;AACF;AACA;AACJ;AACA;AACIC,EAAAA,IAJA;AAKA;AACJ;AACA;AACIC,EAAAA,KARA;AASA;AACJ;AACA;AACIC,EAAAA,UAZA;AAaA;AACJ;AACA;AACA;AACIC,EAAAA,QAjBA,EAiBUC,QAjBV,EAiBoB;AAAA;;AAChB,SAAKJ,IAAL,GAAYA,IAAZ;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA;AACR;AACA;;AACQ,SAAKN,OAAL,GAAepK,SAAf;AACA,SAAK2K,OAAL,GAAe,IAAf;AACH;AACD;AACJ;AACA;AACA;AACA;;;;;WACI,gBAAO;AAAA;;AACH,aAAO,KAAKA,OAAL,KAAiB,KAAKA,OAAL,GAAe,KAAKD,QAAL,GAAgBZ,IAAhB,CAAqB,UAAAM,OAAO;AAAA,eAAI,MAAI,CAACA,OAAL,GAAeA,OAAnB;AAAA,OAA5B,EAAwD,UAAAQ,GAAG,EAAI;AAAE,QAAA,MAAI,CAACD,OAAL,GAAe,IAAf;AAAqB,cAAMC,GAAN;AAAY,OAAlG,CAAhC,CAAP;AACH;AACD;AACJ;AACA;;;;WACI,YAAUxH,IAAV,EAAgB;AACZ,aAAO,IAAIiH,mBAAJ,CAAwBjH,IAAI,CAACkH,IAA7B,EAAmC,CAAClH,IAAI,CAACmH,KAAL,IAAc,EAAf,EAAmBxK,MAAnB,CAA0BqD,IAAI,CAACkH,IAA/B,EAAqCO,GAArC,CAAyC,UAAAC,CAAC;AAAA,eAAIA,CAAC,CAACC,WAAF,EAAJ;AAAA,OAA1C,CAAnC,EAAmG3H,IAAI,CAACoH,UAAL,IAAmB,EAAtH,EAA0HpH,IAAI,CAACqH,QAA/H,EAAyIrH,IAAI,CAAC4H,IAA9I,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;;WACI,uBAAqBC,KAArB,EAA4BR,QAA5B,EAAsC;AAAA,kDACpBQ,KADoB;AAAA;;AAAA;AAClC;AAAA,cAASC,EAAT;AACI,cAAIA,EAAC,CAACT,QAAF,IAAcS,EAAC,CAACT,QAAF,CAAWU,IAAX,CAAgBV,QAAhB,CAAlB,EACI,OAAOS,EAAP;AAFR;AADkC;AAAA;AAAA;AAAA;AAAA;;AAIlC,UAAIE,GAAG,GAAG,aAAaC,IAAb,CAAkBZ,QAAlB,CAAV;;AACA,UAAIW,GAAJ;AAAA,oDACkBH,KADlB;AAAA;;AAAA;AACI;AAAA,gBAASC,CAAT;AACI,gBAAIA,CAAC,CAACV,UAAF,CAAac,OAAb,CAAqBF,GAAG,CAAC,CAAD,CAAxB,IAA+B,CAAC,CAApC,EACI,OAAOF,CAAP;AAFR;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,aAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;;WACI,2BAAyBD,KAAzB,EAAgCX,IAAhC,EAAoD;AAAA,UAAdiB,KAAc,uEAAN,IAAM;AAChDjB,MAAAA,IAAI,GAAGA,IAAI,CAACS,WAAL,EAAP;;AADgD,kDAElCE,KAFkC;AAAA;;AAAA;AAEhD;AAAA,cAASC,GAAT;AACI,cAAIA,GAAC,CAACX,KAAF,CAAQiB,IAAR,CAAa,UAAAC,CAAC;AAAA,mBAAIA,CAAC,IAAInB,IAAT;AAAA,WAAd,CAAJ,EACI,OAAOY,GAAP;AAFR;AAFgD;AAAA;AAAA;AAAA;AAAA;;AAKhD,UAAIK,KAAJ;AAAA,oDACkBN,KADlB;AAAA;;AAAA;AACI;AAAA,gBAASC,CAAT;;AAAA,wDACkBA,CAAC,CAACX,KADpB;AAAA;;AAAA;AACI,qEAAuB;AAAA,oBAAdkB,CAAc;AACnB,oBAAIC,KAAK,GAAGpB,IAAI,CAACgB,OAAL,CAAaG,CAAb,CAAZ;AACA,oBAAIC,KAAK,GAAG,CAAC,CAAT,KAAeD,CAAC,CAACjK,MAAF,GAAW,CAAX,IAAgB,CAAC,KAAK2J,IAAL,CAAUb,IAAI,CAACoB,KAAK,GAAG,CAAT,CAAd,CAAD,IAA+B,CAAC,KAAKP,IAAL,CAAUb,IAAI,CAACoB,KAAK,GAAGD,CAAC,CAACjK,MAAX,CAAd,CAA/D,CAAJ,EACI,OAAO0J,CAAP;AACP;AALL;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOA,aAAO,IAAP;AACH;;;;;AAGL;AACA;AACA;AACA;AACA;;;AACA,IAAMS,aAAa,GAAGxM,KAAK,CAACS,MAAN,EAAtB;AACA;AACA;AACA;AACA;AACA;;AACA,IAAMgM,UAAU,GAAGzM,KAAK,CAACS,MAAN,CAAa;AAC5BC,EAAAA,OAAO,EAAE,iBAAAC,MAAM,EAAI;AACf,QAAI,CAACA,MAAM,CAAC0B,MAAZ,EACI,OAAO,IAAP;AACJ,QAAI,CAAC,eAAe2J,IAAf,CAAoBrL,MAAM,CAAC,CAAD,CAA1B,CAAL,EACI,MAAM,IAAI+L,KAAJ,CAAU,0BAA0BC,IAAI,CAACC,SAAL,CAAejM,MAAM,CAAC,CAAD,CAArB,CAApC,CAAN;AACJ,WAAOA,MAAM,CAAC,CAAD,CAAb;AACH;AAP2B,CAAb,CAAnB;AASA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASkM,aAAT,CAAuBhL,KAAvB,EAA8B;AAC1B,MAAIiL,IAAI,GAAGjL,KAAK,CAACE,KAAN,CAAY0K,UAAZ,CAAX;AACA,SAAOK,IAAI,CAAC3H,UAAL,CAAgB,CAAhB,KAAsB,CAAtB,GAA0BtD,KAAK,CAACkL,OAAN,GAAgBD,IAAI,CAACzK,MAA/C,GAAwDyK,IAAI,CAACzK,MAApE;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS2K,YAAT,CAAsBnL,KAAtB,EAA6BoL,IAA7B,EAAmC;AAC/B,MAAI1K,MAAM,GAAG,EAAb;AAAA,MAAiB2K,EAAE,GAAGrL,KAAK,CAACkL,OAA5B;AACA,MAAIlL,KAAK,CAACE,KAAN,CAAY0K,UAAZ,EAAwBtH,UAAxB,CAAmC,CAAnC,KAAyC,CAA7C,EACI,OAAO8H,IAAI,IAAIC,EAAf,EAAmB;AACf3K,IAAAA,MAAM,IAAI,IAAV;AACA0K,IAAAA,IAAI,IAAIC,EAAR;AACH;;AACL,OAAK,IAAI3F,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0F,IAApB,EAA0B1F,CAAC,EAA3B;AACIhF,IAAAA,MAAM,IAAI,GAAV;AADJ;;AAEA,SAAOA,MAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS4K,cAAT,CAAwB1I,OAAxB,EAAiC3C,GAAjC,EAAsC;AAClC,MAAI2C,OAAO,YAAYxE,WAAvB,EACIwE,OAAO,GAAG,IAAI2I,aAAJ,CAAkB3I,OAAlB,CAAV;;AAF8B,8CAGdA,OAAO,CAAC5C,KAAR,CAAcE,KAAd,CAAoByK,aAApB,CAHc;AAAA;;AAAA;AAGlC,2DAAwD;AAAA,UAA/Ca,OAA+C;AACpD,UAAI9K,MAAM,GAAG8K,OAAO,CAAC5I,OAAD,EAAU3C,GAAV,CAApB;AACA,UAAIS,MAAM,IAAI,IAAd,EACI,OAAOA,MAAP;AACP;AAPiC;AAAA;AAAA;AAAA;AAAA;;AAQlC,MAAIe,IAAI,GAAG9B,UAAU,CAACiD,OAAO,CAAC5C,KAAT,CAArB;AACA,SAAOyB,IAAI,GAAGgK,iBAAiB,CAAC7I,OAAD,EAAUnB,IAAV,EAAgBxB,GAAhB,CAApB,GAA2C,IAAtD;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;IACMsL,a;AACF;AACJ;AACA;AACI;AACA;AACJ;AACA;AACIvL,EAAAA,KAJA,EAQc;AAAA,QAAdiC,OAAc,uEAAJ,EAAI;;AAAA;;AACV,SAAKjC,KAAL,GAAaA,KAAb;AACA,SAAKiC,OAAL,GAAeA,OAAf;AACA,SAAKgJ,IAAL,GAAYD,aAAa,CAAChL,KAAD,CAAzB;AACH;AACD;AACJ;AACA;AACA;;;;;WACI,sBAAaC,GAAb,EAAkB;AACd,UAAI0C,EAAJ,EAAQ+I,EAAR;;AACA,UAAIC,GAAG,GAAG,CAAChJ,EAAE,GAAG,KAAKV,OAAX,MAAwB,IAAxB,IAAgCU,EAAE,KAAK,KAAK,CAA5C,GAAgD,KAAK,CAArD,GAAyDA,EAAE,CAACiJ,aAAtE;AACA,UAAI3L,GAAG,IAAI0L,GAAP,KAAe,CAACD,EAAE,GAAG,KAAKzJ,OAAX,MAAwB,IAAxB,IAAgCyJ,EAAE,KAAK,KAAK,CAA5C,GAAgD,KAAK,CAArD,GAAyDA,EAAE,CAACG,mBAA3E,CAAJ,EACI,OAAO,EAAP;AACJ,aAAO,KAAK7L,KAAL,CAAW8L,QAAX,CAAoB7L,GAApB,EAAyByD,IAAI,CAACC,GAAL,CAAS1D,GAAG,GAAG,GAAf,EAAoB0L,GAAG,IAAI,IAAP,IAAeA,GAAG,GAAG1L,GAArB,GAA2B0L,GAA3B,GAAiC,GAArD,EAA0D,KAAK3L,KAAL,CAAWO,GAAX,CAAewL,MAAf,CAAsB9L,GAAtB,EAA2BK,EAArF,CAAzB,CAAP;AACH;AACD;AACJ;AACA;;;;WACI,gBAAOL,GAAP,EAAY;AACR,UAAI0C,EAAJ;;AACA,UAAIqJ,IAAI,GAAG,KAAKhM,KAAL,CAAWO,GAAX,CAAewL,MAAf,CAAsB9L,GAAtB,CAAX;AAAA,UAAuCgM,IAAI,GAAGD,IAAI,CAACC,IAAL,CAAUxI,KAAV,CAAgB,CAAhB,EAAmBxD,GAAG,GAAG+L,IAAI,CAAC3L,IAA9B,CAA9C;AACA,UAAIK,MAAM,GAAG,KAAKxC,WAAL,CAAiB+N,IAAjB,EAAuBhM,GAAG,GAAG+L,IAAI,CAAC3L,IAAlC,CAAb;AACA,UAAI6L,QAAQ,GAAG,CAAC,CAACvJ,EAAE,GAAG,KAAKV,OAAX,MAAwB,IAAxB,IAAgCU,EAAE,KAAK,KAAK,CAA5C,GAAgD,KAAK,CAArD,GAAyDA,EAAE,CAACwJ,mBAA7D,IAAoF,KAAKlK,OAAL,CAAakK,mBAAb,CAAiCH,IAAI,CAAC3L,IAAtC,CAApF,GAAkI,CAAC,CAAlJ;AACA,UAAI6L,QAAQ,GAAG,CAAC,CAAhB,EACIxL,MAAM,IAAIwL,QAAQ,GAAG,KAAKhO,WAAL,CAAiB+N,IAAjB,EAAuBA,IAAI,CAACG,MAAL,CAAY,IAAZ,CAAvB,CAArB;AACJ,aAAO1L,MAAP;AACH;AACD;AACJ;AACA;AACA;;;;WACI,qBAAYsL,IAAZ,EAAkB/L,GAAlB,EAAuB;AACnB,aAAO/B,YAAW,CAAC+B,GAAG,GAAG,CAAN,GAAU+L,IAAV,GAAiBA,IAAI,CAACvI,KAAL,CAAW,CAAX,EAAcxD,GAAd,CAAlB,EAAsC,CAAtC,EAAyC,KAAKD,KAAL,CAAWkL,OAApD,CAAlB;AACH;AACD;AACJ;AACA;;;;WACI,oBAAWc,IAAX,EAAiB;AACb,UAAIrJ,EAAJ;;AACA,UAAIuJ,QAAQ,GAAG,CAACvJ,EAAE,GAAG,KAAKV,OAAX,MAAwB,IAAxB,IAAgCU,EAAE,KAAK,KAAK,CAA5C,GAAgD,KAAK,CAArD,GAAyDA,EAAE,CAACwJ,mBAA3E;;AACA,UAAID,QAAJ,EAAc;AACV,YAAIG,SAAS,GAAGH,QAAQ,CAACF,IAAI,CAAC3L,IAAN,CAAxB;AACA,YAAIgM,SAAS,GAAG,CAAC,CAAjB,EACI,OAAOA,SAAP;AACP;;AACD,aAAO,KAAKnO,WAAL,CAAiB8N,IAAI,CAACC,IAAtB,EAA4BD,IAAI,CAACC,IAAL,CAAUG,MAAV,CAAiB,IAAjB,CAA5B,CAAP;AACH;;;;;AAEL;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAME,cAAc,GAAG,IAAIzO,QAAJ,EAAvB,C,CACA;;AACA,SAAS4N,iBAAT,CAA2BvD,EAA3B,EAA+BqE,GAA/B,EAAoCtM,GAApC,EAAyC;AACrC,MAAIwB,IAAI,GAAG8K,GAAG,CAACzK,OAAJ,CAAY7B,GAAZ,CAAX,CADqC,CAErC;AACA;AACA;;AACA,OAAK,IAAIuM,IAAI,GAAG/K,IAAX,EAAiBgL,OAAO,GAAGxM,GAAhC,IAAuC;AACnC,QAAIyM,IAAI,GAAGF,IAAI,CAACG,WAAL,CAAiBF,OAAjB,CAAX;AACA,QAAI,CAACC,IAAL,EACI;;AACJ,QAAIA,IAAI,CAAC7L,IAAL,CAAU+L,OAAV,IAAqBF,IAAI,CAACrM,IAAL,IAAaqM,IAAI,CAACpM,EAA3C,EAA+C;AAC3CmB,MAAAA,IAAI,GAAG+K,IAAP;AACAC,MAAAA,OAAO,GAAGC,IAAI,CAACrM,IAAf;AACH,KAHD,MAIK;AACDmM,MAAAA,IAAI,GAAGE,IAAP;AACAD,MAAAA,OAAO,GAAGD,IAAI,CAAClM,EAAL,GAAU,CAApB;AACH;AACJ;;AACD,SAAOuM,UAAU,CAACpL,IAAD,EAAOxB,GAAP,EAAYiI,EAAZ,CAAjB;AACH;;AACD,SAAS4E,YAAT,CAAsB5E,EAAtB,EAA0B;AACtB,MAAIvF,EAAJ,EAAQ+I,EAAR;;AACA,SAAOxD,EAAE,CAACjI,GAAH,KAAW,CAAC0C,EAAE,GAAGuF,EAAE,CAACjG,OAAT,MAAsB,IAAtB,IAA8BU,EAAE,KAAK,KAAK,CAA1C,GAA8C,KAAK,CAAnD,GAAuDA,EAAE,CAACiJ,aAArE,MAAwF,CAACF,EAAE,GAAGxD,EAAE,CAACjG,OAAT,MAAsB,IAAtB,IAA8ByJ,EAAE,KAAK,KAAK,CAA1C,GAA8C,KAAK,CAAnD,GAAuDA,EAAE,CAACG,mBAAlJ,CAAP;AACH;;AACD,SAASkB,cAAT,CAAwBtL,IAAxB,EAA8B;AAC1B,MAAIuL,QAAQ,GAAGvL,IAAI,CAACZ,IAAL,CAAUE,IAAV,CAAeuL,cAAf,CAAf;AACA,MAAIU,QAAJ,EACI,OAAOA,QAAP;AACJ,MAAIC,KAAK,GAAGxL,IAAI,CAACyL,UAAjB;AAAA,MAA6BC,KAA7B;;AACA,MAAIF,KAAK,KAAKE,KAAK,GAAGF,KAAK,CAACpM,IAAN,CAAWE,IAAX,CAAgBlD,QAAQ,CAACuP,QAAzB,CAAb,CAAT,EAA2D;AACvD,QAAIV,IAAI,GAAGjL,IAAI,CAAC4L,SAAhB;AAAA,QAA2BC,MAAM,GAAGZ,IAAI,IAAIS,KAAK,CAAC7C,OAAN,CAAcoC,IAAI,CAACpD,IAAnB,IAA2B,CAAC,CAAxE;AACA,WAAO,UAAApB,EAAE;AAAA,aAAIqF,iBAAiB,CAACrF,EAAD,EAAK,IAAL,EAAW,CAAX,EAAclJ,SAAd,EAAyBsO,MAAM,IAAI,CAACR,YAAY,CAAC5E,EAAD,CAAvB,GAA8BwE,IAAI,CAACrM,IAAnC,GAA0CrB,SAAnE,CAArB;AAAA,KAAT;AACH;;AACD,SAAOyC,IAAI,CAACM,MAAL,IAAe,IAAf,GAAsByL,SAAtB,GAAkC,IAAzC;AACH;;AACD,SAASX,UAAT,CAAoBY,IAApB,EAA0BxN,GAA1B,EAA+ByN,IAA/B,EAAqC;AACjC,SAAOD,IAAP,EAAaA,IAAI,GAAGA,IAAI,CAAC1L,MAAzB,EAAiC;AAC7B,QAAIiL,QAAQ,GAAGD,cAAc,CAACU,IAAD,CAA7B;AACA,QAAIT,QAAJ,EACI,OAAOA,QAAQ,CAAC,IAAIW,iBAAJ,CAAsBD,IAAtB,EAA4BzN,GAA5B,EAAiCwN,IAAjC,CAAD,CAAf;AACP;;AACD,SAAO,IAAP;AACH;;AACD,SAASD,SAAT,GAAqB;AAAE,SAAO,CAAP;AAAW;AAClC;AACA;AACA;AACA;;;IACMG,iB;;;;;AACF;AACJ;AACA;AACI,6BAAYD,IAAZ;AACA;AACJ;AACA;AACIzN,EAAAA,GAJA;AAKA;AACJ;AACA;AACA;AACIwN,EAAAA,IATA,EASM;AAAA;;AAAA;;AACF,gCAAMC,IAAI,CAAC1N,KAAX,EAAkB0N,IAAI,CAACzL,OAAvB;AACA,WAAKyL,IAAL,GAAYA,IAAZ;AACA,WAAKzN,GAAL,GAAWA,GAAX;AACA,WAAKwN,IAAL,GAAYA,IAAZ;AAJE;AAKL;AACD;AACJ;AACA;AACA;;;;;SACI,eAAgB;AACZ,aAAO,KAAKG,YAAL,CAAkB,KAAK3N,GAAvB,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;;SACI,eAAiB;AACb,UAAI+L,IAAI,GAAG,KAAKhM,KAAL,CAAWO,GAAX,CAAewL,MAAf,CAAsB,KAAK0B,IAAL,CAAUpN,IAAhC,CAAX,CADa,CAEb;;AACA,eAAS;AACL,YAAIwN,OAAO,GAAG,KAAKJ,IAAL,CAAU3L,OAAV,CAAkBkK,IAAI,CAAC3L,IAAvB,CAAd;;AACA,eAAOwN,OAAO,CAAC9L,MAAR,IAAkB8L,OAAO,CAAC9L,MAAR,CAAe1B,IAAf,IAAuBwN,OAAO,CAACxN,IAAxD;AACIwN,UAAAA,OAAO,GAAGA,OAAO,CAAC9L,MAAlB;AADJ;;AAEA,YAAI+L,QAAQ,CAACD,OAAD,EAAU,KAAKJ,IAAf,CAAZ,EACI;AACJzB,QAAAA,IAAI,GAAG,KAAKhM,KAAL,CAAWO,GAAX,CAAewL,MAAf,CAAsB8B,OAAO,CAACxN,IAA9B,CAAP;AACH;;AACD,aAAO,KAAK0N,UAAL,CAAgB/B,IAAhB,CAAP;AACH;AACD;AACJ;AACA;AACA;;;;WACI,qBAAW;AACP,UAAIjK,MAAM,GAAG,KAAK0L,IAAL,CAAU1L,MAAvB;AACA,aAAOA,MAAM,GAAG8K,UAAU,CAAC9K,MAAD,EAAS,KAAK9B,GAAd,EAAmB,KAAKyN,IAAxB,CAAb,GAA6C,CAA1D;AACH;;;;EArD2BnC,a;;AAuDhC,SAASuC,QAAT,CAAkB/L,MAAlB,EAA0BjC,EAA1B,EAA8B;AAC1B,OAAK,IAAIkO,GAAG,GAAGlO,EAAf,EAAmBkO,GAAnB,EAAwBA,GAAG,GAAGA,GAAG,CAACjM,MAAlC;AACI,QAAIA,MAAM,IAAIiM,GAAd,EACI,OAAO,IAAP;AAFR;;AAGA,SAAO,KAAP;AACH,C,CACD;AACA;AACA;;;AACA,SAASC,gBAAT,CAA0BrL,OAA1B,EAAmC;AAC/B,MAAID,EAAJ;;AACA,MAAIlB,IAAI,GAAGmB,OAAO,CAAC6K,IAAnB;AACA,MAAIS,SAAS,GAAGzM,IAAI,CAAC0M,UAAL,CAAgB1M,IAAI,CAACpB,IAArB,CAAhB;AAAA,MAA4CqM,IAAI,GAAGjL,IAAI,CAAC4L,SAAxD;AACA,MAAI,CAACa,SAAL,EACI,OAAO,IAAP;AACJ,MAAIvC,GAAG,GAAG,CAAChJ,EAAE,GAAGC,OAAO,CAACX,OAAd,MAA2B,IAA3B,IAAmCU,EAAE,KAAK,KAAK,CAA/C,GAAmD,KAAK,CAAxD,GAA4DA,EAAE,CAACiJ,aAAzE;AACA,MAAIwC,QAAQ,GAAGxL,OAAO,CAAC5C,KAAR,CAAcO,GAAd,CAAkBwL,MAAlB,CAAyBmC,SAAS,CAAC7N,IAAnC,CAAf;AACA,MAAIgO,OAAO,GAAG1C,GAAG,IAAI,IAAP,IAAeA,GAAG,IAAIyC,QAAQ,CAAC/N,IAA/B,GAAsC+N,QAAQ,CAAC9N,EAA/C,GAAoDoD,IAAI,CAACC,GAAL,CAASyK,QAAQ,CAAC9N,EAAlB,EAAsBqL,GAAtB,CAAlE;;AACA,OAAK,IAAI1L,GAAG,GAAGiO,SAAS,CAAC5N,EAAzB,IAA+B;AAC3B,QAAI6C,IAAI,GAAG1B,IAAI,CAAC0M,UAAL,CAAgBlO,GAAhB,CAAX;AACA,QAAI,CAACkD,IAAD,IAASA,IAAI,IAAIuJ,IAArB,EACI,OAAO,IAAP;AACJ,QAAI,CAACvJ,IAAI,CAACtC,IAAL,CAAUyN,SAAf,EACI,OAAOnL,IAAI,CAAC9C,IAAL,GAAYgO,OAAZ,GAAsBH,SAAtB,GAAkC,IAAzC;AACJjO,IAAAA,GAAG,GAAGkD,IAAI,CAAC7C,EAAX;AACH;AACJ;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASiO,eAAT,QAA+D;AAAA,MAApCC,OAAoC,SAApCA,OAAoC;AAAA,0BAA3BC,KAA2B;AAAA,MAA3BA,KAA2B,4BAAnB,IAAmB;AAAA,0BAAbC,KAAa;AAAA,MAAbA,KAAa,4BAAL,CAAK;AAC3D,SAAO,UAAC9L,OAAD;AAAA,WAAa2K,iBAAiB,CAAC3K,OAAD,EAAU6L,KAAV,EAAiBC,KAAjB,EAAwBF,OAAxB,CAA9B;AAAA,GAAP;AACH;;AACD,SAASjB,iBAAT,CAA2B3K,OAA3B,EAAoC6L,KAApC,EAA2CC,KAA3C,EAAkDF,OAAlD,EAA2DG,QAA3D,EAAqE;AACjE,MAAIC,KAAK,GAAGhM,OAAO,CAACiM,SAApB;AAAA,MAA+BC,KAAK,GAAGF,KAAK,CAACG,KAAN,CAAY,MAAZ,EAAoB,CAApB,EAAuBvO,MAA9D;AACA,MAAI8M,MAAM,GAAGkB,OAAO,IAAII,KAAK,CAACnL,KAAN,CAAYqL,KAAZ,EAAmBA,KAAK,GAAGN,OAAO,CAAChO,MAAnC,KAA8CgO,OAAzD,IAAoEG,QAAQ,IAAI/L,OAAO,CAAC3C,GAAR,GAAc6O,KAA3G;AACA,MAAIE,OAAO,GAAGP,KAAK,GAAGR,gBAAgB,CAACrL,OAAD,CAAnB,GAA+B,IAAlD;AACA,MAAIoM,OAAJ,EACI,OAAO1B,MAAM,GAAG1K,OAAO,CAACqM,MAAR,CAAeD,OAAO,CAAC3O,IAAvB,CAAH,GAAkCuC,OAAO,CAACqM,MAAR,CAAeD,OAAO,CAAC1O,EAAvB,CAA/C;AACJ,SAAOsC,OAAO,CAACsM,UAAR,IAAsB5B,MAAM,GAAG,CAAH,GAAO1K,OAAO,CAACqI,IAAR,GAAeyD,KAAlD,CAAP;AACH;AACD;AACA;AACA;AACA;;;AACA,IAAMS,UAAU,GAAG,SAAbA,UAAa,CAACvM,OAAD;AAAA,SAAaA,OAAO,CAACsM,UAArB;AAAA,CAAnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,eAAT,GAAqD;AAAA,kFAAJ,EAAI;AAAA,MAA1BC,MAA0B,SAA1BA,MAA0B;AAAA,0BAAlBX,KAAkB;AAAA,MAAlBA,KAAkB,4BAAV,CAAU;;AACjD,SAAO,UAAC9L,OAAD,EAAa;AAChB,QAAI0M,WAAW,GAAGD,MAAM,IAAIA,MAAM,CAAClF,IAAP,CAAYvH,OAAO,CAACiM,SAApB,CAA5B;AACA,WAAOjM,OAAO,CAACsM,UAAR,IAAsBI,WAAW,GAAG,CAAH,GAAOZ,KAAK,GAAG9L,OAAO,CAACqI,IAAxD,CAAP;AACH,GAHD;AAIH;;AACD,IAAMsE,gBAAgB,GAAG,GAAzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,aAAT,GAAyB;AACrB,SAAOpR,WAAW,CAACqR,iBAAZ,CAA8B3P,EAA9B,CAAiC,UAAAwG,EAAE,EAAI;AAC1C,QAAI,CAACA,EAAE,CAACC,UAAJ,IAAkBD,EAAE,CAACoJ,UAAH,CAAcnR,WAAW,CAACoR,SAA1B,KAAwC,OAA9D,EACI,OAAOrJ,EAAP;AACJ,QAAIsJ,KAAK,GAAGtJ,EAAE,CAACG,UAAH,CAAcoJ,cAAd,CAA6B,eAA7B,EAA8CvJ,EAAE,CAACG,UAAH,CAAcqJ,SAAd,CAAwBC,IAAxB,CAA6BC,IAA3E,CAAZ;AACA,QAAI,CAACJ,KAAK,CAACpP,MAAX,EACI,OAAO8F,EAAP;AACA,QAAA/F,GAAG,GAAG+F,EAAE,CAAC2J,MAAT;AAAA,QAAmBD,IAAnB,GAA4B1J,EAAE,CAAC4J,YAAH,CAAgBH,IAA5C,CAAmBC,IAAnB;AAAA,QAAkDhE,IAAlD,GAAyDzL,GAAG,CAACwL,MAAJ,CAAWiE,IAAX,CAAzD;AACJ,QAAIA,IAAI,GAAGhE,IAAI,CAAC3L,IAAL,GAAYkP,gBAAvB,EACI,OAAOjJ,EAAP;AACJ,QAAI6J,SAAS,GAAG5P,GAAG,CAACqD,WAAJ,CAAgBoI,IAAI,CAAC3L,IAArB,EAA2B2P,IAA3B,CAAhB;AACA,QAAI,CAACJ,KAAK,CAACpF,IAAN,CAAW,UAAA5F,CAAC;AAAA,aAAIA,CAAC,CAACuF,IAAF,CAAOgG,SAAP,CAAJ;AAAA,KAAZ,CAAL,EACI,OAAO7J,EAAP;AACA,QAAEtG,KAAF,GAAYsG,EAAZ,CAAEtG,KAAF;AAAA,QAAgB0M,IAAhB,GAAuB,CAAC,CAAxB;AAAA,QAA2B3H,OAA3B,GAAqC,EAArC;;AAZsC,gDAarB/E,KAAK,CAAC8P,SAAN,CAAgB7K,MAbK;AAAA;;AAAA;AAa1C,6DAA6C;AAAA,YAAlC+K,KAAkC,gBAAlCA,IAAkC;;AACzC,YAAIhE,KAAI,GAAGhM,KAAK,CAACO,GAAN,CAAUwL,MAAV,CAAiBiE,KAAjB,CAAX;;AACA,YAAIhE,KAAI,CAAC3L,IAAL,IAAaqM,IAAjB,EACI;AACJA,QAAAA,IAAI,GAAGV,KAAI,CAAC3L,IAAZ;AACA,YAAI+P,MAAM,GAAG9E,cAAc,CAACtL,KAAD,EAAQgM,KAAI,CAAC3L,IAAb,CAA3B;AACA,YAAI+P,MAAM,IAAI,IAAd,EACI;AACJ,YAAIpC,GAAG,GAAG,OAAO3D,IAAP,CAAY2B,KAAI,CAACC,IAAjB,EAAuB,CAAvB,CAAV;AACA,YAAIoE,IAAI,GAAGlF,YAAY,CAACnL,KAAD,EAAQoQ,MAAR,CAAvB;AACA,YAAIpC,GAAG,IAAIqC,IAAX,EACItL,OAAO,CAAC/D,IAAR,CAAa;AAAEX,UAAAA,IAAI,EAAE2L,KAAI,CAAC3L,IAAb;AAAmBC,UAAAA,EAAE,EAAE0L,KAAI,CAAC3L,IAAL,GAAY2N,GAAG,CAACxN,MAAvC;AAA+C8P,UAAAA,MAAM,EAAED;AAAvD,SAAb;AACP;AAzByC;AAAA;AAAA;AAAA;AAAA;;AA0B1C,WAAOtL,OAAO,CAACvE,MAAR,GAAiB,CAAC8F,EAAD,EAAK;AAAEvB,MAAAA,OAAO,EAAPA;AAAF,KAAL,CAAjB,GAAqCuB,EAA5C;AACH,GA3BM,CAAP;AA4BH;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAMiK,WAAW,GAAGpS,KAAK,CAACS,MAAN,EAApB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAM4R,YAAY,GAAG,IAAI3S,QAAJ,EAArB;AACA;AACA;AACA;AACA;AACA;;AACA,SAAS4S,UAAT,CAAoBhD,IAApB,EAA0B;AACtB,MAAIR,KAAK,GAAGQ,IAAI,CAACP,UAAjB;AAAA,MAA6BR,IAAI,GAAGe,IAAI,CAACJ,SAAzC;AACA,SAAOJ,KAAK,IAAIA,KAAK,CAAC3M,EAAN,GAAWoM,IAAI,CAACrM,IAAzB,GAAgC;AAAEA,IAAAA,IAAI,EAAE4M,KAAK,CAAC3M,EAAd;AAAkBA,IAAAA,EAAE,EAAEoM,IAAI,CAAC7L,IAAL,CAAU+L,OAAV,GAAoBa,IAAI,CAACnN,EAAzB,GAA8BoM,IAAI,CAACrM;AAAzD,GAAhC,GAAkG,IAAzG;AACH;;AACD,SAASqQ,aAAT,CAAuB1Q,KAAvB,EAA8B2Q,KAA9B,EAAqCC,GAArC,EAA0C;AACtC,MAAInP,IAAI,GAAG9B,UAAU,CAACK,KAAD,CAArB;AACA,MAAIyB,IAAI,CAACjB,MAAL,IAAe,CAAnB,EACI,OAAO,IAAP;AACJ,MAAIqQ,KAAK,GAAGpP,IAAI,CAACK,OAAL,CAAa8O,GAAb,CAAZ;AACA,MAAIlG,KAAK,GAAG,IAAZ;;AACA,OAAK,IAAIsD,GAAG,GAAG6C,KAAf,EAAsB7C,GAAtB,EAA2BA,GAAG,GAAGA,GAAG,CAACjM,MAArC,EAA6C;AACzC,QAAIiM,GAAG,CAAC1N,EAAJ,IAAUsQ,GAAV,IAAiB5C,GAAG,CAAC3N,IAAJ,GAAWuQ,GAAhC,EACI;AACJ,QAAIlG,KAAK,IAAIsD,GAAG,CAAC3N,IAAJ,GAAWsQ,KAAxB,EACI;AACJ,QAAI5P,IAAI,GAAGiN,GAAG,CAACnN,IAAJ,CAASE,IAAT,CAAcyP,YAAd,CAAX;;AACA,QAAIzP,IAAJ,EAAU;AACN,UAAIqC,KAAK,GAAGrC,IAAI,CAACiN,GAAD,EAAMhO,KAAN,CAAhB;AACA,UAAIoD,KAAK,IAAIA,KAAK,CAAC/C,IAAN,IAAcuQ,GAAvB,IAA8BxN,KAAK,CAAC/C,IAAN,IAAcsQ,KAA5C,IAAqDvN,KAAK,CAAC9C,EAAN,GAAWsQ,GAApE,EACIlG,KAAK,GAAGtH,KAAR;AACP;AACJ;;AACD,SAAOsH,KAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASoG,QAAT,CAAkB9Q,KAAlB,EAAyBmQ,SAAzB,EAAoC9B,OAApC,EAA6C;AAAA,+CACrBrO,KAAK,CAACE,KAAN,CAAYqQ,WAAZ,CADqB;AAAA;;AAAA;AACzC,8DAA8C;AAAA,UAArC/E,OAAqC;AAC1C,UAAI9K,MAAM,GAAG8K,OAAO,CAACxL,KAAD,EAAQmQ,SAAR,EAAmB9B,OAAnB,CAApB;AACA,UAAI3N,MAAJ,EACI,OAAOA,MAAP;AACP;AALwC;AAAA;AAAA;AAAA;AAAA;;AAMzC,SAAOgQ,aAAa,CAAC1Q,KAAD,EAAQmQ,SAAR,EAAmB9B,OAAnB,CAApB;AACH;;AAED,SAAS/M,kBAAT,EAA6BiK,aAA7B,EAA4CtM,QAA5C,EAAsDoK,mBAAtD,EAA2EF,eAA3E,EAA4FnH,aAA5F,EAA2G2L,iBAA3G,EAA8HyB,eAA9H,EAA+I1Q,mBAA/I,EAAoK6P,eAApK,EAAqL/L,gBAArL,EAAuM2M,UAAvM,EAAmNsB,UAAnN,EAA+ND,YAA/N,EAA6OD,WAA7O,EAA0PO,QAA1P,EAAoQ9F,aAApQ,EAAmRM,cAAnR,EAAmSgB,cAAnS,EAAmTkD,aAAnT,EAAkU7E,aAAlU,EAAiVQ,YAAjV,EAA+VP,UAA/V,EAA2W/K,QAA3W,EAAqXpB,gBAArX,EAAuYkB,UAAvY","sourcesContent":["import { NodeProp, Tree, TreeFragment, NodeType } from 'lezer-tree';\nimport { Text, countColumn } from '@codemirror/text';\nimport { Facet, EditorState, StateEffect, StateField, Transaction } from '@codemirror/state';\nimport { ViewPlugin } from '@codemirror/view';\n\n/**\nNode prop stored in a grammar's top syntax node to provide the\nfacet that stores language data for that language.\n*/\nconst languageDataProp = new NodeProp();\n/**\nHelper function to define a facet (to be added to the top syntax\nnode(s) for a language via\n[`languageDataProp`](https://codemirror.net/6/docs/ref/#language.languageDataProp)), that will be\nused to associate language data with the language. You\nprobably only need this when subclassing\n[`Language`](https://codemirror.net/6/docs/ref/#language.Language).\n*/\nfunction defineLanguageFacet(baseData) {\n    return Facet.define({\n        combine: baseData ? values => values.concat(baseData) : undefined\n    });\n}\n/**\nA language object manages parsing and per-language\n[metadata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt). Parse data is\nmanaged as a [Lezer](https://lezer.codemirror.net) tree. You'll\nwant to subclass this class for custom parsers, or use the\n[`LezerLanguage`](https://codemirror.net/6/docs/ref/#language.LezerLanguage) or\n[`StreamLanguage`](https://codemirror.net/6/docs/ref/#stream-parser.StreamLanguage) abstractions for\n[Lezer](https://lezer.codemirror.net/) or stream parsers.\n*/\nclass Language {\n    /**\n    Construct a language object. You usually don't need to invoke\n    this directly. But when you do, make sure you use\n    [`defineLanguageFacet`](https://codemirror.net/6/docs/ref/#language.defineLanguageFacet) to create\n    the first argument.\n    */\n    constructor(\n    /**\n    The [language data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) data\n    facet used for this language.\n    */\n    data, parser, \n    /**\n    The node type of the top node of trees produced by this parser.\n    */\n    topNode, extraExtensions = []) {\n        this.data = data;\n        this.topNode = topNode;\n        // Kludge to define EditorState.tree as a debugging helper,\n        // without the EditorState package actually knowing about\n        // languages and lezer trees.\n        if (!EditorState.prototype.hasOwnProperty(\"tree\"))\n            Object.defineProperty(EditorState.prototype, \"tree\", { get() { return syntaxTree(this); } });\n        this.parser = parser;\n        this.extension = [\n            language.of(this),\n            EditorState.languageData.of((state, pos) => state.facet(languageDataFacetAt(state, pos)))\n        ].concat(extraExtensions);\n    }\n    /**\n    Query whether this language is active at the given position.\n    */\n    isActiveAt(state, pos) {\n        return languageDataFacetAt(state, pos) == this.data;\n    }\n    /**\n    Find the document regions that were parsed using this language.\n    The returned regions will _include_ any nested languages rooted\n    in this language, when those exist.\n    */\n    findRegions(state) {\n        let lang = state.facet(language);\n        if ((lang === null || lang === void 0 ? void 0 : lang.data) == this.data)\n            return [{ from: 0, to: state.doc.length }];\n        if (!lang || !lang.allowsNesting)\n            return [];\n        let result = [];\n        syntaxTree(state).iterate({\n            enter: (type, from, to) => {\n                if (type.isTop && type.prop(languageDataProp) == this.data) {\n                    result.push({ from, to });\n                    return false;\n                }\n                return undefined;\n            }\n        });\n        return result;\n    }\n    /**\n    Indicates whether this language allows nested languages. The\n    default implementation returns true.\n    */\n    get allowsNesting() { return true; }\n    /**\n    Use this language to parse the given string into a tree.\n    */\n    parseString(code) {\n        let doc = Text.of(code.split(\"\\n\"));\n        let parse = this.parser.startParse(new DocInput(doc), 0, new EditorParseContext(this.parser, EditorState.create({ doc }), [], Tree.empty, { from: 0, to: code.length }, [], null));\n        let tree;\n        while (!(tree = parse.advance())) { }\n        return tree;\n    }\n}\n/**\n@internal\n*/\nLanguage.setState = StateEffect.define();\nfunction languageDataFacetAt(state, pos) {\n    let topLang = state.facet(language);\n    if (!topLang)\n        return null;\n    if (!topLang.allowsNesting)\n        return topLang.data;\n    let tree = syntaxTree(state);\n    let target = tree.resolve(pos, -1);\n    while (target) {\n        let facet = target.type.prop(languageDataProp);\n        if (facet)\n            return facet;\n        target = target.parent;\n    }\n    return topLang.data;\n}\n/**\nA subclass of [`Language`](https://codemirror.net/6/docs/ref/#language.Language) for use with\n[Lezer](https://lezer.codemirror.net/docs/ref#lezer.Parser)\nparsers.\n*/\nclass LezerLanguage extends Language {\n    constructor(data, parser) {\n        super(data, parser, parser.topNode);\n        this.parser = parser;\n    }\n    /**\n    Define a language from a parser.\n    */\n    static define(spec) {\n        let data = defineLanguageFacet(spec.languageData);\n        return new LezerLanguage(data, spec.parser.configure({\n            props: [languageDataProp.add(type => type.isTop ? data : undefined)]\n        }));\n    }\n    /**\n    Create a new instance of this language with a reconfigured\n    version of its parser.\n    */\n    configure(options) {\n        return new LezerLanguage(this.data, this.parser.configure(options));\n    }\n    get allowsNesting() { return this.parser.hasNested; }\n}\n/**\nGet the syntax tree for a state, which is the current (possibly\nincomplete) parse tree of active [language](https://codemirror.net/6/docs/ref/#language.Language),\nor the empty tree if there is no language available.\n*/\nfunction syntaxTree(state) {\n    let field = state.field(Language.state, false);\n    return field ? field.tree : Tree.empty;\n}\n/**\nTry to get a parse tree that spans at least up to `upto`. The\nmethod will do at most `timeout` milliseconds of work to parse\nup to that point if the tree isn't already available.\n*/\nfunction ensureSyntaxTree(state, upto, timeout = 50) {\n    var _a;\n    let parse = (_a = state.field(Language.state, false)) === null || _a === void 0 ? void 0 : _a.context;\n    return !parse ? null : parse.tree.length >= upto || parse.work(timeout, upto) ? parse.tree : null;\n}\n// Lezer-style Input object for a Text document.\nclass DocInput {\n    constructor(doc, length = doc.length) {\n        this.doc = doc;\n        this.length = length;\n        this.cursorPos = 0;\n        this.string = \"\";\n        this.prevString = \"\";\n        this.cursor = doc.iter();\n    }\n    syncTo(pos) {\n        if (pos < this.cursorPos) { // Reset the cursor if we have to go back\n            this.cursor = this.doc.iter();\n            this.cursorPos = 0;\n        }\n        this.prevString = pos == this.cursorPos ? this.string : \"\";\n        this.string = this.cursor.next(pos - this.cursorPos).value;\n        this.cursorPos = pos + this.string.length;\n        return this.cursorPos - this.string.length;\n    }\n    get(pos) {\n        if (pos >= this.length)\n            return -1;\n        let stringStart = this.cursorPos - this.string.length;\n        if (pos < stringStart || pos >= this.cursorPos) {\n            if (pos < stringStart && pos >= stringStart - this.prevString.length)\n                return this.prevString.charCodeAt(pos - (stringStart - this.prevString.length));\n            stringStart = this.syncTo(pos);\n        }\n        return this.string.charCodeAt(pos - stringStart);\n    }\n    lineAfter(pos) {\n        if (pos >= this.length || pos < 0)\n            return \"\";\n        let stringStart = this.cursorPos - this.string.length;\n        if (pos < stringStart || pos >= this.cursorPos)\n            stringStart = this.syncTo(pos);\n        return this.cursor.lineBreak ? \"\" : this.string.slice(pos - stringStart, Math.min(this.length - stringStart, this.string.length));\n    }\n    read(from, to) {\n        let stringStart = this.cursorPos - this.string.length;\n        if (from < stringStart || to >= this.cursorPos)\n            return this.doc.sliceString(from, to);\n        else\n            return this.string.slice(from - stringStart, to - stringStart);\n    }\n    clip(at) {\n        return new DocInput(this.doc, at);\n    }\n}\n/**\nA parse context provided to parsers working on the editor content.\n*/\nclass EditorParseContext {\n    /**\n    @internal\n    */\n    constructor(parser, \n    /**\n    The current editor state.\n    */\n    state, \n    /**\n    Tree fragments that can be reused by incremental re-parses.\n    */\n    fragments = [], \n    /**\n    @internal\n    */\n    tree, \n    /**\n    The current editor viewport (or some overapproximation\n    thereof). Intended to be used for opportunistically avoiding\n    work (in which case\n    [`skipUntilInView`](https://codemirror.net/6/docs/ref/#language.EditorParseContext.skipUntilInView)\n    should be called to make sure the parser is restarted when the\n    skipped region becomes visible).\n    */\n    viewport, \n    /**\n    @internal\n    */\n    skipped, \n    /**\n    This is where skipping parsers can register a promise that,\n    when resolved, will schedule a new parse. It is cleared when\n    the parse worker picks up the promise. @internal\n    */\n    scheduleOn) {\n        this.parser = parser;\n        this.state = state;\n        this.fragments = fragments;\n        this.tree = tree;\n        this.viewport = viewport;\n        this.skipped = skipped;\n        this.scheduleOn = scheduleOn;\n        this.parse = null;\n        /**\n        @internal\n        */\n        this.tempSkipped = [];\n    }\n    /**\n    @internal\n    */\n    work(time, upto) {\n        if (this.tree != Tree.empty && (upto == null ? this.tree.length == this.state.doc.length : this.tree.length >= upto)) {\n            this.takeTree();\n            return true;\n        }\n        if (!this.parse)\n            this.parse = this.parser.startParse(new DocInput(this.state.doc), 0, this);\n        let endTime = Date.now() + time;\n        for (;;) {\n            let done = this.parse.advance();\n            if (done) {\n                this.fragments = this.withoutTempSkipped(TreeFragment.addTree(done));\n                this.parse = null;\n                this.tree = done;\n                return true;\n            }\n            else if (upto != null && this.parse.pos >= upto) {\n                this.takeTree();\n                return true;\n            }\n            if (Date.now() > endTime)\n                return false;\n        }\n    }\n    /**\n    @internal\n    */\n    takeTree() {\n        if (this.parse && this.parse.pos > this.tree.length) {\n            this.tree = this.parse.forceFinish();\n            this.fragments = this.withoutTempSkipped(TreeFragment.addTree(this.tree, this.fragments, true));\n        }\n    }\n    withoutTempSkipped(fragments) {\n        for (let r; r = this.tempSkipped.pop();)\n            fragments = cutFragments(fragments, r.from, r.to);\n        return fragments;\n    }\n    /**\n    @internal\n    */\n    changes(changes, newState) {\n        let { fragments, tree, viewport, skipped } = this;\n        this.takeTree();\n        if (!changes.empty) {\n            let ranges = [];\n            changes.iterChangedRanges((fromA, toA, fromB, toB) => ranges.push({ fromA, toA, fromB, toB }));\n            fragments = TreeFragment.applyChanges(fragments, ranges);\n            tree = Tree.empty;\n            viewport = { from: changes.mapPos(viewport.from, -1), to: changes.mapPos(viewport.to, 1) };\n            if (this.skipped.length) {\n                skipped = [];\n                for (let r of this.skipped) {\n                    let from = changes.mapPos(r.from, 1), to = changes.mapPos(r.to, -1);\n                    if (from < to)\n                        skipped.push({ from, to });\n                }\n            }\n        }\n        return new EditorParseContext(this.parser, newState, fragments, tree, viewport, skipped, this.scheduleOn);\n    }\n    /**\n    @internal\n    */\n    updateViewport(viewport) {\n        this.viewport = viewport;\n        let startLen = this.skipped.length;\n        for (let i = 0; i < this.skipped.length; i++) {\n            let { from, to } = this.skipped[i];\n            if (from < viewport.to && to > viewport.from) {\n                this.fragments = cutFragments(this.fragments, from, to);\n                this.skipped.splice(i--, 1);\n            }\n        }\n        return this.skipped.length < startLen;\n    }\n    /**\n    @internal\n    */\n    reset() {\n        if (this.parse) {\n            this.takeTree();\n            this.parse = null;\n        }\n    }\n    /**\n    Notify the parse scheduler that the given region was skipped\n    because it wasn't in view, and the parse should be restarted\n    when it comes into view.\n    */\n    skipUntilInView(from, to) {\n        this.skipped.push({ from, to });\n    }\n    /**\n    Returns a parser intended to be used as placeholder when\n    asynchronously loading a nested parser. It'll skip its input and\n    mark it as not-really-parsed, so that the next update will parse\n    it again.\n    \n    When `until` is given, a reparse will be scheduled when that\n    promise resolves.\n    */\n    static getSkippingParser(until) {\n        return {\n            startParse(input, startPos, context) {\n                return {\n                    pos: startPos,\n                    advance() {\n                        let ecx = context;\n                        ecx.tempSkipped.push({ from: startPos, to: input.length });\n                        if (until)\n                            ecx.scheduleOn = ecx.scheduleOn ? Promise.all([ecx.scheduleOn, until]) : until;\n                        this.pos = input.length;\n                        return new Tree(NodeType.none, [], [], input.length - startPos);\n                    },\n                    forceFinish() { return this.advance(); }\n                };\n            }\n        };\n    }\n    /**\n    @internal\n    */\n    movedPast(pos) {\n        return this.tree.length < pos && this.parse && this.parse.pos >= pos;\n    }\n}\n/**\nFIXME backwards compatible shim, remove on next major @internal\n*/\nEditorParseContext.skippingParser = EditorParseContext.getSkippingParser();\nfunction cutFragments(fragments, from, to) {\n    return TreeFragment.applyChanges(fragments, [{ fromA: from, toA: to, fromB: from, toB: to }]);\n}\nclass LanguageState {\n    constructor(\n    // A mutable parse state that is used to preserve work done during\n    // the lifetime of a state when moving to the next state.\n    context) {\n        this.context = context;\n        this.tree = context.tree;\n    }\n    apply(tr) {\n        if (!tr.docChanged)\n            return this;\n        let newCx = this.context.changes(tr.changes, tr.state);\n        // If the previous parse wasn't done, go forward only up to its\n        // end position or the end of the viewport, to avoid slowing down\n        // state updates with parse work beyond the viewport.\n        let upto = this.context.tree.length == tr.startState.doc.length ? undefined\n            : Math.max(tr.changes.mapPos(this.context.tree.length), newCx.viewport.to);\n        if (!newCx.work(25 /* Apply */, upto))\n            newCx.takeTree();\n        return new LanguageState(newCx);\n    }\n    static init(state) {\n        let parseState = new EditorParseContext(state.facet(language).parser, state, [], Tree.empty, { from: 0, to: state.doc.length }, [], null);\n        if (!parseState.work(25 /* Apply */))\n            parseState.takeTree();\n        return new LanguageState(parseState);\n    }\n}\nLanguage.state = StateField.define({\n    create: LanguageState.init,\n    update(value, tr) {\n        for (let e of tr.effects)\n            if (e.is(Language.setState))\n                return e.value;\n        if (tr.startState.facet(language) != tr.state.facet(language))\n            return LanguageState.init(tr.state);\n        return value.apply(tr);\n    }\n});\nlet requestIdle = typeof window != \"undefined\" && window.requestIdleCallback ||\n    ((callback, { timeout }) => setTimeout(callback, timeout));\nlet cancelIdle = typeof window != \"undefined\" && window.cancelIdleCallback || clearTimeout;\nconst parseWorker = ViewPlugin.fromClass(class ParseWorker {\n    constructor(view) {\n        this.view = view;\n        this.working = -1;\n        // End of the current time chunk\n        this.chunkEnd = -1;\n        // Milliseconds of budget left for this chunk\n        this.chunkBudget = -1;\n        this.work = this.work.bind(this);\n        this.scheduleWork();\n    }\n    update(update) {\n        let cx = this.view.state.field(Language.state).context;\n        if (update.viewportChanged) {\n            if (cx.updateViewport(update.view.viewport))\n                cx.reset();\n            if (this.view.viewport.to > cx.tree.length)\n                this.scheduleWork();\n        }\n        if (update.docChanged) {\n            if (this.view.hasFocus)\n                this.chunkBudget += 50 /* ChangeBonus */;\n            this.scheduleWork();\n        }\n        this.checkAsyncSchedule(cx);\n    }\n    scheduleWork(force = false) {\n        if (this.working > -1)\n            return;\n        let { state } = this.view, field = state.field(Language.state);\n        if (!force && field.tree.length >= state.doc.length)\n            return;\n        this.working = requestIdle(this.work, { timeout: 500 /* Pause */ });\n    }\n    work(deadline) {\n        this.working = -1;\n        let now = Date.now();\n        if (this.chunkEnd < now && (this.chunkEnd < 0 || this.view.hasFocus)) { // Start a new chunk\n            this.chunkEnd = now + 30000 /* ChunkTime */;\n            this.chunkBudget = 3000 /* ChunkBudget */;\n        }\n        if (this.chunkBudget <= 0)\n            return; // No more budget\n        let { state, viewport: { to: vpTo } } = this.view, field = state.field(Language.state);\n        if (field.tree.length >= vpTo + 1000000 /* MaxParseAhead */)\n            return;\n        let time = Math.min(this.chunkBudget, deadline ? Math.max(25 /* MinSlice */, deadline.timeRemaining()) : 100 /* Slice */);\n        let done = field.context.work(time, vpTo + 1000000 /* MaxParseAhead */);\n        this.chunkBudget -= Date.now() - now;\n        if (done || this.chunkBudget <= 0 || field.context.movedPast(vpTo)) {\n            field.context.takeTree();\n            this.view.dispatch({ effects: Language.setState.of(new LanguageState(field.context)) });\n        }\n        if (!done && this.chunkBudget > 0)\n            this.scheduleWork();\n        this.checkAsyncSchedule(field.context);\n    }\n    checkAsyncSchedule(cx) {\n        if (cx.scheduleOn) {\n            cx.scheduleOn.then(() => this.scheduleWork(true));\n            cx.scheduleOn = null;\n        }\n    }\n    destroy() {\n        if (this.working >= 0)\n            cancelIdle(this.working);\n    }\n}, {\n    eventHandlers: { focus() { this.scheduleWork(); } }\n});\n/**\nThe facet used to associate a language with an editor state.\n*/\nconst language = Facet.define({\n    combine(languages) { return languages.length ? languages[0] : null; },\n    enables: [Language.state, parseWorker]\n});\n/**\nThis class bundles a [language object](https://codemirror.net/6/docs/ref/#language.Language) with an\noptional set of supporting extensions. Language packages are\nencouraged to export a function that optionally takes a\nconfiguration object and returns a `LanguageSupport` instance, as\nthe main way for client code to use the package.\n*/\nclass LanguageSupport {\n    /**\n    Create a support object.\n    */\n    constructor(\n    /**\n    The language object.\n    */\n    language, \n    /**\n    An optional set of supporting extensions. When nesting a\n    language in another language, the outer language is encouraged\n    to include the supporting extensions for its inner languages\n    in its own set of support extensions.\n    */\n    support = []) {\n        this.language = language;\n        this.support = support;\n        this.extension = [language, support];\n    }\n}\n/**\nLanguage descriptions are used to store metadata about languages\nand to dynamically load them. Their main role is finding the\nappropriate language for a filename or dynamically loading nested\nparsers.\n*/\nclass LanguageDescription {\n    constructor(\n    /**\n    The name of this language.\n    */\n    name, \n    /**\n    Alternative names for the mode (lowercased, includes `this.name`).\n    */\n    alias, \n    /**\n    File extensions associated with this language.\n    */\n    extensions, \n    /**\n    Optional filename pattern that should be associated with this\n    language.\n    */\n    filename, loadFunc) {\n        this.name = name;\n        this.alias = alias;\n        this.extensions = extensions;\n        this.filename = filename;\n        this.loadFunc = loadFunc;\n        /**\n        If the language has been loaded, this will hold its value.\n        */\n        this.support = undefined;\n        this.loading = null;\n    }\n    /**\n    Start loading the the language. Will return a promise that\n    resolves to a [`LanguageSupport`](https://codemirror.net/6/docs/ref/#language.LanguageSupport)\n    object when the language successfully loads.\n    */\n    load() {\n        return this.loading || (this.loading = this.loadFunc().then(support => this.support = support, err => { this.loading = null; throw err; }));\n    }\n    /**\n    Create a language description.\n    */\n    static of(spec) {\n        return new LanguageDescription(spec.name, (spec.alias || []).concat(spec.name).map(s => s.toLowerCase()), spec.extensions || [], spec.filename, spec.load);\n    }\n    /**\n    Look for a language in the given array of descriptions that\n    matches the filename. Will first match\n    [`filename`](https://codemirror.net/6/docs/ref/#language.LanguageDescription.filename) patterns,\n    and then [extensions](https://codemirror.net/6/docs/ref/#language.LanguageDescription.extensions),\n    and return the first language that matches.\n    */\n    static matchFilename(descs, filename) {\n        for (let d of descs)\n            if (d.filename && d.filename.test(filename))\n                return d;\n        let ext = /\\.([^.]+)$/.exec(filename);\n        if (ext)\n            for (let d of descs)\n                if (d.extensions.indexOf(ext[1]) > -1)\n                    return d;\n        return null;\n    }\n    /**\n    Look for a language whose name or alias matches the the given\n    name (case-insensitively). If `fuzzy` is true, and no direct\n    matchs is found, this'll also search for a language whose name\n    or alias occurs in the string (for names shorter than three\n    characters, only when surrounded by non-word characters).\n    */\n    static matchLanguageName(descs, name, fuzzy = true) {\n        name = name.toLowerCase();\n        for (let d of descs)\n            if (d.alias.some(a => a == name))\n                return d;\n        if (fuzzy)\n            for (let d of descs)\n                for (let a of d.alias) {\n                    let found = name.indexOf(a);\n                    if (found > -1 && (a.length > 2 || !/\\w/.test(name[found - 1]) && !/\\w/.test(name[found + a.length])))\n                        return d;\n                }\n        return null;\n    }\n}\n\n/**\nFacet that defines a way to provide a function that computes the\nappropriate indentation depth at the start of a given line, or\n`null` to indicate no appropriate indentation could be determined.\n*/\nconst indentService = Facet.define();\n/**\nFacet for overriding the unit by which indentation happens.\nShould be a string consisting either entirely of spaces or\nentirely of tabs. When not set, this defaults to 2 spaces.\n*/\nconst indentUnit = Facet.define({\n    combine: values => {\n        if (!values.length)\n            return \"  \";\n        if (!/^(?: +|\\t+)$/.test(values[0]))\n            throw new Error(\"Invalid indent unit: \" + JSON.stringify(values[0]));\n        return values[0];\n    }\n});\n/**\nReturn the _column width_ of an indent unit in the state.\nDetermined by the [`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit)\nfacet, and [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) when that\ncontains tabs.\n*/\nfunction getIndentUnit(state) {\n    let unit = state.facet(indentUnit);\n    return unit.charCodeAt(0) == 9 ? state.tabSize * unit.length : unit.length;\n}\n/**\nCreate an indentation string that covers columns 0 to `cols`.\nWill use tabs for as much of the columns as possible when the\n[`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit) facet contains\ntabs.\n*/\nfunction indentString(state, cols) {\n    let result = \"\", ts = state.tabSize;\n    if (state.facet(indentUnit).charCodeAt(0) == 9)\n        while (cols >= ts) {\n            result += \"\\t\";\n            cols -= ts;\n        }\n    for (let i = 0; i < cols; i++)\n        result += \" \";\n    return result;\n}\n/**\nGet the indentation at the given position. Will first consult any\n[indent services](https://codemirror.net/6/docs/ref/#language.indentService) that are registered,\nand if none of those return an indentation, this will check the\nsyntax tree for the [indent node prop](https://codemirror.net/6/docs/ref/#language.indentNodeProp)\nand use that if found. Returns a number when an indentation could\nbe determined, and null otherwise.\n*/\nfunction getIndentation(context, pos) {\n    if (context instanceof EditorState)\n        context = new IndentContext(context);\n    for (let service of context.state.facet(indentService)) {\n        let result = service(context, pos);\n        if (result != null)\n            return result;\n    }\n    let tree = syntaxTree(context.state);\n    return tree ? syntaxIndentation(context, tree, pos) : null;\n}\n/**\nIndentation contexts are used when calling [indentation\nservices](https://codemirror.net/6/docs/ref/#language.indentService). They provide helper utilities\nuseful in indentation logic, and can selectively override the\nindentation reported for some lines.\n*/\nclass IndentContext {\n    /**\n    Create an indent context.\n    */\n    constructor(\n    /**\n    The editor state.\n    */\n    state, \n    /**\n    @internal\n    */\n    options = {}) {\n        this.state = state;\n        this.options = options;\n        this.unit = getIndentUnit(state);\n    }\n    /**\n    Get the text directly after `pos`, either the entire line\n    or the next 100 characters, whichever is shorter.\n    */\n    textAfterPos(pos) {\n        var _a, _b;\n        let sim = (_a = this.options) === null || _a === void 0 ? void 0 : _a.simulateBreak;\n        if (pos == sim && ((_b = this.options) === null || _b === void 0 ? void 0 : _b.simulateDoubleBreak))\n            return \"\";\n        return this.state.sliceDoc(pos, Math.min(pos + 100, sim != null && sim > pos ? sim : 1e9, this.state.doc.lineAt(pos).to));\n    }\n    /**\n    Find the column for the given position.\n    */\n    column(pos) {\n        var _a;\n        let line = this.state.doc.lineAt(pos), text = line.text.slice(0, pos - line.from);\n        let result = this.countColumn(text, pos - line.from);\n        let override = ((_a = this.options) === null || _a === void 0 ? void 0 : _a.overrideIndentation) ? this.options.overrideIndentation(line.from) : -1;\n        if (override > -1)\n            result += override - this.countColumn(text, text.search(/\\S/));\n        return result;\n    }\n    /**\n    find the column position (taking tabs into account) of the given\n    position in the given string.\n    */\n    countColumn(line, pos) {\n        return countColumn(pos < 0 ? line : line.slice(0, pos), 0, this.state.tabSize);\n    }\n    /**\n    Find the indentation column of the given document line.\n    */\n    lineIndent(line) {\n        var _a;\n        let override = (_a = this.options) === null || _a === void 0 ? void 0 : _a.overrideIndentation;\n        if (override) {\n            let overriden = override(line.from);\n            if (overriden > -1)\n                return overriden;\n        }\n        return this.countColumn(line.text, line.text.search(/\\S/));\n    }\n}\n/**\nA syntax tree node prop used to associate indentation strategies\nwith node types. Such a strategy is a function from an indentation\ncontext to a column number or null, where null indicates that no\ndefinitive indentation can be determined.\n*/\nconst indentNodeProp = new NodeProp();\n// Compute the indentation for a given position from the syntax tree.\nfunction syntaxIndentation(cx, ast, pos) {\n    let tree = ast.resolve(pos);\n    // Enter previous nodes that end in empty error terms, which means\n    // they were broken off by error recovery, so that indentation\n    // works even if the constructs haven't been finished.\n    for (let scan = tree, scanPos = pos;;) {\n        let last = scan.childBefore(scanPos);\n        if (!last)\n            break;\n        if (last.type.isError && last.from == last.to) {\n            tree = scan;\n            scanPos = last.from;\n        }\n        else {\n            scan = last;\n            scanPos = scan.to + 1;\n        }\n    }\n    return indentFrom(tree, pos, cx);\n}\nfunction ignoreClosed(cx) {\n    var _a, _b;\n    return cx.pos == ((_a = cx.options) === null || _a === void 0 ? void 0 : _a.simulateBreak) && ((_b = cx.options) === null || _b === void 0 ? void 0 : _b.simulateDoubleBreak);\n}\nfunction indentStrategy(tree) {\n    let strategy = tree.type.prop(indentNodeProp);\n    if (strategy)\n        return strategy;\n    let first = tree.firstChild, close;\n    if (first && (close = first.type.prop(NodeProp.closedBy))) {\n        let last = tree.lastChild, closed = last && close.indexOf(last.name) > -1;\n        return cx => delimitedStrategy(cx, true, 1, undefined, closed && !ignoreClosed(cx) ? last.from : undefined);\n    }\n    return tree.parent == null ? topIndent : null;\n}\nfunction indentFrom(node, pos, base) {\n    for (; node; node = node.parent) {\n        let strategy = indentStrategy(node);\n        if (strategy)\n            return strategy(new TreeIndentContext(base, pos, node));\n    }\n    return null;\n}\nfunction topIndent() { return 0; }\n/**\nObjects of this type provide context information and helper\nmethods to indentation functions.\n*/\nclass TreeIndentContext extends IndentContext {\n    /**\n    @internal\n    */\n    constructor(base, \n    /**\n    The position at which indentation is being computed.\n    */\n    pos, \n    /**\n    The syntax tree node to which the indentation strategy\n    applies.\n    */\n    node) {\n        super(base.state, base.options);\n        this.base = base;\n        this.pos = pos;\n        this.node = node;\n    }\n    /**\n    Get the text directly after `this.pos`, either the entire line\n    or the next 100 characters, whichever is shorter.\n    */\n    get textAfter() {\n        return this.textAfterPos(this.pos);\n    }\n    /**\n    Get the indentation at the reference line for `this.node`, which\n    is the line on which it starts, unless there is a node that is\n    _not_ a parent of this node covering the start of that line. If\n    so, the line at the start of that node is tried, again skipping\n    on if it is covered by another such node.\n    */\n    get baseIndent() {\n        let line = this.state.doc.lineAt(this.node.from);\n        // Skip line starts that are covered by a sibling (or cousin, etc)\n        for (;;) {\n            let atBreak = this.node.resolve(line.from);\n            while (atBreak.parent && atBreak.parent.from == atBreak.from)\n                atBreak = atBreak.parent;\n            if (isParent(atBreak, this.node))\n                break;\n            line = this.state.doc.lineAt(atBreak.from);\n        }\n        return this.lineIndent(line);\n    }\n    /**\n    Continue looking for indentations in the node's parent nodes,\n    and return the result of that.\n    */\n    continue() {\n        let parent = this.node.parent;\n        return parent ? indentFrom(parent, this.pos, this.base) : 0;\n    }\n}\nfunction isParent(parent, of) {\n    for (let cur = of; cur; cur = cur.parent)\n        if (parent == cur)\n            return true;\n    return false;\n}\n// Check whether a delimited node is aligned (meaning there are\n// non-skipped nodes on the same line as the opening delimiter). And\n// if so, return the opening token.\nfunction bracketedAligned(context) {\n    var _a;\n    let tree = context.node;\n    let openToken = tree.childAfter(tree.from), last = tree.lastChild;\n    if (!openToken)\n        return null;\n    let sim = (_a = context.options) === null || _a === void 0 ? void 0 : _a.simulateBreak;\n    let openLine = context.state.doc.lineAt(openToken.from);\n    let lineEnd = sim == null || sim <= openLine.from ? openLine.to : Math.min(openLine.to, sim);\n    for (let pos = openToken.to;;) {\n        let next = tree.childAfter(pos);\n        if (!next || next == last)\n            return null;\n        if (!next.type.isSkipped)\n            return next.from < lineEnd ? openToken : null;\n        pos = next.to;\n    }\n}\n/**\nAn indentation strategy for delimited (usually bracketed) nodes.\nWill, by default, indent one unit more than the parent's base\nindent unless the line starts with a closing token. When `align`\nis true and there are non-skipped nodes on the node's opening\nline, the content of the node will be aligned with the end of the\nopening node, like this:\n\n    foo(bar,\n        baz)\n*/\nfunction delimitedIndent({ closing, align = true, units = 1 }) {\n    return (context) => delimitedStrategy(context, align, units, closing);\n}\nfunction delimitedStrategy(context, align, units, closing, closedAt) {\n    let after = context.textAfter, space = after.match(/^\\s*/)[0].length;\n    let closed = closing && after.slice(space, space + closing.length) == closing || closedAt == context.pos + space;\n    let aligned = align ? bracketedAligned(context) : null;\n    if (aligned)\n        return closed ? context.column(aligned.from) : context.column(aligned.to);\n    return context.baseIndent + (closed ? 0 : context.unit * units);\n}\n/**\nAn indentation strategy that aligns a node's content to its base\nindentation.\n*/\nconst flatIndent = (context) => context.baseIndent;\n/**\nCreates an indentation strategy that, by default, indents\ncontinued lines one unit more than the node's base indentation.\nYou can provide `except` to prevent indentation of lines that\nmatch a pattern (for example `/^else\\b/` in `if`/`else`\nconstructs), and you can change the amount of units used with the\n`units` option.\n*/\nfunction continuedIndent({ except, units = 1 } = {}) {\n    return (context) => {\n        let matchExcept = except && except.test(context.textAfter);\n        return context.baseIndent + (matchExcept ? 0 : units * context.unit);\n    };\n}\nconst DontIndentBeyond = 200;\n/**\nEnables reindentation on input. When a language defines an\n`indentOnInput` field in its [language\ndata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt), which must hold a regular\nexpression, the line at the cursor will be reindented whenever new\ntext is typed and the input from the start of the line up to the\ncursor matches that regexp.\n\nTo avoid unneccesary reindents, it is recommended to start the\nregexp with `^` (usually followed by `\\s*`), and end it with `$`.\nFor example, `/^\\s*\\}$/` will reindent when a closing brace is\nadded at the start of a line.\n*/\nfunction indentOnInput() {\n    return EditorState.transactionFilter.of(tr => {\n        if (!tr.docChanged || tr.annotation(Transaction.userEvent) != \"input\")\n            return tr;\n        let rules = tr.startState.languageDataAt(\"indentOnInput\", tr.startState.selection.main.head);\n        if (!rules.length)\n            return tr;\n        let doc = tr.newDoc, { head } = tr.newSelection.main, line = doc.lineAt(head);\n        if (head > line.from + DontIndentBeyond)\n            return tr;\n        let lineStart = doc.sliceString(line.from, head);\n        if (!rules.some(r => r.test(lineStart)))\n            return tr;\n        let { state } = tr, last = -1, changes = [];\n        for (let { head } of state.selection.ranges) {\n            let line = state.doc.lineAt(head);\n            if (line.from == last)\n                continue;\n            last = line.from;\n            let indent = getIndentation(state, line.from);\n            if (indent == null)\n                continue;\n            let cur = /^\\s*/.exec(line.text)[0];\n            let norm = indentString(state, indent);\n            if (cur != norm)\n                changes.push({ from: line.from, to: line.from + cur.length, insert: norm });\n        }\n        return changes.length ? [tr, { changes }] : tr;\n    });\n}\n\n/**\nA facet that registers a code folding service. When called with\nthe extent of a line, such a function should return a foldable\nrange that starts on that line (but continues beyond it), if one\ncan be found.\n*/\nconst foldService = Facet.define();\n/**\nThis node prop is used to associate folding information with\nsyntax node types. Given a syntax node, it should check whether\nthat tree is foldable and return the range that can be collapsed\nwhen it is.\n*/\nconst foldNodeProp = new NodeProp();\n/**\n[Fold](https://codemirror.net/6/docs/ref/#language.foldNodeProp) function that folds everything but\nthe first and the last child of a syntax node. Useful for nodes\nthat start and end with delimiters.\n*/\nfunction foldInside(node) {\n    let first = node.firstChild, last = node.lastChild;\n    return first && first.to < last.from ? { from: first.to, to: last.type.isError ? node.to : last.from } : null;\n}\nfunction syntaxFolding(state, start, end) {\n    let tree = syntaxTree(state);\n    if (tree.length == 0)\n        return null;\n    let inner = tree.resolve(end);\n    let found = null;\n    for (let cur = inner; cur; cur = cur.parent) {\n        if (cur.to <= end || cur.from > end)\n            continue;\n        if (found && cur.from < start)\n            break;\n        let prop = cur.type.prop(foldNodeProp);\n        if (prop) {\n            let value = prop(cur, state);\n            if (value && value.from <= end && value.from >= start && value.to > end)\n                found = value;\n        }\n    }\n    return found;\n}\n/**\nCheck whether the given line is foldable. First asks any fold\nservices registered through\n[`foldService`](https://codemirror.net/6/docs/ref/#language.foldService), and if none of them return\na result, tries to query the [fold node\nprop](https://codemirror.net/6/docs/ref/#language.foldNodeProp) of syntax nodes that cover the end\nof the line.\n*/\nfunction foldable(state, lineStart, lineEnd) {\n    for (let service of state.facet(foldService)) {\n        let result = service(state, lineStart, lineEnd);\n        if (result)\n            return result;\n    }\n    return syntaxFolding(state, lineStart, lineEnd);\n}\n\nexport { EditorParseContext, IndentContext, Language, LanguageDescription, LanguageSupport, LezerLanguage, TreeIndentContext, continuedIndent, defineLanguageFacet, delimitedIndent, ensureSyntaxTree, flatIndent, foldInside, foldNodeProp, foldService, foldable, getIndentUnit, getIndentation, indentNodeProp, indentOnInput, indentService, indentString, indentUnit, language, languageDataProp, syntaxTree };\n"]},"metadata":{},"sourceType":"module"}