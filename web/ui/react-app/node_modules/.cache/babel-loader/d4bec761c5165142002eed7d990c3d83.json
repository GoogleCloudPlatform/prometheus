{"ast":null,"code":"export var groupTargets=function groupTargets(targets){return targets.reduce(function(pools,target){var health=target.health,scrapePool=target.scrapePool;var up=health.toLowerCase()==='up'?1:0;if(!pools[scrapePool]){pools[scrapePool]={upCount:0,targets:[]};}pools[scrapePool].targets.push(target);pools[scrapePool].upCount+=up;return pools;},{});};export var getColor=function getColor(health){switch(health.toLowerCase()){case'up':return'success';case'down':return'danger';default:return'warning';}};","map":{"version":3,"sources":["/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/src/pages/targets/target.ts"],"names":["groupTargets","targets","reduce","pools","target","health","scrapePool","up","toLowerCase","upCount","push","getColor"],"mappings":"AA6BA,MAAO,IAAMA,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,OAAD,QAC1BA,CAAAA,OAAO,CAACC,MAAR,CAAe,SAACC,KAAD,CAAqBC,MAArB,CAAwC,CACrD,GAAQC,CAAAA,MAAR,CAA+BD,MAA/B,CAAQC,MAAR,CAAgBC,UAAhB,CAA+BF,MAA/B,CAAgBE,UAAhB,CACA,GAAMC,CAAAA,EAAE,CAAGF,MAAM,CAACG,WAAP,KAAyB,IAAzB,CAAgC,CAAhC,CAAoC,CAA/C,CACA,GAAI,CAACL,KAAK,CAACG,UAAD,CAAV,CAAwB,CACtBH,KAAK,CAACG,UAAD,CAAL,CAAoB,CAClBG,OAAO,CAAE,CADS,CAElBR,OAAO,CAAE,EAFS,CAApB,CAID,CACDE,KAAK,CAACG,UAAD,CAAL,CAAkBL,OAAlB,CAA0BS,IAA1B,CAA+BN,MAA/B,EACAD,KAAK,CAACG,UAAD,CAAL,CAAkBG,OAAlB,EAA6BF,EAA7B,CACA,MAAOJ,CAAAA,KAAP,CACD,CAZD,CAYG,EAZH,CAD0B,EAArB,CAeP,MAAO,IAAMQ,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACN,MAAD,CAA4B,CAClD,OAAQA,MAAM,CAACG,WAAP,EAAR,EACE,IAAK,IAAL,CACE,MAAO,SAAP,CACF,IAAK,MAAL,CACE,MAAO,QAAP,CACF,QACE,MAAO,SAAP,CANJ,CAQD,CATM","sourcesContent":["export interface Labels {\n  [key: string]: string;\n}\n\nexport interface Target {\n  discoveredLabels: Labels;\n  labels: Labels;\n  scrapePool: string;\n  scrapeUrl: string;\n  globalUrl: string;\n  lastError: string;\n  lastScrape: string;\n  lastScrapeDuration: number;\n  health: string;\n}\n\nexport interface DroppedTarget {\n  discoveredLabels: Labels;\n}\n\nexport interface ScrapePool {\n  upCount: number;\n  targets: Target[];\n}\n\nexport interface ScrapePools {\n  [scrapePool: string]: ScrapePool;\n}\n\nexport const groupTargets = (targets: Target[]): ScrapePools =>\n  targets.reduce((pools: ScrapePools, target: Target) => {\n    const { health, scrapePool } = target;\n    const up = health.toLowerCase() === 'up' ? 1 : 0;\n    if (!pools[scrapePool]) {\n      pools[scrapePool] = {\n        upCount: 0,\n        targets: [],\n      };\n    }\n    pools[scrapePool].targets.push(target);\n    pools[scrapePool].upCount += up;\n    return pools;\n  }, {});\n\nexport const getColor = (health: string): string => {\n  switch (health.toLowerCase()) {\n    case 'up':\n      return 'success';\n    case 'down':\n      return 'danger';\n    default:\n      return 'warning';\n  }\n};\n"]},"metadata":{},"sourceType":"module"}