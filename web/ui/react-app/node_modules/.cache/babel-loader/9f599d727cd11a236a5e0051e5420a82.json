{"ast":null,"code":"'use strict';\n\nvar _createForOfIteratorHelper = require(\"/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _require = require('path'),\n    dirname = _require.dirname,\n    resolve = _require.resolve,\n    relative = _require.relative,\n    sep = _require.sep;\n\nvar _require2 = require('url'),\n    pathToFileURL = _require2.pathToFileURL;\n\nvar _require3 = require('source-map'),\n    SourceMapConsumer = _require3.SourceMapConsumer,\n    SourceMapGenerator = _require3.SourceMapGenerator;\n\nvar sourceMapAvailable = Boolean(SourceMapConsumer && SourceMapGenerator);\nvar pathAvailable = Boolean(dirname && resolve && relative && sep);\n\nvar MapGenerator = /*#__PURE__*/function () {\n  function MapGenerator(stringify, root, opts) {\n    _classCallCheck(this, MapGenerator);\n\n    this.stringify = stringify;\n    this.mapOpts = opts.map || {};\n    this.root = root;\n    this.opts = opts;\n  }\n\n  _createClass(MapGenerator, [{\n    key: \"isMap\",\n    value: function isMap() {\n      if (typeof this.opts.map !== 'undefined') {\n        return !!this.opts.map;\n      }\n\n      return this.previous().length > 0;\n    }\n  }, {\n    key: \"previous\",\n    value: function previous() {\n      var _this = this;\n\n      if (!this.previousMaps) {\n        this.previousMaps = [];\n        this.root.walk(function (node) {\n          if (node.source && node.source.input.map) {\n            var map = node.source.input.map;\n\n            if (!_this.previousMaps.includes(map)) {\n              _this.previousMaps.push(map);\n            }\n          }\n        });\n      }\n\n      return this.previousMaps;\n    }\n  }, {\n    key: \"isInline\",\n    value: function isInline() {\n      if (typeof this.mapOpts.inline !== 'undefined') {\n        return this.mapOpts.inline;\n      }\n\n      var annotation = this.mapOpts.annotation;\n\n      if (typeof annotation !== 'undefined' && annotation !== true) {\n        return false;\n      }\n\n      if (this.previous().length) {\n        return this.previous().some(function (i) {\n          return i.inline;\n        });\n      }\n\n      return true;\n    }\n  }, {\n    key: \"isSourcesContent\",\n    value: function isSourcesContent() {\n      if (typeof this.mapOpts.sourcesContent !== 'undefined') {\n        return this.mapOpts.sourcesContent;\n      }\n\n      if (this.previous().length) {\n        return this.previous().some(function (i) {\n          return i.withContent();\n        });\n      }\n\n      return true;\n    }\n  }, {\n    key: \"clearAnnotation\",\n    value: function clearAnnotation() {\n      if (this.mapOpts.annotation === false) return;\n      var node;\n\n      for (var i = this.root.nodes.length - 1; i >= 0; i--) {\n        node = this.root.nodes[i];\n        if (node.type !== 'comment') continue;\n\n        if (node.text.indexOf('# sourceMappingURL=') === 0) {\n          this.root.removeChild(i);\n        }\n      }\n    }\n  }, {\n    key: \"setSourcesContent\",\n    value: function setSourcesContent() {\n      var _this2 = this;\n\n      var already = {};\n      this.root.walk(function (node) {\n        if (node.source) {\n          var from = node.source.input.from;\n\n          if (from && !already[from]) {\n            already[from] = true;\n\n            _this2.map.setSourceContent(_this2.toUrl(_this2.path(from)), node.source.input.css);\n          }\n        }\n      });\n    }\n  }, {\n    key: \"applyPrevMaps\",\n    value: function applyPrevMaps() {\n      var _iterator = _createForOfIteratorHelper(this.previous()),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var prev = _step.value;\n          var from = this.toUrl(this.path(prev.file));\n          var root = prev.root || dirname(prev.file);\n          var map = void 0;\n\n          if (this.mapOpts.sourcesContent === false) {\n            map = new SourceMapConsumer(prev.text);\n\n            if (map.sourcesContent) {\n              map.sourcesContent = map.sourcesContent.map(function () {\n                return null;\n              });\n            }\n          } else {\n            map = prev.consumer();\n          }\n\n          this.map.applySourceMap(map, from, this.toUrl(this.path(root)));\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"isAnnotation\",\n    value: function isAnnotation() {\n      if (this.isInline()) {\n        return true;\n      }\n\n      if (typeof this.mapOpts.annotation !== 'undefined') {\n        return this.mapOpts.annotation;\n      }\n\n      if (this.previous().length) {\n        return this.previous().some(function (i) {\n          return i.annotation;\n        });\n      }\n\n      return true;\n    }\n  }, {\n    key: \"toBase64\",\n    value: function toBase64(str) {\n      if (Buffer) {\n        return Buffer.from(str).toString('base64');\n      } else {\n        // istanbul ignore next\n        return window.btoa(unescape(encodeURIComponent(str)));\n      }\n    }\n  }, {\n    key: \"addAnnotation\",\n    value: function addAnnotation() {\n      var content;\n\n      if (this.isInline()) {\n        content = 'data:application/json;base64,' + this.toBase64(this.map.toString());\n      } else if (typeof this.mapOpts.annotation === 'string') {\n        content = this.mapOpts.annotation;\n      } else if (typeof this.mapOpts.annotation === 'function') {\n        content = this.mapOpts.annotation(this.opts.to, this.root);\n      } else {\n        content = this.outputFile() + '.map';\n      }\n\n      var eol = '\\n';\n      if (this.css.includes('\\r\\n')) eol = '\\r\\n';\n      this.css += eol + '/*# sourceMappingURL=' + content + ' */';\n    }\n  }, {\n    key: \"outputFile\",\n    value: function outputFile() {\n      if (this.opts.to) {\n        return this.path(this.opts.to);\n      }\n\n      if (this.opts.from) {\n        return this.path(this.opts.from);\n      }\n\n      return 'to.css';\n    }\n  }, {\n    key: \"generateMap\",\n    value: function generateMap() {\n      this.generateString();\n      if (this.isSourcesContent()) this.setSourcesContent();\n      if (this.previous().length > 0) this.applyPrevMaps();\n      if (this.isAnnotation()) this.addAnnotation();\n\n      if (this.isInline()) {\n        return [this.css];\n      }\n\n      return [this.css, this.map];\n    }\n  }, {\n    key: \"path\",\n    value: function path(file) {\n      if (file.indexOf('<') === 0) return file;\n      if (/^\\w+:\\/\\//.test(file)) return file;\n      if (this.mapOpts.absolute) return file;\n      var from = this.opts.to ? dirname(this.opts.to) : '.';\n\n      if (typeof this.mapOpts.annotation === 'string') {\n        from = dirname(resolve(from, this.mapOpts.annotation));\n      }\n\n      file = relative(from, file);\n      return file;\n    }\n  }, {\n    key: \"toUrl\",\n    value: function toUrl(path) {\n      if (sep === '\\\\') {\n        // istanbul ignore next\n        path = path.replace(/\\\\/g, '/');\n      }\n\n      return encodeURI(path).replace(/[#?]/g, encodeURIComponent);\n    }\n  }, {\n    key: \"sourcePath\",\n    value: function sourcePath(node) {\n      if (this.mapOpts.from) {\n        return this.toUrl(this.mapOpts.from);\n      } else if (this.mapOpts.absolute) {\n        if (pathToFileURL) {\n          return pathToFileURL(node.source.input.from).toString();\n        } else {\n          // istanbul ignore next\n          throw new Error('`map.absolute` option is not available in this PostCSS build');\n        }\n      } else {\n        return this.toUrl(this.path(node.source.input.from));\n      }\n    }\n  }, {\n    key: \"generateString\",\n    value: function generateString() {\n      var _this3 = this;\n\n      this.css = '';\n      this.map = new SourceMapGenerator({\n        file: this.outputFile()\n      });\n      var line = 1;\n      var column = 1;\n      var noSource = '<no source>';\n      var mapping = {\n        source: '',\n        generated: {\n          line: 0,\n          column: 0\n        },\n        original: {\n          line: 0,\n          column: 0\n        }\n      };\n      var lines, last;\n      this.stringify(this.root, function (str, node, type) {\n        _this3.css += str;\n\n        if (node && type !== 'end') {\n          mapping.generated.line = line;\n          mapping.generated.column = column - 1;\n\n          if (node.source && node.source.start) {\n            mapping.source = _this3.sourcePath(node);\n            mapping.original.line = node.source.start.line;\n            mapping.original.column = node.source.start.column - 1;\n\n            _this3.map.addMapping(mapping);\n          } else {\n            mapping.source = noSource;\n            mapping.original.line = 1;\n            mapping.original.column = 0;\n\n            _this3.map.addMapping(mapping);\n          }\n        }\n\n        lines = str.match(/\\n/g);\n\n        if (lines) {\n          line += lines.length;\n          last = str.lastIndexOf('\\n');\n          column = str.length - last;\n        } else {\n          column += str.length;\n        }\n\n        if (node && type !== 'start') {\n          var p = node.parent || {\n            raws: {}\n          };\n\n          if (node.type !== 'decl' || node !== p.last || p.raws.semicolon) {\n            if (node.source && node.source.end) {\n              mapping.source = _this3.sourcePath(node);\n              mapping.original.line = node.source.end.line;\n              mapping.original.column = node.source.end.column - 1;\n              mapping.generated.line = line;\n              mapping.generated.column = column - 2;\n\n              _this3.map.addMapping(mapping);\n            } else {\n              mapping.source = noSource;\n              mapping.original.line = 1;\n              mapping.original.column = 0;\n              mapping.generated.line = line;\n              mapping.generated.column = column - 1;\n\n              _this3.map.addMapping(mapping);\n            }\n          }\n        }\n      });\n    }\n  }, {\n    key: \"generate\",\n    value: function generate() {\n      this.clearAnnotation();\n\n      if (pathAvailable && sourceMapAvailable && this.isMap()) {\n        return this.generateMap();\n      }\n\n      var result = '';\n      this.stringify(this.root, function (i) {\n        result += i;\n      });\n      return [result];\n    }\n  }]);\n\n  return MapGenerator;\n}();\n\nmodule.exports = MapGenerator;","map":{"version":3,"sources":["/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/sanitize-html/node_modules/postcss/lib/map-generator.js"],"names":["require","dirname","resolve","relative","sep","pathToFileURL","SourceMapConsumer","SourceMapGenerator","sourceMapAvailable","Boolean","pathAvailable","MapGenerator","stringify","root","opts","mapOpts","map","previous","length","previousMaps","walk","node","source","input","includes","push","inline","annotation","some","i","sourcesContent","withContent","nodes","type","text","indexOf","removeChild","already","from","setSourceContent","toUrl","path","css","prev","file","consumer","applySourceMap","isInline","str","Buffer","toString","window","btoa","unescape","encodeURIComponent","content","toBase64","to","outputFile","eol","generateString","isSourcesContent","setSourcesContent","applyPrevMaps","isAnnotation","addAnnotation","test","absolute","replace","encodeURI","Error","line","column","noSource","mapping","generated","original","lines","last","start","sourcePath","addMapping","match","lastIndexOf","p","parent","raws","semicolon","end","clearAnnotation","isMap","generateMap","result","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nlet { dirname, resolve, relative, sep } = require('path')\nlet { pathToFileURL } = require('url')\nlet { SourceMapConsumer, SourceMapGenerator } = require('source-map')\n\nlet sourceMapAvailable = Boolean(SourceMapConsumer && SourceMapGenerator)\nlet pathAvailable = Boolean(dirname && resolve && relative && sep)\n\nclass MapGenerator {\n  constructor(stringify, root, opts) {\n    this.stringify = stringify\n    this.mapOpts = opts.map || {}\n    this.root = root\n    this.opts = opts\n  }\n\n  isMap() {\n    if (typeof this.opts.map !== 'undefined') {\n      return !!this.opts.map\n    }\n    return this.previous().length > 0\n  }\n\n  previous() {\n    if (!this.previousMaps) {\n      this.previousMaps = []\n      this.root.walk(node => {\n        if (node.source && node.source.input.map) {\n          let map = node.source.input.map\n          if (!this.previousMaps.includes(map)) {\n            this.previousMaps.push(map)\n          }\n        }\n      })\n    }\n\n    return this.previousMaps\n  }\n\n  isInline() {\n    if (typeof this.mapOpts.inline !== 'undefined') {\n      return this.mapOpts.inline\n    }\n\n    let annotation = this.mapOpts.annotation\n    if (typeof annotation !== 'undefined' && annotation !== true) {\n      return false\n    }\n\n    if (this.previous().length) {\n      return this.previous().some(i => i.inline)\n    }\n    return true\n  }\n\n  isSourcesContent() {\n    if (typeof this.mapOpts.sourcesContent !== 'undefined') {\n      return this.mapOpts.sourcesContent\n    }\n    if (this.previous().length) {\n      return this.previous().some(i => i.withContent())\n    }\n    return true\n  }\n\n  clearAnnotation() {\n    if (this.mapOpts.annotation === false) return\n\n    let node\n    for (let i = this.root.nodes.length - 1; i >= 0; i--) {\n      node = this.root.nodes[i]\n      if (node.type !== 'comment') continue\n      if (node.text.indexOf('# sourceMappingURL=') === 0) {\n        this.root.removeChild(i)\n      }\n    }\n  }\n\n  setSourcesContent() {\n    let already = {}\n    this.root.walk(node => {\n      if (node.source) {\n        let from = node.source.input.from\n        if (from && !already[from]) {\n          already[from] = true\n          this.map.setSourceContent(\n            this.toUrl(this.path(from)),\n            node.source.input.css\n          )\n        }\n      }\n    })\n  }\n\n  applyPrevMaps() {\n    for (let prev of this.previous()) {\n      let from = this.toUrl(this.path(prev.file))\n      let root = prev.root || dirname(prev.file)\n      let map\n\n      if (this.mapOpts.sourcesContent === false) {\n        map = new SourceMapConsumer(prev.text)\n        if (map.sourcesContent) {\n          map.sourcesContent = map.sourcesContent.map(() => null)\n        }\n      } else {\n        map = prev.consumer()\n      }\n\n      this.map.applySourceMap(map, from, this.toUrl(this.path(root)))\n    }\n  }\n\n  isAnnotation() {\n    if (this.isInline()) {\n      return true\n    }\n    if (typeof this.mapOpts.annotation !== 'undefined') {\n      return this.mapOpts.annotation\n    }\n    if (this.previous().length) {\n      return this.previous().some(i => i.annotation)\n    }\n    return true\n  }\n\n  toBase64(str) {\n    if (Buffer) {\n      return Buffer.from(str).toString('base64')\n    } else {\n      // istanbul ignore next\n      return window.btoa(unescape(encodeURIComponent(str)))\n    }\n  }\n\n  addAnnotation() {\n    let content\n\n    if (this.isInline()) {\n      content =\n        'data:application/json;base64,' + this.toBase64(this.map.toString())\n    } else if (typeof this.mapOpts.annotation === 'string') {\n      content = this.mapOpts.annotation\n    } else if (typeof this.mapOpts.annotation === 'function') {\n      content = this.mapOpts.annotation(this.opts.to, this.root)\n    } else {\n      content = this.outputFile() + '.map'\n    }\n\n    let eol = '\\n'\n    if (this.css.includes('\\r\\n')) eol = '\\r\\n'\n\n    this.css += eol + '/*# sourceMappingURL=' + content + ' */'\n  }\n\n  outputFile() {\n    if (this.opts.to) {\n      return this.path(this.opts.to)\n    }\n    if (this.opts.from) {\n      return this.path(this.opts.from)\n    }\n    return 'to.css'\n  }\n\n  generateMap() {\n    this.generateString()\n    if (this.isSourcesContent()) this.setSourcesContent()\n    if (this.previous().length > 0) this.applyPrevMaps()\n    if (this.isAnnotation()) this.addAnnotation()\n\n    if (this.isInline()) {\n      return [this.css]\n    }\n    return [this.css, this.map]\n  }\n\n  path(file) {\n    if (file.indexOf('<') === 0) return file\n    if (/^\\w+:\\/\\//.test(file)) return file\n    if (this.mapOpts.absolute) return file\n\n    let from = this.opts.to ? dirname(this.opts.to) : '.'\n\n    if (typeof this.mapOpts.annotation === 'string') {\n      from = dirname(resolve(from, this.mapOpts.annotation))\n    }\n\n    file = relative(from, file)\n    return file\n  }\n\n  toUrl(path) {\n    if (sep === '\\\\') {\n      // istanbul ignore next\n      path = path.replace(/\\\\/g, '/')\n    }\n    return encodeURI(path).replace(/[#?]/g, encodeURIComponent)\n  }\n\n  sourcePath(node) {\n    if (this.mapOpts.from) {\n      return this.toUrl(this.mapOpts.from)\n    } else if (this.mapOpts.absolute) {\n      if (pathToFileURL) {\n        return pathToFileURL(node.source.input.from).toString()\n      } else {\n        // istanbul ignore next\n        throw new Error(\n          '`map.absolute` option is not available in this PostCSS build'\n        )\n      }\n    } else {\n      return this.toUrl(this.path(node.source.input.from))\n    }\n  }\n\n  generateString() {\n    this.css = ''\n    this.map = new SourceMapGenerator({ file: this.outputFile() })\n\n    let line = 1\n    let column = 1\n\n    let noSource = '<no source>'\n    let mapping = {\n      source: '',\n      generated: { line: 0, column: 0 },\n      original: { line: 0, column: 0 }\n    }\n\n    let lines, last\n    this.stringify(this.root, (str, node, type) => {\n      this.css += str\n\n      if (node && type !== 'end') {\n        mapping.generated.line = line\n        mapping.generated.column = column - 1\n        if (node.source && node.source.start) {\n          mapping.source = this.sourcePath(node)\n          mapping.original.line = node.source.start.line\n          mapping.original.column = node.source.start.column - 1\n          this.map.addMapping(mapping)\n        } else {\n          mapping.source = noSource\n          mapping.original.line = 1\n          mapping.original.column = 0\n          this.map.addMapping(mapping)\n        }\n      }\n\n      lines = str.match(/\\n/g)\n      if (lines) {\n        line += lines.length\n        last = str.lastIndexOf('\\n')\n        column = str.length - last\n      } else {\n        column += str.length\n      }\n\n      if (node && type !== 'start') {\n        let p = node.parent || { raws: {} }\n        if (node.type !== 'decl' || node !== p.last || p.raws.semicolon) {\n          if (node.source && node.source.end) {\n            mapping.source = this.sourcePath(node)\n            mapping.original.line = node.source.end.line\n            mapping.original.column = node.source.end.column - 1\n            mapping.generated.line = line\n            mapping.generated.column = column - 2\n            this.map.addMapping(mapping)\n          } else {\n            mapping.source = noSource\n            mapping.original.line = 1\n            mapping.original.column = 0\n            mapping.generated.line = line\n            mapping.generated.column = column - 1\n            this.map.addMapping(mapping)\n          }\n        }\n      }\n    })\n  }\n\n  generate() {\n    this.clearAnnotation()\n\n    if (pathAvailable && sourceMapAvailable && this.isMap()) {\n      return this.generateMap()\n    }\n\n    let result = ''\n    this.stringify(this.root, i => {\n      result += i\n    })\n    return [result]\n  }\n}\n\nmodule.exports = MapGenerator\n"]},"metadata":{},"sourceType":"script"}