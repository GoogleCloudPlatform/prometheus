{"ast":null,"code":"import _defineProperty from\"/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{Fragment}from'react';import{Badge}from'reactstrap';import CollapsibleAlertPanel from'./CollapsibleAlertPanel';import Checkbox from'../../components/Checkbox';import{isPresent}from'../../utils';import{useLocalStorage}from'../../hooks/useLocalStorage';var stateColorTuples=[['inactive','success'],['pending','warning'],['firing','danger']];var AlertsContent=function AlertsContent(_ref){var _ref$groups=_ref.groups,groups=_ref$groups===void 0?[]:_ref$groups,statsCount=_ref.statsCount;var _useLocalStorage=useLocalStorage('alerts-status-filter',{firing:true,pending:true,inactive:true}),_useLocalStorage2=_slicedToArray(_useLocalStorage,2),filter=_useLocalStorage2[0],setFilter=_useLocalStorage2[1];var _useLocalStorage3=useLocalStorage('alerts-annotations-status',{checked:false}),_useLocalStorage4=_slicedToArray(_useLocalStorage3,2),showAnnotations=_useLocalStorage4[0],setShowAnnotations=_useLocalStorage4[1];var toggleFilter=function toggleFilter(ruleState){return function(){setFilter(_objectSpread(_objectSpread({},filter),{},_defineProperty({},ruleState,!filter[ruleState])));};};return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"div\",{className:\"d-flex togglers-wrapper\"},stateColorTuples.map(function(_ref2){var _ref3=_slicedToArray(_ref2,2),state=_ref3[0],color=_ref3[1];return/*#__PURE__*/React.createElement(Checkbox,{key:state,wrapperStyles:{marginRight:10},checked:filter[state],id:\"\".concat(state,\"-toggler\"),onChange:toggleFilter(state)},/*#__PURE__*/React.createElement(Badge,{color:color,className:\"text-capitalize\"},state,\" (\",statsCount[state],\")\"));}),/*#__PURE__*/React.createElement(Checkbox,{wrapperStyles:{marginLeft:'auto'},checked:showAnnotations.checked,id:\"show-annotations-toggler\",onChange:function onChange(_ref4){var target=_ref4.target;return setShowAnnotations({checked:target.checked});}},/*#__PURE__*/React.createElement(\"span\",{style:{fontSize:'0.9rem',lineHeight:1.9}},\"Show annotations\"))),groups.map(function(group,i){var hasFilterOn=group.rules.some(function(rule){return filter[rule.state];});return hasFilterOn?/*#__PURE__*/React.createElement(Fragment,{key:i},/*#__PURE__*/React.createElement(GroupInfo,{rules:group.rules},group.file,\" > \",group.name),group.rules.map(function(rule,j){return filter[rule.state]&&/*#__PURE__*/React.createElement(CollapsibleAlertPanel,{key:rule.name+j,showAnnotations:showAnnotations.checked,rule:rule});})):null;}));};export var GroupInfo=function GroupInfo(_ref5){var rules=_ref5.rules,children=_ref5.children;var statesCounter=rules.reduce(function(acc,r){return _objectSpread(_objectSpread({},acc),{},_defineProperty({},r.state,acc[r.state]+r.alerts.length));},{firing:0,pending:0});return/*#__PURE__*/React.createElement(\"div\",{className:\"group-info border rounded-sm\",style:{lineHeight:1.1}},children,/*#__PURE__*/React.createElement(\"div\",{className:\"badges-wrapper\"},isPresent(statesCounter.inactive)&&/*#__PURE__*/React.createElement(Badge,{color:\"success\"},\"inactive\"),statesCounter.pending>0&&/*#__PURE__*/React.createElement(Badge,{color:\"warning\"},\"pending (\",statesCounter.pending,\")\"),statesCounter.firing>0&&/*#__PURE__*/React.createElement(Badge,{color:\"danger\"},\"firing (\",statesCounter.firing,\")\")));};AlertsContent.displayName='Alerts';export default AlertsContent;","map":{"version":3,"sources":["/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/src/pages/alerts/AlertContents.tsx"],"names":["React","Fragment","Badge","CollapsibleAlertPanel","Checkbox","isPresent","useLocalStorage","stateColorTuples","AlertsContent","groups","statsCount","firing","pending","inactive","filter","setFilter","checked","showAnnotations","setShowAnnotations","toggleFilter","ruleState","map","state","color","marginRight","marginLeft","target","fontSize","lineHeight","group","i","hasFilterOn","rules","some","rule","file","name","j","GroupInfo","children","statesCounter","reduce","acc","r","alerts","length","displayName"],"mappings":"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","sourcesContent":["import React, { FC, Fragment } from 'react';\nimport { Badge } from 'reactstrap';\nimport CollapsibleAlertPanel from './CollapsibleAlertPanel';\nimport Checkbox from '../../components/Checkbox';\nimport { isPresent } from '../../utils';\nimport { Rule } from '../../types/types';\nimport { useLocalStorage } from '../../hooks/useLocalStorage';\n\nexport type RuleState = keyof RuleStatus<any>;\n\nexport interface RuleStatus<T> {\n  firing: T;\n  pending: T;\n  inactive: T;\n}\n\nexport interface AlertsProps {\n  groups?: RuleGroup[];\n  statsCount: RuleStatus<number>;\n}\n\nexport interface Alert {\n  labels: Record<string, string>;\n  state: RuleState;\n  value: string;\n  annotations: Record<string, string>;\n  activeAt: string;\n}\n\ninterface RuleGroup {\n  name: string;\n  file: string;\n  rules: Rule[];\n  interval: number;\n}\n\nconst stateColorTuples: Array<[RuleState, 'success' | 'warning' | 'danger']> = [\n  ['inactive', 'success'],\n  ['pending', 'warning'],\n  ['firing', 'danger'],\n];\n\nconst AlertsContent: FC<AlertsProps> = ({ groups = [], statsCount }) => {\n  const [filter, setFilter] = useLocalStorage('alerts-status-filter', {\n    firing: true,\n    pending: true,\n    inactive: true,\n  });\n  const [showAnnotations, setShowAnnotations] = useLocalStorage('alerts-annotations-status', { checked: false });\n\n  const toggleFilter = (ruleState: RuleState) => () => {\n    setFilter({\n      ...filter,\n      [ruleState]: !filter[ruleState],\n    });\n  };\n\n  return (\n    <>\n      <div className=\"d-flex togglers-wrapper\">\n        {stateColorTuples.map(([state, color]) => {\n          return (\n            <Checkbox\n              key={state}\n              wrapperStyles={{ marginRight: 10 }}\n              checked={filter[state]}\n              id={`${state}-toggler`}\n              onChange={toggleFilter(state)}\n            >\n              <Badge color={color} className=\"text-capitalize\">\n                {state} ({statsCount[state]})\n              </Badge>\n            </Checkbox>\n          );\n        })}\n        <Checkbox\n          wrapperStyles={{ marginLeft: 'auto' }}\n          checked={showAnnotations.checked}\n          id=\"show-annotations-toggler\"\n          onChange={({ target }) => setShowAnnotations({ checked: target.checked })}\n        >\n          <span style={{ fontSize: '0.9rem', lineHeight: 1.9 }}>Show annotations</span>\n        </Checkbox>\n      </div>\n      {groups.map((group, i) => {\n        const hasFilterOn = group.rules.some(rule => filter[rule.state]);\n        return hasFilterOn ? (\n          <Fragment key={i}>\n            <GroupInfo rules={group.rules}>\n              {group.file} &gt; {group.name}\n            </GroupInfo>\n            {group.rules.map((rule, j) => {\n              return (\n                filter[rule.state] && (\n                  <CollapsibleAlertPanel key={rule.name + j} showAnnotations={showAnnotations.checked} rule={rule} />\n                )\n              );\n            })}\n          </Fragment>\n        ) : null;\n      })}\n    </>\n  );\n};\n\ninterface GroupInfoProps {\n  rules: Rule[];\n}\n\nexport const GroupInfo: FC<GroupInfoProps> = ({ rules, children }) => {\n  const statesCounter = rules.reduce<any>(\n    (acc, r) => {\n      return {\n        ...acc,\n        [r.state]: acc[r.state] + r.alerts.length,\n      };\n    },\n    {\n      firing: 0,\n      pending: 0,\n    }\n  );\n\n  return (\n    <div className=\"group-info border rounded-sm\" style={{ lineHeight: 1.1 }}>\n      {children}\n      <div className=\"badges-wrapper\">\n        {isPresent(statesCounter.inactive) && <Badge color=\"success\">inactive</Badge>}\n        {statesCounter.pending > 0 && <Badge color=\"warning\">pending ({statesCounter.pending})</Badge>}\n        {statesCounter.firing > 0 && <Badge color=\"danger\">firing ({statesCounter.firing})</Badge>}\n      </div>\n    </div>\n  );\n};\n\nAlertsContent.displayName = 'Alerts';\n\nexport default AlertsContent;\n"]},"metadata":{},"sourceType":"module"}