{"ast":null,"code":"import React from'react';import{useFetch}from'../../hooks/useFetch';import{withStatusIndicator}from'../../components/withStatusIndicator';import AlertsContent from'./AlertContents';import{usePathPrefix}from'../../contexts/PathPrefixContext';import{API_PATH}from'../../constants/constants';var AlertsWithStatusIndicator=withStatusIndicator(AlertsContent);var Alerts=function Alerts(){var pathPrefix=usePathPrefix();var _useFetch=useFetch(\"\".concat(pathPrefix,\"/\").concat(API_PATH,\"/rules?type=alert\")),response=_useFetch.response,error=_useFetch.error,isLoading=_useFetch.isLoading;var ruleStatsCount={inactive:0,pending:0,firing:0};if(response.data&&response.data.groups){response.data.groups.forEach(function(el){return el.rules.forEach(function(r){return ruleStatsCount[r.state]++;});});}return/*#__PURE__*/React.createElement(AlertsWithStatusIndicator,Object.assign({},response.data,{statsCount:ruleStatsCount,error:error,isLoading:isLoading}));};export default Alerts;","map":{"version":3,"sources":["/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/src/pages/alerts/Alerts.tsx"],"names":["React","useFetch","withStatusIndicator","AlertsContent","usePathPrefix","API_PATH","AlertsWithStatusIndicator","Alerts","pathPrefix","response","error","isLoading","ruleStatsCount","inactive","pending","firing","data","groups","forEach","el","rules","r","state"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAA0B,OAA1B,CAEA,OAASC,QAAT,KAAyB,sBAAzB,CACA,OAASC,mBAAT,KAAoC,sCAApC,CACA,MAAOC,CAAAA,aAAP,KAAuD,iBAAvD,CACA,OAASC,aAAT,KAA8B,kCAA9B,CACA,OAASC,QAAT,KAAyB,2BAAzB,CAEA,GAAMC,CAAAA,yBAAyB,CAAGJ,mBAAmB,CAACC,aAAD,CAArD,CAEA,GAAMI,CAAAA,MAA+B,CAAG,QAAlCA,CAAAA,MAAkC,EAAM,CAC5C,GAAMC,CAAAA,UAAU,CAAGJ,aAAa,EAAhC,CACA,cAAuCH,QAAQ,WAAiBO,UAAjB,aAA+BH,QAA/B,sBAA/C,CAAQI,QAAR,WAAQA,QAAR,CAAkBC,KAAlB,WAAkBA,KAAlB,CAAyBC,SAAzB,WAAyBA,SAAzB,CAEA,GAAMC,CAAAA,cAAkC,CAAG,CACzCC,QAAQ,CAAE,CAD+B,CAEzCC,OAAO,CAAE,CAFgC,CAGzCC,MAAM,CAAE,CAHiC,CAA3C,CAMA,GAAIN,QAAQ,CAACO,IAAT,EAAiBP,QAAQ,CAACO,IAAT,CAAcC,MAAnC,CAA2C,CACzCR,QAAQ,CAACO,IAAT,CAAcC,MAAd,CAAqBC,OAArB,CAA6B,SAAAC,EAAE,QAAIA,CAAAA,EAAE,CAACC,KAAH,CAASF,OAAT,CAAiB,SAAAG,CAAC,QAAIT,CAAAA,cAAc,CAACS,CAAC,CAACC,KAAH,CAAd,EAAJ,EAAlB,CAAJ,EAA/B,EACD,CAED,mBAAO,oBAAC,yBAAD,kBAA+Bb,QAAQ,CAACO,IAAxC,EAA8C,UAAU,CAAEJ,cAA1D,CAA0E,KAAK,CAAEF,KAAjF,CAAwF,SAAS,CAAEC,SAAnG,GAAP,CACD,CAfD,CAiBA,cAAeJ,CAAAA,MAAf","sourcesContent":["import React, { FC } from 'react';\nimport { RouteComponentProps } from '@reach/router';\nimport { useFetch } from '../../hooks/useFetch';\nimport { withStatusIndicator } from '../../components/withStatusIndicator';\nimport AlertsContent, { RuleStatus, AlertsProps } from './AlertContents';\nimport { usePathPrefix } from '../../contexts/PathPrefixContext';\nimport { API_PATH } from '../../constants/constants';\n\nconst AlertsWithStatusIndicator = withStatusIndicator(AlertsContent);\n\nconst Alerts: FC<RouteComponentProps> = () => {\n  const pathPrefix = usePathPrefix();\n  const { response, error, isLoading } = useFetch<AlertsProps>(`${pathPrefix}/${API_PATH}/rules?type=alert`);\n\n  const ruleStatsCount: RuleStatus<number> = {\n    inactive: 0,\n    pending: 0,\n    firing: 0,\n  };\n\n  if (response.data && response.data.groups) {\n    response.data.groups.forEach(el => el.rules.forEach(r => ruleStatsCount[r.state]++));\n  }\n\n  return <AlertsWithStatusIndicator {...response.data} statsCount={ruleStatsCount} error={error} isLoading={isLoading} />;\n};\n\nexport default Alerts;\n"]},"metadata":{},"sourceType":"module"}