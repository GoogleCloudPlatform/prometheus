{"ast":null,"code":"import _createForOfIteratorHelper from \"/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { NodeProp, NodeType } from 'lezer-tree';\nimport { StyleModule } from 'style-mod';\nimport { EditorView, ViewPlugin, Decoration } from '@codemirror/view';\nimport { Facet, Prec } from '@codemirror/state';\nimport { syntaxTree } from '@codemirror/language';\nimport { RangeSetBuilder } from '@codemirror/rangeset';\nvar nextTagID = 0; /// Highlighting tags are markers that denote a highlighting category.\n/// They are [associated](#highlight.styleTags) with parts of a syntax\n/// tree by a language mode, and then mapped to an actual CSS style by\n/// a [highlight style](#highlight.HighlightStyle).\n///\n/// Because syntax tree node types and highlight styles have to be\n/// able to talk the same language, CodeMirror uses a mostly _closed_\n/// [vocabulary](#highlight.tags) of syntax tags (as opposed to\n/// traditional open string-based systems, which make it hard for\n/// highlighting themes to cover all the tokens produced by the\n/// various languages).\n///\n/// It _is_ possible to [define](#highlight.Tag^define) your own\n/// highlighting tags for system-internal use (where you control both\n/// the language package and the highlighter), but such tags will not\n/// be picked up by regular highlighters (though you can derive them\n/// from standard tags to allow highlighters to fall back to those).\n\nvar Tag = /*#__PURE__*/function () {\n  /// @internal\n  function Tag( /// The set of tags that match this tag, starting with this one\n  /// itself, sorted in order of decreasing specificity. @internal\n  set, /// The base unmodified tag that this one is based on, if it's\n  /// modified @internal\n  base, /// The modifiers applied to this.base @internal\n  modified) {\n    _classCallCheck(this, Tag);\n\n    this.set = set;\n    this.base = base;\n    this.modified = modified; /// @internal\n\n    this.id = nextTagID++;\n  } /// Define a new tag. If `parent` is given, the tag is treated as a\n  /// sub-tag of that parent, and [highlight\n  /// styles](#highlight.HighlightStyle) that don't mention this tag\n  /// will try to fall back to the parent tag (or grandparent tag,\n  /// etc).\n\n\n  _createClass(Tag, null, [{\n    key: \"define\",\n    value: function define(parent) {\n      if (parent === null || parent === void 0 ? void 0 : parent.base) throw new Error(\"Can not derive from a modified tag\");\n      var tag = new Tag([], null, []);\n      tag.set.push(tag);\n\n      if (parent) {\n        var _iterator = _createForOfIteratorHelper(parent.set),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var _t = _step.value;\n            tag.set.push(_t);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n\n      return tag;\n    } /// Define a tag _modifier_, which is a function that, given a tag,\n    /// will return a tag that is a subtag of the original. Applying the\n    /// same modifier to a twice tag will return the same value (`m1(t1)\n    /// == m1(t1)`) and applying multiple modifiers will, regardless or\n    /// order, produce the same tag (`m1(m2(t1)) == m2(m1(t1))`).\n    ///\n    /// When multiple modifiers are applied to a given base tag, each\n    /// smaller set of modifiers is registered as a parent, so that for\n    /// example `m1(m2(m3(t1)))` is a subtype of `m1(m2(t1))`,\n    /// `m1(m3(t1)`, and so on.\n\n  }, {\n    key: \"defineModifier\",\n    value: function defineModifier() {\n      var mod = new Modifier();\n      return function (tag) {\n        if (tag.modified.indexOf(mod) > -1) return tag;\n        return Modifier.get(tag.base || tag, tag.modified.concat(mod).sort(function (a, b) {\n          return a.id - b.id;\n        }));\n      };\n    }\n  }]);\n\n  return Tag;\n}();\n\nvar nextModifierID = 0;\n\nvar Modifier = /*#__PURE__*/function () {\n  function Modifier() {\n    _classCallCheck(this, Modifier);\n\n    this.instances = [];\n    this.id = nextModifierID++;\n  }\n\n  _createClass(Modifier, null, [{\n    key: \"get\",\n    value: function get(base, mods) {\n      if (!mods.length) return base;\n      var exists = mods[0].instances.find(function (t) {\n        return t.base == base && sameArray(mods, t.modified);\n      });\n      if (exists) return exists;\n      var set = [],\n          tag = new Tag(set, base, mods);\n\n      var _iterator2 = _createForOfIteratorHelper(mods),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var m = _step2.value;\n          m.instances.push(tag);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      var configs = permute(mods);\n\n      var _iterator3 = _createForOfIteratorHelper(base.set),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var parent = _step3.value;\n\n          var _iterator4 = _createForOfIteratorHelper(configs),\n              _step4;\n\n          try {\n            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n              var config = _step4.value;\n              set.push(Modifier.get(parent, config));\n            }\n          } catch (err) {\n            _iterator4.e(err);\n          } finally {\n            _iterator4.f();\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      return tag;\n    }\n  }]);\n\n  return Modifier;\n}();\n\nfunction sameArray(a, b) {\n  return a.length == b.length && a.every(function (x, i) {\n    return x == b[i];\n  });\n}\n\nfunction permute(array) {\n  var result = [array];\n\n  for (var i = 0; i < array.length; i++) {\n    var _iterator5 = _createForOfIteratorHelper(permute(array.slice(0, i).concat(array.slice(i + 1)))),\n        _step5;\n\n    try {\n      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n        var a = _step5.value;\n        result.push(a);\n      }\n    } catch (err) {\n      _iterator5.e(err);\n    } finally {\n      _iterator5.f();\n    }\n  }\n\n  return result;\n} /// This function is used to add a set of tags to a language syntax\n/// via\n/// [`Parser.configure`](https://lezer.codemirror.net/docs/ref#lezer.Parser.configure).\n///\n/// The argument object maps node selectors to [highlighting\n/// tags](#highlight.Tag) or arrays of tags.\n///\n/// Node selectors may hold one or more (space-separated) node paths.\n/// Such a path can be a [node\n/// name](https://lezer.codemirror.net/docs/ref#tree.NodeType.name),\n/// or multiple node names (or `*` wildcards) separated by slash\n/// characters, as in `\"Block/Declaration/VariableName\"`. Such a path\n/// matches the final node but only if its direct parent nodes are the\n/// other nodes mentioned. A `*` in such a path matches any parent,\n/// but only a single levelâ€”wildcards that match multiple parents\n/// aren't supported, both for efficiency reasons and because Lezer\n/// trees make it rather hard to reason about what they would match.)\n///\n/// A path can be ended with `/...` to indicate that the tag assigned\n/// to the node should also apply to all child nodes, even if they\n/// match their own style (by default, only the innermost style is\n/// used).\n///\n/// When a path ends in `!`, as in `Attribute!`, no further matching\n/// happens for the node's child nodes, and the entire node gets the\n/// given style.\n///\n/// In this notation, node names that contain `/`, `!`, `*`, or `...`\n/// must be quoted as JSON strings.\n///\n/// For example:\n///\n/// ```javascript\n/// parser.withProps(\n///   styleTags({\n///     // Style Number and BigNumber nodes\n///     \"Number BigNumber\": tags.number,\n///     // Style Escape nodes whose parent is String\n///     \"String/Escape\": tags.escape,\n///     // Style anything inside Attributes nodes\n///     \"Attributes!\": tags.meta,\n///     // Add a style to all content inside Italic nodes\n///     \"Italic/...\": tags.emphasis,\n///     // Style InvalidString nodes as both `string` and `invalid`\n///     \"InvalidString\": [tags.string, tags.invalid],\n///     // Style the node named \"/\" as punctuation\n///     '\"/\"': tags.punctuation\n///   })\n/// )\n/// ```\n\n\nfunction styleTags(spec) {\n  var byName = Object.create(null);\n\n  for (var prop in spec) {\n    var _tags = spec[prop];\n    if (!Array.isArray(_tags)) _tags = [_tags];\n\n    var _iterator6 = _createForOfIteratorHelper(prop.split(\" \")),\n        _step6;\n\n    try {\n      for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n        var part = _step6.value;\n\n        if (part) {\n          var pieces = [],\n              mode = 2\n          /* Normal */\n          ,\n              rest = part;\n\n          for (var pos = 0;;) {\n            if (rest == \"...\" && pos > 0 && pos + 3 == part.length) {\n              mode = 1\n              /* Inherit */\n              ;\n              break;\n            }\n\n            var m = /^\"(?:[^\"\\\\]|\\\\.)*?\"|[^\\/!]+/.exec(rest);\n            if (!m) throw new RangeError(\"Invalid path: \" + part);\n            pieces.push(m[0] == \"*\" ? null : m[0][0] == '\"' ? JSON.parse(m[0]) : m[0]);\n            pos += m[0].length;\n            if (pos == part.length) break;\n            var next = part[pos++];\n\n            if (pos == part.length && next == \"!\") {\n              mode = 0\n              /* Opaque */\n              ;\n              break;\n            }\n\n            if (next != \"/\") throw new RangeError(\"Invalid path: \" + part);\n            rest = part.slice(pos);\n          }\n\n          var last = pieces.length - 1,\n              inner = pieces[last];\n          if (!inner) throw new RangeError(\"Invalid path: \" + part);\n          var rule = new Rule(_tags, mode, last > 0 ? pieces.slice(0, last) : null);\n          byName[inner] = rule.sort(byName[inner]);\n        }\n      }\n    } catch (err) {\n      _iterator6.e(err);\n    } finally {\n      _iterator6.f();\n    }\n  }\n\n  return ruleNodeProp.add(byName);\n}\n\nvar ruleNodeProp = new NodeProp();\nvar highlightStyle = Facet.define({\n  combine: function combine(stylings) {\n    return stylings.length ? HighlightStyle.combinedMatch(stylings) : null;\n  }\n});\nvar fallbackHighlightStyle = Facet.define({\n  combine: function combine(values) {\n    return values.length ? values[0].match : null;\n  }\n});\n\nfunction noHighlight() {\n  return null;\n}\n\nfunction getHighlightStyle(state) {\n  return state.facet(highlightStyle) || state.facet(fallbackHighlightStyle) || noHighlight;\n}\n\nvar Rule = /*#__PURE__*/function () {\n  function Rule(tags, mode, context, next) {\n    _classCallCheck(this, Rule);\n\n    this.tags = tags;\n    this.mode = mode;\n    this.context = context;\n    this.next = next;\n  }\n\n  _createClass(Rule, [{\n    key: \"sort\",\n    value: function sort(other) {\n      if (!other || other.depth < this.depth) {\n        this.next = other;\n        return this;\n      }\n\n      other.next = this.sort(other.next);\n      return other;\n    }\n  }, {\n    key: \"depth\",\n    get: function get() {\n      return this.context ? this.context.length : 0;\n    }\n  }]);\n\n  return Rule;\n}(); /// A highlight style associates CSS styles with higlighting\n/// [tags](#highlight.Tag).\n\n\nvar HighlightStyle = /*#__PURE__*/function () {\n  function HighlightStyle(spec, options) {\n    _classCallCheck(this, HighlightStyle);\n\n    this.map = Object.create(null);\n    var modSpec;\n\n    function def(spec) {\n      var cls = StyleModule.newName();\n      (modSpec || (modSpec = Object.create(null)))[\".\" + cls] = spec;\n      return cls;\n    }\n\n    this.all = typeof options.all == \"string\" ? options.all : options.all ? def(options.all) : null;\n\n    var _iterator7 = _createForOfIteratorHelper(spec),\n        _step7;\n\n    try {\n      for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n        var style = _step7.value;\n        var cls = (style.class || def(Object.assign({}, style, {\n          tag: null\n        }))) + (this.all ? \" \" + this.all : \"\");\n        var _tags2 = style.tag;\n        if (!Array.isArray(_tags2)) this.map[_tags2.id] = cls;else {\n          var _iterator8 = _createForOfIteratorHelper(_tags2),\n              _step8;\n\n          try {\n            for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n              var tag = _step8.value;\n              this.map[tag.id] = cls;\n            }\n          } catch (err) {\n            _iterator8.e(err);\n          } finally {\n            _iterator8.f();\n          }\n        }\n      }\n    } catch (err) {\n      _iterator7.e(err);\n    } finally {\n      _iterator7.f();\n    }\n\n    this.module = modSpec ? new StyleModule(modSpec) : null;\n    this.scope = options.scope || null;\n    this.match = this.match.bind(this);\n    var ext = [treeHighlighter];\n    if (this.module) ext.push(EditorView.styleModule.of(this.module));\n    this.extension = ext.concat(highlightStyle.of(this));\n    this.fallback = ext.concat(fallbackHighlightStyle.of(this));\n  } /// Returns the CSS class associated with the given tag, if any.\n  /// This method is bound to the instance by the constructor.\n\n\n  _createClass(HighlightStyle, [{\n    key: \"match\",\n    value: function match(tag, scope) {\n      if (this.scope && scope != this.scope) return null;\n\n      var _iterator9 = _createForOfIteratorHelper(tag.set),\n          _step9;\n\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          var _t2 = _step9.value;\n          var match = this.map[_t2.id];\n\n          if (match !== undefined) {\n            if (_t2 != tag) this.map[tag.id] = match;\n            return match;\n          }\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n\n      return this.map[tag.id] = this.all;\n    } /// Combines an array of highlight styles into a single match\n    /// function that returns all of the classes assigned by the styles\n    /// for a given tag.\n\n  }], [{\n    key: \"combinedMatch\",\n    value: function combinedMatch(styles) {\n      if (styles.length == 1) return styles[0].match;\n      var cache = styles.some(function (s) {\n        return s.scope;\n      }) ? undefined : Object.create(null);\n      return function (tag, scope) {\n        var cached = cache && cache[tag.id];\n        if (cached !== undefined) return cached;\n        var result = null;\n\n        var _iterator10 = _createForOfIteratorHelper(styles),\n            _step10;\n\n        try {\n          for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n            var style = _step10.value;\n            var value = style.match(tag, scope);\n            if (value) result = result ? result + \" \" + value : value;\n          }\n        } catch (err) {\n          _iterator10.e(err);\n        } finally {\n          _iterator10.f();\n        }\n\n        if (cache) cache[tag.id] = result;\n        return result;\n      };\n    } /// Create a highlighter style that associates the given styles to\n    /// the given tags. The spec must be objects that hold a style tag\n    /// or array of tags in their `tag` property, and either a single\n    /// `class` property providing a static CSS class (for highlighters\n    /// like [`classHighlightStyle`](#highlight.classHighlightStyle)\n    /// that rely on external styling), or a\n    /// [`style-mod`](https://github.com/marijnh/style-mod#documentation)-style\n    /// set of CSS properties (which define the styling for those tags).\n    ///\n    /// The CSS rules created for a highlighter will be emitted in the\n    /// order of the spec's properties. That means that for elements that\n    /// have multiple tags associated with them, styles defined further\n    /// down in the list will have a higher CSS precedence than styles\n    /// defined earlier.\n\n  }, {\n    key: \"define\",\n    value: function define(specs, options) {\n      return new HighlightStyle(specs, options || {});\n    } /// Returns the CSS classes (if any) that the highlight styles\n    /// active in the given state would assign to the given a style\n    /// [tag](#highlight.Tag) and (optional) language\n    /// [scope](#highlight.HighlightStyle^define^options.scope).\n\n  }, {\n    key: \"get\",\n    value: function get(state, tag, scope) {\n      return getHighlightStyle(state)(tag, scope || NodeType.none);\n    }\n  }]);\n\n  return HighlightStyle;\n}(); /// Given a string of code and a language, parse the code in that\n/// language and run the tree highlighter over the resulting syntax\n/// tree.\n\n\nfunction highlightTree(tree, /// Get the CSS classes used to style a given [tag](#highlight.Tag),\n/// or `null` if it isn't styled. (You'll often want to pass a\n/// highlight style's [`match`](#highlight.HighlightStyle.match)\n/// method here.)\ngetStyle, /// Assign styling to a region of the text. Will be called, in order\n/// of position, for any ranges where more than zero classes apply.\n/// `classes` is a space separated string of CSS classes.\nputStyle) {\n  highlightTreeRange(tree, 0, tree.length, getStyle, putStyle);\n}\n\nvar TreeHighlighter = /*#__PURE__*/function () {\n  function TreeHighlighter(view) {\n    _classCallCheck(this, TreeHighlighter);\n\n    this.markCache = Object.create(null);\n    this.tree = syntaxTree(view.state);\n    this.decorations = this.buildDeco(view, getHighlightStyle(view.state));\n  }\n\n  _createClass(TreeHighlighter, [{\n    key: \"update\",\n    value: function update(_update) {\n      var tree = syntaxTree(_update.state),\n          style = getHighlightStyle(_update.state);\n\n      var styleChange = style != _update.startState.facet(highlightStyle);\n\n      if (tree.length < _update.view.viewport.to && !styleChange) {\n        this.decorations = this.decorations.map(_update.changes);\n      } else if (tree != this.tree || _update.viewportChanged || styleChange) {\n        this.tree = tree;\n        this.decorations = this.buildDeco(_update.view, style);\n      }\n    }\n  }, {\n    key: \"buildDeco\",\n    value: function buildDeco(view, match) {\n      var _this = this;\n\n      if (match == noHighlight || !this.tree.length) return Decoration.none;\n      var builder = new RangeSetBuilder();\n\n      var _iterator11 = _createForOfIteratorHelper(view.visibleRanges),\n          _step11;\n\n      try {\n        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n          var _step11$value = _step11.value,\n              from = _step11$value.from,\n              to = _step11$value.to;\n          highlightTreeRange(this.tree, from, to, match, function (from, to, style) {\n            builder.add(from, to, _this.markCache[style] || (_this.markCache[style] = Decoration.mark({\n              class: style\n            })));\n          });\n        }\n      } catch (err) {\n        _iterator11.e(err);\n      } finally {\n        _iterator11.f();\n      }\n\n      return builder.finish();\n    }\n  }]);\n\n  return TreeHighlighter;\n}(); // This extension installs a highlighter that highlights based on the\n// syntax tree and highlight style.\n\n\nvar treeHighlighter = Prec.fallback(ViewPlugin.fromClass(TreeHighlighter, {\n  decorations: function decorations(v) {\n    return v.decorations;\n  }\n}));\nvar nodeStack = [\"\"];\n\nfunction highlightTreeRange(tree, from, to, style, span) {\n  var spanStart = from,\n      spanClass = \"\";\n  var cursor = tree.topNode.cursor;\n\n  function node(inheritedClass, depth, scope) {\n    var type = cursor.type,\n        start = cursor.from,\n        end = cursor.to;\n    if (start >= to || end <= from) return;\n    nodeStack[depth] = type.name;\n    if (type.isTop) scope = type;\n    var cls = inheritedClass;\n    var rule = type.prop(ruleNodeProp),\n        opaque = false;\n\n    while (rule) {\n      if (!rule.context || matchContext(rule.context, nodeStack, depth)) {\n        var _iterator12 = _createForOfIteratorHelper(rule.tags),\n            _step12;\n\n        try {\n          for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n            var tag = _step12.value;\n            var st = style(tag, scope);\n\n            if (st) {\n              if (cls) cls += \" \";\n              cls += st;\n              if (rule.mode == 1\n              /* Inherit */\n              ) inheritedClass += (inheritedClass ? \" \" : \"\") + st;else if (rule.mode == 0\n              /* Opaque */\n              ) opaque = true;\n            }\n          }\n        } catch (err) {\n          _iterator12.e(err);\n        } finally {\n          _iterator12.f();\n        }\n\n        break;\n      }\n\n      rule = rule.next;\n    }\n\n    if (cls != spanClass) {\n      if (start > spanStart && spanClass) span(spanStart, cursor.from, spanClass);\n      spanStart = start;\n      spanClass = cls;\n    }\n\n    if (!opaque && cursor.firstChild()) {\n      do {\n        var _end = cursor.to;\n        node(inheritedClass, depth + 1, scope);\n\n        if (spanClass != cls) {\n          var pos = Math.min(to, _end);\n          if (pos > spanStart && spanClass) span(spanStart, pos, spanClass);\n          spanStart = pos;\n          spanClass = cls;\n        }\n      } while (cursor.nextSibling());\n\n      cursor.parent();\n    }\n  }\n\n  node(\"\", 0, tree.type);\n}\n\nfunction matchContext(context, stack, depth) {\n  if (context.length > depth - 1) return false;\n\n  for (var d = depth - 1, i = context.length - 1; i >= 0; i--, d--) {\n    var check = context[i];\n    if (check && check != stack[d]) return false;\n  }\n\n  return true;\n}\n\nvar t = Tag.define;\nvar comment = t(),\n    name = t(),\n    typeName = t(name),\n    literal = t(),\n    string = t(literal),\n    number = t(literal),\n    content = t(),\n    heading = t(content),\n    keyword = t(),\n    operator = t(),\n    punctuation = t(),\n    bracket = t(punctuation),\n    meta = t(); /// The default set of highlighting [tags](#highlight.Tag^define) used\n/// by regular language packages and themes.\n///\n/// This collection is heavily biased towards programming languages,\n/// and necessarily incomplete. A full ontology of syntactic\n/// constructs would fill a stack of books, and be impractical to\n/// write themes for. So try to make do with this set. If all else\n/// fails, [open an\n/// issue](https://github.com/codemirror/codemirror.next) to propose a\n/// new tag, or [define](#highlight.Tag^define) a local custom tag for\n/// your use case.\n///\n/// Note that it is not obligatory to always attach the most specific\n/// tag possible to an elementâ€”if your grammar can't easily\n/// distinguish a certain type of element (such as a local variable),\n/// it is okay to style it as its more general variant (a variable).\n/// \n/// For tags that extend some parent tag, the documentation links to\n/// the parent.\n\nvar tags = {\n  /// A comment.\n  comment: comment,\n  /// A line [comment](#highlight.tags.comment).\n  lineComment: t(comment),\n  /// A block [comment](#highlight.tags.comment).\n  blockComment: t(comment),\n  /// A documentation [comment](#highlight.tags.comment).\n  docComment: t(comment),\n  /// Any kind of identifier.\n  name: name,\n  /// The [name](#highlight.tags.name) of a variable.\n  variableName: t(name),\n  /// A type [name](#highlight.tags.name).\n  typeName: typeName,\n  /// A tag name (subtag of [`typeName`](#highlight.tags.typeName)).\n  tagName: t(typeName),\n  /// A property, field, or attribute [name](#highlight.tags.name).\n  propertyName: t(name),\n  /// The [name](#highlight.tags.name) of a class.\n  className: t(name),\n  /// A label [name](#highlight.tags.name).\n  labelName: t(name),\n  /// A namespace [name](#highlight.tags.name).\n  namespace: t(name),\n  /// The [name](#highlight.tags.name) of a macro.\n  macroName: t(name),\n  /// A literal value.\n  literal: literal,\n  /// A string [literal](#highlight.tags.literal).\n  string: string,\n  /// A documentation [string](#highlight.tags.string).\n  docString: t(string),\n  /// A character literal (subtag of [string](#highlight.tags.string)).\n  character: t(string),\n  /// A number [literal](#highlight.tags.literal).\n  number: number,\n  /// An integer [number](#highlight.tags.number) literal.\n  integer: t(number),\n  /// A floating-point [number](#highlight.tags.number) literal.\n  float: t(number),\n  /// A boolean [literal](#highlight.tags.literal).\n  bool: t(literal),\n  /// Regular expression [literal](#highlight.tags.literal).\n  regexp: t(literal),\n  /// An escape [literal](#highlight.tags.literal), for example a\n  /// backslash escape in a string.\n  escape: t(literal),\n  /// A color [literal](#highlight.tags.literal).\n  color: t(literal),\n  /// A URL [literal](#highlight.tags.literal).\n  url: t(literal),\n  /// A language keyword.\n  keyword: keyword,\n  /// The [keyword](#highlight.tags.keyword) for the self or this\n  /// object.\n  self: t(keyword),\n  /// The [keyword](#highlight.tags.keyword) for null.\n  null: t(keyword),\n  /// A [keyword](#highlight.tags.keyword) denoting some atomic value.\n  atom: t(keyword),\n  /// A [keyword](#highlight.tags.keyword) that represents a unit.\n  unit: t(keyword),\n  /// A modifier [keyword](#highlight.tags.keyword).\n  modifier: t(keyword),\n  /// A [keyword](#highlight.tags.keyword) that acts as an operator.\n  operatorKeyword: t(keyword),\n  /// A control-flow related [keyword](#highlight.tags.keyword).\n  controlKeyword: t(keyword),\n  /// A [keyword](#highlight.tags.keyword) that defines something.\n  definitionKeyword: t(keyword),\n  /// An operator.\n  operator: operator,\n  /// An [operator](#highlight.tags.operator) that defines something.\n  derefOperator: t(operator),\n  /// Arithmetic-related [operator](#highlight.tags.operator).\n  arithmeticOperator: t(operator),\n  /// Logical [operator](#highlight.tags.operator).\n  logicOperator: t(operator),\n  /// Bit [operator](#highlight.tags.operator).\n  bitwiseOperator: t(operator),\n  /// Comparison [operator](#highlight.tags.operator).\n  compareOperator: t(operator),\n  /// [Operator](#highlight.tags.operator) that updates its operand.\n  updateOperator: t(operator),\n  /// [Operator](#highlight.tags.operator) that defines something.\n  definitionOperator: t(operator),\n  /// Type-related [operator](#highlight.tags.operator).\n  typeOperator: t(operator),\n  /// Control-flow [operator](#highlight.tags.operator).\n  controlOperator: t(operator),\n  /// Program or markup punctuation.\n  punctuation: punctuation,\n  /// [Punctuation](#highlight.tags.punctuation) that separates\n  /// things.\n  separator: t(punctuation),\n  /// Bracket-style [punctuation](#highlight.tags.punctuation).\n  bracket: bracket,\n  /// Angle [brackets](#highlight.tags.bracket) (usually `<` and `>`\n  /// tokens).\n  angleBracket: t(bracket),\n  /// Square [brackets](#highlight.tags.bracket) (usually `[` and `]`\n  /// tokens).\n  squareBracket: t(bracket),\n  /// Parentheses (usually `(` and `)` tokens). Subtag of\n  /// [bracket](#highlight.tags.bracket).\n  paren: t(bracket),\n  /// Braces (usually `{` and `}` tokens). Subtag of\n  /// [bracket](#highlight.tags.bracket).\n  brace: t(bracket),\n  /// Content, for example plain text in XML or markup documents.\n  content: content,\n  /// [Content](#highlight.tags.content) that represents a heading.\n  heading: heading,\n  /// A level 1 [heading](#highlight.tags.heading).\n  heading1: t(heading),\n  /// A level 2 [heading](#highlight.tags.heading).\n  heading2: t(heading),\n  /// A level 3 [heading](#highlight.tags.heading).\n  heading3: t(heading),\n  /// A level 4 [heading](#highlight.tags.heading).\n  heading4: t(heading),\n  /// A level 5 [heading](#highlight.tags.heading).\n  heading5: t(heading),\n  /// A level 6 [heading](#highlight.tags.heading).\n  heading6: t(heading),\n  /// A prose separator (such as a horizontal rule).\n  contentSeparator: t(content),\n  /// [Content](#highlight.tags.content) that represents a list.\n  list: t(content),\n  /// [Content](#highlight.tags.content) that represents a quote.\n  quote: t(content),\n  /// [Content](#highlight.tags.content) that is emphasized.\n  emphasis: t(content),\n  /// [Content](#highlight.tags.content) that is styled strong.\n  strong: t(content),\n  /// [Content](#highlight.tags.content) that is part of a link.\n  link: t(content),\n  /// [Content](#highlight.tags.content) that is styled as code or\n  /// monospace.\n  monospace: t(content),\n  /// Inserted text in a change-tracking format.\n  inserted: t(),\n  /// Deleted text.\n  deleted: t(),\n  /// Changed text.\n  changed: t(),\n  /// An invalid or unsyntactic element.\n  invalid: t(),\n  /// Metadata or meta-instruction.\n  meta: meta,\n  /// [Metadata](#highlight.tags.meta) that applies to the entire\n  /// document.\n  documentMeta: t(meta),\n  /// [Metadata](#highlight.tags.meta) that annotates or adds\n  /// attributes to a given syntactic element.\n  annotation: t(meta),\n  /// Processing instruction or preprocessor directive. Subtag of\n  /// [meta](#highlight.tags.meta).\n  processingInstruction: t(meta),\n  /// [Modifier](#highlight.Tag^defineModifier) that indicates that a\n  /// given element is being defined. Expected to be used with the\n  /// various [name](#highlight.tags.name) tags.\n  definition: Tag.defineModifier(),\n  /// [Modifier](#highlight.Tag^defineModifier) that indicates that\n  /// something is constant. Mostly expected to be used with\n  /// [variable names](#highlight.tags.variableName).\n  constant: Tag.defineModifier(),\n  /// [Modifier](#highlight.Tag^defineModifier) used to indicate that\n  /// a [variable](#highlight.tags.variableName) or [property\n  /// name](#highlight.tags.propertyName) is being called or defined\n  /// as a function.\n  function: Tag.defineModifier(),\n  /// [Modifier](#highlight.Tag^defineModifier) that can be applied to\n  /// [names](#highlight.tags.name) to indicate that they belong to\n  /// the language's standard environment.\n  standard: Tag.defineModifier(),\n  /// [Modifier](#highlight.Tag^defineModifier) that indicates a given\n  /// [names](#highlight.tags.name) is local to some scope.\n  local: Tag.defineModifier(),\n  /// A generic variant [modifier](#highlight.Tag^defineModifier) that\n  /// can be used to tag language-specific alternative variants of\n  /// some common tag. It is recommended for themes to define special\n  /// forms of at least the [string](#highlight.tags.string) and\n  /// [variable name](#highlight.tags.variableName) tags, since those\n  /// come up a lot.\n  special: Tag.defineModifier()\n}; /// A default highlight style (works well with light themes).\n\nvar defaultHighlightStyle = HighlightStyle.define([{\n  tag: tags.link,\n  textDecoration: \"underline\"\n}, {\n  tag: tags.heading,\n  textDecoration: \"underline\",\n  fontWeight: \"bold\"\n}, {\n  tag: tags.emphasis,\n  fontStyle: \"italic\"\n}, {\n  tag: tags.strong,\n  fontWeight: \"bold\"\n}, {\n  tag: tags.keyword,\n  color: \"#708\"\n}, {\n  tag: [tags.atom, tags.bool, tags.url, tags.contentSeparator, tags.labelName],\n  color: \"#219\"\n}, {\n  tag: [tags.literal, tags.inserted],\n  color: \"#164\"\n}, {\n  tag: [tags.string, tags.deleted],\n  color: \"#a11\"\n}, {\n  tag: [tags.regexp, tags.escape, tags.special(tags.string)],\n  color: \"#e40\"\n}, {\n  tag: tags.definition(tags.variableName),\n  color: \"#00f\"\n}, {\n  tag: tags.local(tags.variableName),\n  color: \"#30a\"\n}, {\n  tag: [tags.typeName, tags.namespace],\n  color: \"#085\"\n}, {\n  tag: tags.className,\n  color: \"#167\"\n}, {\n  tag: [tags.special(tags.variableName), tags.macroName],\n  color: \"#256\"\n}, {\n  tag: tags.definition(tags.propertyName),\n  color: \"#00c\"\n}, {\n  tag: tags.comment,\n  color: \"#940\"\n}, {\n  tag: tags.meta,\n  color: \"#7a757a\"\n}, {\n  tag: tags.invalid,\n  color: \"#f00\"\n}]); /// This is a highlight style that adds stable, predictable classes to\n/// tokens, for styling with external CSS.\n///\n/// These tags are mapped to their name prefixed with `\"cmt-\"` (for\n/// example `\"cmt-comment\"`):\n///\n/// * [`link`](#highlight.tags.link)\n/// * [`heading`](#highlight.tags.heading)\n/// * [`emphasis`](#highlight.tags.emphasis)\n/// * [`strong`](#highlight.tags.strong)\n/// * [`keyword`](#highlight.tags.keyword)\n/// * [`atom`](#highlight.tags.atom) [`bool`](#highlight.tags.bool)\n/// * [`url`](#highlight.tags.url)\n/// * [`labelName`](#highlight.tags.labelName)\n/// * [`inserted`](#highlight.tags.inserted)\n/// * [`deleted`](#highlight.tags.deleted)\n/// * [`literal`](#highlight.tags.literal)\n/// * [`string`](#highlight.tags.string)\n/// * [`number`](#highlight.tags.number)\n/// * [`variableName`](#highlight.tags.variableName)\n/// * [`typeName`](#highlight.tags.typeName)\n/// * [`namespace`](#highlight.tags.namespace)\n/// * [`macroName`](#highlight.tags.macroName)\n/// * [`propertyName`](#highlight.tags.propertyName)\n/// * [`operator`](#highlight.tags.operator)\n/// * [`comment`](#highlight.tags.comment)\n/// * [`meta`](#highlight.tags.meta)\n/// * [`punctuation`](#highlight.tags.puncutation)\n/// * [`invalid`](#highlight.tags.invalid)\n///\n/// In addition, these mappings are provided:\n///\n/// * [`regexp`](#highlight.tags.regexp),\n///   [`escape`](#highlight.tags.escape), and\n///   [`special`](#highlight.tags.special)[`(string)`](#highlight.tags.string)\n///   are mapped to `\"cmt-string2\"`\n/// * [`special`](#highlight.tags.special)[`(variableName)`](#highlight.tags.variableName)\n///   to `\"cmt-variableName2\"`\n/// * [`local`](#highlight.tags.local)[`(variableName)`](#highlight.tags.variableName)\n///   to `\"cmt-variableName cmt-local\"`\n/// * [`definition`](#highlight.tags.definition)[`(variableName)`](#highlight.tags.variableName)\n///   to `\"cmt-variableName cmt-definition\"`\n\nvar classHighlightStyle = HighlightStyle.define([{\n  tag: tags.link,\n  class: \"cmt-link\"\n}, {\n  tag: tags.heading,\n  class: \"cmt-heading\"\n}, {\n  tag: tags.emphasis,\n  class: \"cmt-emphasis\"\n}, {\n  tag: tags.strong,\n  class: \"cmt-strong\"\n}, {\n  tag: tags.keyword,\n  class: \"cmt-keyword\"\n}, {\n  tag: tags.atom,\n  class: \"cmt-atom\"\n}, {\n  tag: tags.bool,\n  class: \"cmt-bool\"\n}, {\n  tag: tags.url,\n  class: \"cmt-url\"\n}, {\n  tag: tags.labelName,\n  class: \"cmt-labelName\"\n}, {\n  tag: tags.inserted,\n  class: \"cmt-inserted\"\n}, {\n  tag: tags.deleted,\n  class: \"cmt-deleted\"\n}, {\n  tag: tags.literal,\n  class: \"cmt-literal\"\n}, {\n  tag: tags.string,\n  class: \"cmt-string\"\n}, {\n  tag: tags.number,\n  class: \"cmt-number\"\n}, {\n  tag: [tags.regexp, tags.escape, tags.special(tags.string)],\n  class: \"cmt-string2\"\n}, {\n  tag: tags.variableName,\n  class: \"cmt-variableName\"\n}, {\n  tag: tags.local(tags.variableName),\n  class: \"cmt-variableName cmt-local\"\n}, {\n  tag: tags.definition(tags.variableName),\n  class: \"cmt-variableName cmt-definition\"\n}, {\n  tag: tags.special(tags.variableName),\n  class: \"cmt-variableName2\"\n}, {\n  tag: tags.typeName,\n  class: \"cmt-typeName\"\n}, {\n  tag: tags.namespace,\n  class: \"cmt-namespace\"\n}, {\n  tag: tags.macroName,\n  class: \"cmt-macroName\"\n}, {\n  tag: tags.propertyName,\n  class: \"cmt-propertyName\"\n}, {\n  tag: tags.operator,\n  class: \"cmt-operator\"\n}, {\n  tag: tags.comment,\n  class: \"cmt-comment\"\n}, {\n  tag: tags.meta,\n  class: \"cmt-meta\"\n}, {\n  tag: tags.invalid,\n  class: \"cmt-invalid\"\n}, {\n  tag: tags.punctuation,\n  class: \"cmt-punctuation\"\n}]);\nexport { HighlightStyle, Tag, classHighlightStyle, defaultHighlightStyle, highlightTree, styleTags, tags };","map":{"version":3,"sources":["/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/@codemirror/highlight/dist/index.js"],"names":["NodeProp","NodeType","StyleModule","EditorView","ViewPlugin","Decoration","Facet","Prec","syntaxTree","RangeSetBuilder","nextTagID","Tag","set","base","modified","id","parent","Error","tag","push","t","mod","Modifier","indexOf","get","concat","sort","a","b","nextModifierID","instances","mods","length","exists","find","sameArray","m","configs","permute","config","every","x","i","array","result","slice","styleTags","spec","byName","Object","create","prop","tags","Array","isArray","split","part","pieces","mode","rest","pos","exec","RangeError","JSON","parse","next","last","inner","rule","Rule","ruleNodeProp","add","highlightStyle","define","combine","stylings","HighlightStyle","combinedMatch","fallbackHighlightStyle","values","match","noHighlight","getHighlightStyle","state","facet","context","other","depth","options","map","modSpec","def","cls","newName","all","style","class","assign","module","scope","bind","ext","treeHighlighter","styleModule","of","extension","fallback","undefined","styles","cache","some","s","cached","value","specs","none","highlightTree","tree","getStyle","putStyle","highlightTreeRange","TreeHighlighter","view","markCache","decorations","buildDeco","update","styleChange","startState","viewport","to","changes","viewportChanged","builder","visibleRanges","from","mark","finish","fromClass","v","nodeStack","span","spanStart","spanClass","cursor","topNode","node","inheritedClass","type","start","end","name","isTop","opaque","matchContext","st","firstChild","Math","min","nextSibling","stack","d","check","comment","typeName","literal","string","number","content","heading","keyword","operator","punctuation","bracket","meta","lineComment","blockComment","docComment","variableName","tagName","propertyName","className","labelName","namespace","macroName","docString","character","integer","float","bool","regexp","escape","color","url","self","null","atom","unit","modifier","operatorKeyword","controlKeyword","definitionKeyword","derefOperator","arithmeticOperator","logicOperator","bitwiseOperator","compareOperator","updateOperator","definitionOperator","typeOperator","controlOperator","separator","angleBracket","squareBracket","paren","brace","heading1","heading2","heading3","heading4","heading5","heading6","contentSeparator","list","quote","emphasis","strong","link","monospace","inserted","deleted","changed","invalid","documentMeta","annotation","processingInstruction","definition","defineModifier","constant","function","standard","local","special","defaultHighlightStyle","textDecoration","fontWeight","fontStyle","classHighlightStyle"],"mappings":"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","sourcesContent":["import { NodeProp, NodeType } from 'lezer-tree';\nimport { StyleModule } from 'style-mod';\nimport { EditorView, ViewPlugin, Decoration } from '@codemirror/view';\nimport { Facet, Prec } from '@codemirror/state';\nimport { syntaxTree } from '@codemirror/language';\nimport { RangeSetBuilder } from '@codemirror/rangeset';\n\nlet nextTagID = 0;\n/// Highlighting tags are markers that denote a highlighting category.\n/// They are [associated](#highlight.styleTags) with parts of a syntax\n/// tree by a language mode, and then mapped to an actual CSS style by\n/// a [highlight style](#highlight.HighlightStyle).\n///\n/// Because syntax tree node types and highlight styles have to be\n/// able to talk the same language, CodeMirror uses a mostly _closed_\n/// [vocabulary](#highlight.tags) of syntax tags (as opposed to\n/// traditional open string-based systems, which make it hard for\n/// highlighting themes to cover all the tokens produced by the\n/// various languages).\n///\n/// It _is_ possible to [define](#highlight.Tag^define) your own\n/// highlighting tags for system-internal use (where you control both\n/// the language package and the highlighter), but such tags will not\n/// be picked up by regular highlighters (though you can derive them\n/// from standard tags to allow highlighters to fall back to those).\nclass Tag {\n    /// @internal\n    constructor(\n    /// The set of tags that match this tag, starting with this one\n    /// itself, sorted in order of decreasing specificity. @internal\n    set, \n    /// The base unmodified tag that this one is based on, if it's\n    /// modified @internal\n    base, \n    /// The modifiers applied to this.base @internal\n    modified) {\n        this.set = set;\n        this.base = base;\n        this.modified = modified;\n        /// @internal\n        this.id = nextTagID++;\n    }\n    /// Define a new tag. If `parent` is given, the tag is treated as a\n    /// sub-tag of that parent, and [highlight\n    /// styles](#highlight.HighlightStyle) that don't mention this tag\n    /// will try to fall back to the parent tag (or grandparent tag,\n    /// etc).\n    static define(parent) {\n        if (parent === null || parent === void 0 ? void 0 : parent.base)\n            throw new Error(\"Can not derive from a modified tag\");\n        let tag = new Tag([], null, []);\n        tag.set.push(tag);\n        if (parent)\n            for (let t of parent.set)\n                tag.set.push(t);\n        return tag;\n    }\n    /// Define a tag _modifier_, which is a function that, given a tag,\n    /// will return a tag that is a subtag of the original. Applying the\n    /// same modifier to a twice tag will return the same value (`m1(t1)\n    /// == m1(t1)`) and applying multiple modifiers will, regardless or\n    /// order, produce the same tag (`m1(m2(t1)) == m2(m1(t1))`).\n    ///\n    /// When multiple modifiers are applied to a given base tag, each\n    /// smaller set of modifiers is registered as a parent, so that for\n    /// example `m1(m2(m3(t1)))` is a subtype of `m1(m2(t1))`,\n    /// `m1(m3(t1)`, and so on.\n    static defineModifier() {\n        let mod = new Modifier;\n        return (tag) => {\n            if (tag.modified.indexOf(mod) > -1)\n                return tag;\n            return Modifier.get(tag.base || tag, tag.modified.concat(mod).sort((a, b) => a.id - b.id));\n        };\n    }\n}\nlet nextModifierID = 0;\nclass Modifier {\n    constructor() {\n        this.instances = [];\n        this.id = nextModifierID++;\n    }\n    static get(base, mods) {\n        if (!mods.length)\n            return base;\n        let exists = mods[0].instances.find(t => t.base == base && sameArray(mods, t.modified));\n        if (exists)\n            return exists;\n        let set = [], tag = new Tag(set, base, mods);\n        for (let m of mods)\n            m.instances.push(tag);\n        let configs = permute(mods);\n        for (let parent of base.set)\n            for (let config of configs)\n                set.push(Modifier.get(parent, config));\n        return tag;\n    }\n}\nfunction sameArray(a, b) {\n    return a.length == b.length && a.every((x, i) => x == b[i]);\n}\nfunction permute(array) {\n    let result = [array];\n    for (let i = 0; i < array.length; i++) {\n        for (let a of permute(array.slice(0, i).concat(array.slice(i + 1))))\n            result.push(a);\n    }\n    return result;\n}\n/// This function is used to add a set of tags to a language syntax\n/// via\n/// [`Parser.configure`](https://lezer.codemirror.net/docs/ref#lezer.Parser.configure).\n///\n/// The argument object maps node selectors to [highlighting\n/// tags](#highlight.Tag) or arrays of tags.\n///\n/// Node selectors may hold one or more (space-separated) node paths.\n/// Such a path can be a [node\n/// name](https://lezer.codemirror.net/docs/ref#tree.NodeType.name),\n/// or multiple node names (or `*` wildcards) separated by slash\n/// characters, as in `\"Block/Declaration/VariableName\"`. Such a path\n/// matches the final node but only if its direct parent nodes are the\n/// other nodes mentioned. A `*` in such a path matches any parent,\n/// but only a single levelâ€”wildcards that match multiple parents\n/// aren't supported, both for efficiency reasons and because Lezer\n/// trees make it rather hard to reason about what they would match.)\n///\n/// A path can be ended with `/...` to indicate that the tag assigned\n/// to the node should also apply to all child nodes, even if they\n/// match their own style (by default, only the innermost style is\n/// used).\n///\n/// When a path ends in `!`, as in `Attribute!`, no further matching\n/// happens for the node's child nodes, and the entire node gets the\n/// given style.\n///\n/// In this notation, node names that contain `/`, `!`, `*`, or `...`\n/// must be quoted as JSON strings.\n///\n/// For example:\n///\n/// ```javascript\n/// parser.withProps(\n///   styleTags({\n///     // Style Number and BigNumber nodes\n///     \"Number BigNumber\": tags.number,\n///     // Style Escape nodes whose parent is String\n///     \"String/Escape\": tags.escape,\n///     // Style anything inside Attributes nodes\n///     \"Attributes!\": tags.meta,\n///     // Add a style to all content inside Italic nodes\n///     \"Italic/...\": tags.emphasis,\n///     // Style InvalidString nodes as both `string` and `invalid`\n///     \"InvalidString\": [tags.string, tags.invalid],\n///     // Style the node named \"/\" as punctuation\n///     '\"/\"': tags.punctuation\n///   })\n/// )\n/// ```\nfunction styleTags(spec) {\n    let byName = Object.create(null);\n    for (let prop in spec) {\n        let tags = spec[prop];\n        if (!Array.isArray(tags))\n            tags = [tags];\n        for (let part of prop.split(\" \"))\n            if (part) {\n                let pieces = [], mode = 2 /* Normal */, rest = part;\n                for (let pos = 0;;) {\n                    if (rest == \"...\" && pos > 0 && pos + 3 == part.length) {\n                        mode = 1 /* Inherit */;\n                        break;\n                    }\n                    let m = /^\"(?:[^\"\\\\]|\\\\.)*?\"|[^\\/!]+/.exec(rest);\n                    if (!m)\n                        throw new RangeError(\"Invalid path: \" + part);\n                    pieces.push(m[0] == \"*\" ? null : m[0][0] == '\"' ? JSON.parse(m[0]) : m[0]);\n                    pos += m[0].length;\n                    if (pos == part.length)\n                        break;\n                    let next = part[pos++];\n                    if (pos == part.length && next == \"!\") {\n                        mode = 0 /* Opaque */;\n                        break;\n                    }\n                    if (next != \"/\")\n                        throw new RangeError(\"Invalid path: \" + part);\n                    rest = part.slice(pos);\n                }\n                let last = pieces.length - 1, inner = pieces[last];\n                if (!inner)\n                    throw new RangeError(\"Invalid path: \" + part);\n                let rule = new Rule(tags, mode, last > 0 ? pieces.slice(0, last) : null);\n                byName[inner] = rule.sort(byName[inner]);\n            }\n    }\n    return ruleNodeProp.add(byName);\n}\nconst ruleNodeProp = new NodeProp();\nconst highlightStyle = Facet.define({\n    combine(stylings) { return stylings.length ? HighlightStyle.combinedMatch(stylings) : null; }\n});\nconst fallbackHighlightStyle = Facet.define({\n    combine(values) { return values.length ? values[0].match : null; }\n});\nfunction noHighlight() { return null; }\nfunction getHighlightStyle(state) {\n    return state.facet(highlightStyle) || state.facet(fallbackHighlightStyle) || noHighlight;\n}\nclass Rule {\n    constructor(tags, mode, context, next) {\n        this.tags = tags;\n        this.mode = mode;\n        this.context = context;\n        this.next = next;\n    }\n    sort(other) {\n        if (!other || other.depth < this.depth) {\n            this.next = other;\n            return this;\n        }\n        other.next = this.sort(other.next);\n        return other;\n    }\n    get depth() { return this.context ? this.context.length : 0; }\n}\n/// A highlight style associates CSS styles with higlighting\n/// [tags](#highlight.Tag).\nclass HighlightStyle {\n    constructor(spec, options) {\n        this.map = Object.create(null);\n        let modSpec;\n        function def(spec) {\n            let cls = StyleModule.newName();\n            (modSpec || (modSpec = Object.create(null)))[\".\" + cls] = spec;\n            return cls;\n        }\n        this.all = typeof options.all == \"string\" ? options.all : options.all ? def(options.all) : null;\n        for (let style of spec) {\n            let cls = (style.class || def(Object.assign({}, style, { tag: null }))) +\n                (this.all ? \" \" + this.all : \"\");\n            let tags = style.tag;\n            if (!Array.isArray(tags))\n                this.map[tags.id] = cls;\n            else\n                for (let tag of tags)\n                    this.map[tag.id] = cls;\n        }\n        this.module = modSpec ? new StyleModule(modSpec) : null;\n        this.scope = options.scope || null;\n        this.match = this.match.bind(this);\n        let ext = [treeHighlighter];\n        if (this.module)\n            ext.push(EditorView.styleModule.of(this.module));\n        this.extension = ext.concat(highlightStyle.of(this));\n        this.fallback = ext.concat(fallbackHighlightStyle.of(this));\n    }\n    /// Returns the CSS class associated with the given tag, if any.\n    /// This method is bound to the instance by the constructor.\n    match(tag, scope) {\n        if (this.scope && scope != this.scope)\n            return null;\n        for (let t of tag.set) {\n            let match = this.map[t.id];\n            if (match !== undefined) {\n                if (t != tag)\n                    this.map[tag.id] = match;\n                return match;\n            }\n        }\n        return this.map[tag.id] = this.all;\n    }\n    /// Combines an array of highlight styles into a single match\n    /// function that returns all of the classes assigned by the styles\n    /// for a given tag.\n    static combinedMatch(styles) {\n        if (styles.length == 1)\n            return styles[0].match;\n        let cache = styles.some(s => s.scope) ? undefined : Object.create(null);\n        return (tag, scope) => {\n            let cached = cache && cache[tag.id];\n            if (cached !== undefined)\n                return cached;\n            let result = null;\n            for (let style of styles) {\n                let value = style.match(tag, scope);\n                if (value)\n                    result = result ? result + \" \" + value : value;\n            }\n            if (cache)\n                cache[tag.id] = result;\n            return result;\n        };\n    }\n    /// Create a highlighter style that associates the given styles to\n    /// the given tags. The spec must be objects that hold a style tag\n    /// or array of tags in their `tag` property, and either a single\n    /// `class` property providing a static CSS class (for highlighters\n    /// like [`classHighlightStyle`](#highlight.classHighlightStyle)\n    /// that rely on external styling), or a\n    /// [`style-mod`](https://github.com/marijnh/style-mod#documentation)-style\n    /// set of CSS properties (which define the styling for those tags).\n    ///\n    /// The CSS rules created for a highlighter will be emitted in the\n    /// order of the spec's properties. That means that for elements that\n    /// have multiple tags associated with them, styles defined further\n    /// down in the list will have a higher CSS precedence than styles\n    /// defined earlier.\n    static define(specs, options) {\n        return new HighlightStyle(specs, options || {});\n    }\n    /// Returns the CSS classes (if any) that the highlight styles\n    /// active in the given state would assign to the given a style\n    /// [tag](#highlight.Tag) and (optional) language\n    /// [scope](#highlight.HighlightStyle^define^options.scope).\n    static get(state, tag, scope) {\n        return getHighlightStyle(state)(tag, scope || NodeType.none);\n    }\n}\n/// Given a string of code and a language, parse the code in that\n/// language and run the tree highlighter over the resulting syntax\n/// tree.\nfunction highlightTree(tree, \n/// Get the CSS classes used to style a given [tag](#highlight.Tag),\n/// or `null` if it isn't styled. (You'll often want to pass a\n/// highlight style's [`match`](#highlight.HighlightStyle.match)\n/// method here.)\ngetStyle, \n/// Assign styling to a region of the text. Will be called, in order\n/// of position, for any ranges where more than zero classes apply.\n/// `classes` is a space separated string of CSS classes.\nputStyle) {\n    highlightTreeRange(tree, 0, tree.length, getStyle, putStyle);\n}\nclass TreeHighlighter {\n    constructor(view) {\n        this.markCache = Object.create(null);\n        this.tree = syntaxTree(view.state);\n        this.decorations = this.buildDeco(view, getHighlightStyle(view.state));\n    }\n    update(update) {\n        let tree = syntaxTree(update.state), style = getHighlightStyle(update.state);\n        let styleChange = style != update.startState.facet(highlightStyle);\n        if (tree.length < update.view.viewport.to && !styleChange) {\n            this.decorations = this.decorations.map(update.changes);\n        }\n        else if (tree != this.tree || update.viewportChanged || styleChange) {\n            this.tree = tree;\n            this.decorations = this.buildDeco(update.view, style);\n        }\n    }\n    buildDeco(view, match) {\n        if (match == noHighlight || !this.tree.length)\n            return Decoration.none;\n        let builder = new RangeSetBuilder();\n        for (let { from, to } of view.visibleRanges) {\n            highlightTreeRange(this.tree, from, to, match, (from, to, style) => {\n                builder.add(from, to, this.markCache[style] || (this.markCache[style] = Decoration.mark({ class: style })));\n            });\n        }\n        return builder.finish();\n    }\n}\n// This extension installs a highlighter that highlights based on the\n// syntax tree and highlight style.\nconst treeHighlighter = Prec.fallback(ViewPlugin.fromClass(TreeHighlighter, {\n    decorations: v => v.decorations\n}));\nconst nodeStack = [\"\"];\nfunction highlightTreeRange(tree, from, to, style, span) {\n    let spanStart = from, spanClass = \"\";\n    let cursor = tree.topNode.cursor;\n    function node(inheritedClass, depth, scope) {\n        let { type, from: start, to: end } = cursor;\n        if (start >= to || end <= from)\n            return;\n        nodeStack[depth] = type.name;\n        if (type.isTop)\n            scope = type;\n        let cls = inheritedClass;\n        let rule = type.prop(ruleNodeProp), opaque = false;\n        while (rule) {\n            if (!rule.context || matchContext(rule.context, nodeStack, depth)) {\n                for (let tag of rule.tags) {\n                    let st = style(tag, scope);\n                    if (st) {\n                        if (cls)\n                            cls += \" \";\n                        cls += st;\n                        if (rule.mode == 1 /* Inherit */)\n                            inheritedClass += (inheritedClass ? \" \" : \"\") + st;\n                        else if (rule.mode == 0 /* Opaque */)\n                            opaque = true;\n                    }\n                }\n                break;\n            }\n            rule = rule.next;\n        }\n        if (cls != spanClass) {\n            if (start > spanStart && spanClass)\n                span(spanStart, cursor.from, spanClass);\n            spanStart = start;\n            spanClass = cls;\n        }\n        if (!opaque && cursor.firstChild()) {\n            do {\n                let end = cursor.to;\n                node(inheritedClass, depth + 1, scope);\n                if (spanClass != cls) {\n                    let pos = Math.min(to, end);\n                    if (pos > spanStart && spanClass)\n                        span(spanStart, pos, spanClass);\n                    spanStart = pos;\n                    spanClass = cls;\n                }\n            } while (cursor.nextSibling());\n            cursor.parent();\n        }\n    }\n    node(\"\", 0, tree.type);\n}\nfunction matchContext(context, stack, depth) {\n    if (context.length > depth - 1)\n        return false;\n    for (let d = depth - 1, i = context.length - 1; i >= 0; i--, d--) {\n        let check = context[i];\n        if (check && check != stack[d])\n            return false;\n    }\n    return true;\n}\nconst t = Tag.define;\nconst comment = t(), name = t(), typeName = t(name), literal = t(), string = t(literal), number = t(literal), content = t(), heading = t(content), keyword = t(), operator = t(), punctuation = t(), bracket = t(punctuation), meta = t();\n/// The default set of highlighting [tags](#highlight.Tag^define) used\n/// by regular language packages and themes.\n///\n/// This collection is heavily biased towards programming languages,\n/// and necessarily incomplete. A full ontology of syntactic\n/// constructs would fill a stack of books, and be impractical to\n/// write themes for. So try to make do with this set. If all else\n/// fails, [open an\n/// issue](https://github.com/codemirror/codemirror.next) to propose a\n/// new tag, or [define](#highlight.Tag^define) a local custom tag for\n/// your use case.\n///\n/// Note that it is not obligatory to always attach the most specific\n/// tag possible to an elementâ€”if your grammar can't easily\n/// distinguish a certain type of element (such as a local variable),\n/// it is okay to style it as its more general variant (a variable).\n/// \n/// For tags that extend some parent tag, the documentation links to\n/// the parent.\nconst tags = {\n    /// A comment.\n    comment,\n    /// A line [comment](#highlight.tags.comment).\n    lineComment: t(comment),\n    /// A block [comment](#highlight.tags.comment).\n    blockComment: t(comment),\n    /// A documentation [comment](#highlight.tags.comment).\n    docComment: t(comment),\n    /// Any kind of identifier.\n    name,\n    /// The [name](#highlight.tags.name) of a variable.\n    variableName: t(name),\n    /// A type [name](#highlight.tags.name).\n    typeName: typeName,\n    /// A tag name (subtag of [`typeName`](#highlight.tags.typeName)).\n    tagName: t(typeName),\n    /// A property, field, or attribute [name](#highlight.tags.name).\n    propertyName: t(name),\n    /// The [name](#highlight.tags.name) of a class.\n    className: t(name),\n    /// A label [name](#highlight.tags.name).\n    labelName: t(name),\n    /// A namespace [name](#highlight.tags.name).\n    namespace: t(name),\n    /// The [name](#highlight.tags.name) of a macro.\n    macroName: t(name),\n    /// A literal value.\n    literal,\n    /// A string [literal](#highlight.tags.literal).\n    string,\n    /// A documentation [string](#highlight.tags.string).\n    docString: t(string),\n    /// A character literal (subtag of [string](#highlight.tags.string)).\n    character: t(string),\n    /// A number [literal](#highlight.tags.literal).\n    number,\n    /// An integer [number](#highlight.tags.number) literal.\n    integer: t(number),\n    /// A floating-point [number](#highlight.tags.number) literal.\n    float: t(number),\n    /// A boolean [literal](#highlight.tags.literal).\n    bool: t(literal),\n    /// Regular expression [literal](#highlight.tags.literal).\n    regexp: t(literal),\n    /// An escape [literal](#highlight.tags.literal), for example a\n    /// backslash escape in a string.\n    escape: t(literal),\n    /// A color [literal](#highlight.tags.literal).\n    color: t(literal),\n    /// A URL [literal](#highlight.tags.literal).\n    url: t(literal),\n    /// A language keyword.\n    keyword,\n    /// The [keyword](#highlight.tags.keyword) for the self or this\n    /// object.\n    self: t(keyword),\n    /// The [keyword](#highlight.tags.keyword) for null.\n    null: t(keyword),\n    /// A [keyword](#highlight.tags.keyword) denoting some atomic value.\n    atom: t(keyword),\n    /// A [keyword](#highlight.tags.keyword) that represents a unit.\n    unit: t(keyword),\n    /// A modifier [keyword](#highlight.tags.keyword).\n    modifier: t(keyword),\n    /// A [keyword](#highlight.tags.keyword) that acts as an operator.\n    operatorKeyword: t(keyword),\n    /// A control-flow related [keyword](#highlight.tags.keyword).\n    controlKeyword: t(keyword),\n    /// A [keyword](#highlight.tags.keyword) that defines something.\n    definitionKeyword: t(keyword),\n    /// An operator.\n    operator,\n    /// An [operator](#highlight.tags.operator) that defines something.\n    derefOperator: t(operator),\n    /// Arithmetic-related [operator](#highlight.tags.operator).\n    arithmeticOperator: t(operator),\n    /// Logical [operator](#highlight.tags.operator).\n    logicOperator: t(operator),\n    /// Bit [operator](#highlight.tags.operator).\n    bitwiseOperator: t(operator),\n    /// Comparison [operator](#highlight.tags.operator).\n    compareOperator: t(operator),\n    /// [Operator](#highlight.tags.operator) that updates its operand.\n    updateOperator: t(operator),\n    /// [Operator](#highlight.tags.operator) that defines something.\n    definitionOperator: t(operator),\n    /// Type-related [operator](#highlight.tags.operator).\n    typeOperator: t(operator),\n    /// Control-flow [operator](#highlight.tags.operator).\n    controlOperator: t(operator),\n    /// Program or markup punctuation.\n    punctuation,\n    /// [Punctuation](#highlight.tags.punctuation) that separates\n    /// things.\n    separator: t(punctuation),\n    /// Bracket-style [punctuation](#highlight.tags.punctuation).\n    bracket,\n    /// Angle [brackets](#highlight.tags.bracket) (usually `<` and `>`\n    /// tokens).\n    angleBracket: t(bracket),\n    /// Square [brackets](#highlight.tags.bracket) (usually `[` and `]`\n    /// tokens).\n    squareBracket: t(bracket),\n    /// Parentheses (usually `(` and `)` tokens). Subtag of\n    /// [bracket](#highlight.tags.bracket).\n    paren: t(bracket),\n    /// Braces (usually `{` and `}` tokens). Subtag of\n    /// [bracket](#highlight.tags.bracket).\n    brace: t(bracket),\n    /// Content, for example plain text in XML or markup documents.\n    content,\n    /// [Content](#highlight.tags.content) that represents a heading.\n    heading,\n    /// A level 1 [heading](#highlight.tags.heading).\n    heading1: t(heading),\n    /// A level 2 [heading](#highlight.tags.heading).\n    heading2: t(heading),\n    /// A level 3 [heading](#highlight.tags.heading).\n    heading3: t(heading),\n    /// A level 4 [heading](#highlight.tags.heading).\n    heading4: t(heading),\n    /// A level 5 [heading](#highlight.tags.heading).\n    heading5: t(heading),\n    /// A level 6 [heading](#highlight.tags.heading).\n    heading6: t(heading),\n    /// A prose separator (such as a horizontal rule).\n    contentSeparator: t(content),\n    /// [Content](#highlight.tags.content) that represents a list.\n    list: t(content),\n    /// [Content](#highlight.tags.content) that represents a quote.\n    quote: t(content),\n    /// [Content](#highlight.tags.content) that is emphasized.\n    emphasis: t(content),\n    /// [Content](#highlight.tags.content) that is styled strong.\n    strong: t(content),\n    /// [Content](#highlight.tags.content) that is part of a link.\n    link: t(content),\n    /// [Content](#highlight.tags.content) that is styled as code or\n    /// monospace.\n    monospace: t(content),\n    /// Inserted text in a change-tracking format.\n    inserted: t(),\n    /// Deleted text.\n    deleted: t(),\n    /// Changed text.\n    changed: t(),\n    /// An invalid or unsyntactic element.\n    invalid: t(),\n    /// Metadata or meta-instruction.\n    meta,\n    /// [Metadata](#highlight.tags.meta) that applies to the entire\n    /// document.\n    documentMeta: t(meta),\n    /// [Metadata](#highlight.tags.meta) that annotates or adds\n    /// attributes to a given syntactic element.\n    annotation: t(meta),\n    /// Processing instruction or preprocessor directive. Subtag of\n    /// [meta](#highlight.tags.meta).\n    processingInstruction: t(meta),\n    /// [Modifier](#highlight.Tag^defineModifier) that indicates that a\n    /// given element is being defined. Expected to be used with the\n    /// various [name](#highlight.tags.name) tags.\n    definition: Tag.defineModifier(),\n    /// [Modifier](#highlight.Tag^defineModifier) that indicates that\n    /// something is constant. Mostly expected to be used with\n    /// [variable names](#highlight.tags.variableName).\n    constant: Tag.defineModifier(),\n    /// [Modifier](#highlight.Tag^defineModifier) used to indicate that\n    /// a [variable](#highlight.tags.variableName) or [property\n    /// name](#highlight.tags.propertyName) is being called or defined\n    /// as a function.\n    function: Tag.defineModifier(),\n    /// [Modifier](#highlight.Tag^defineModifier) that can be applied to\n    /// [names](#highlight.tags.name) to indicate that they belong to\n    /// the language's standard environment.\n    standard: Tag.defineModifier(),\n    /// [Modifier](#highlight.Tag^defineModifier) that indicates a given\n    /// [names](#highlight.tags.name) is local to some scope.\n    local: Tag.defineModifier(),\n    /// A generic variant [modifier](#highlight.Tag^defineModifier) that\n    /// can be used to tag language-specific alternative variants of\n    /// some common tag. It is recommended for themes to define special\n    /// forms of at least the [string](#highlight.tags.string) and\n    /// [variable name](#highlight.tags.variableName) tags, since those\n    /// come up a lot.\n    special: Tag.defineModifier()\n};\n/// A default highlight style (works well with light themes).\nconst defaultHighlightStyle = HighlightStyle.define([\n    { tag: tags.link,\n        textDecoration: \"underline\" },\n    { tag: tags.heading,\n        textDecoration: \"underline\",\n        fontWeight: \"bold\" },\n    { tag: tags.emphasis,\n        fontStyle: \"italic\" },\n    { tag: tags.strong,\n        fontWeight: \"bold\" },\n    { tag: tags.keyword,\n        color: \"#708\" },\n    { tag: [tags.atom, tags.bool, tags.url, tags.contentSeparator, tags.labelName],\n        color: \"#219\" },\n    { tag: [tags.literal, tags.inserted],\n        color: \"#164\" },\n    { tag: [tags.string, tags.deleted],\n        color: \"#a11\" },\n    { tag: [tags.regexp, tags.escape, tags.special(tags.string)],\n        color: \"#e40\" },\n    { tag: tags.definition(tags.variableName),\n        color: \"#00f\" },\n    { tag: tags.local(tags.variableName),\n        color: \"#30a\" },\n    { tag: [tags.typeName, tags.namespace],\n        color: \"#085\" },\n    { tag: tags.className,\n        color: \"#167\" },\n    { tag: [tags.special(tags.variableName), tags.macroName],\n        color: \"#256\" },\n    { tag: tags.definition(tags.propertyName),\n        color: \"#00c\" },\n    { tag: tags.comment,\n        color: \"#940\" },\n    { tag: tags.meta,\n        color: \"#7a757a\" },\n    { tag: tags.invalid,\n        color: \"#f00\" }\n]);\n/// This is a highlight style that adds stable, predictable classes to\n/// tokens, for styling with external CSS.\n///\n/// These tags are mapped to their name prefixed with `\"cmt-\"` (for\n/// example `\"cmt-comment\"`):\n///\n/// * [`link`](#highlight.tags.link)\n/// * [`heading`](#highlight.tags.heading)\n/// * [`emphasis`](#highlight.tags.emphasis)\n/// * [`strong`](#highlight.tags.strong)\n/// * [`keyword`](#highlight.tags.keyword)\n/// * [`atom`](#highlight.tags.atom) [`bool`](#highlight.tags.bool)\n/// * [`url`](#highlight.tags.url)\n/// * [`labelName`](#highlight.tags.labelName)\n/// * [`inserted`](#highlight.tags.inserted)\n/// * [`deleted`](#highlight.tags.deleted)\n/// * [`literal`](#highlight.tags.literal)\n/// * [`string`](#highlight.tags.string)\n/// * [`number`](#highlight.tags.number)\n/// * [`variableName`](#highlight.tags.variableName)\n/// * [`typeName`](#highlight.tags.typeName)\n/// * [`namespace`](#highlight.tags.namespace)\n/// * [`macroName`](#highlight.tags.macroName)\n/// * [`propertyName`](#highlight.tags.propertyName)\n/// * [`operator`](#highlight.tags.operator)\n/// * [`comment`](#highlight.tags.comment)\n/// * [`meta`](#highlight.tags.meta)\n/// * [`punctuation`](#highlight.tags.puncutation)\n/// * [`invalid`](#highlight.tags.invalid)\n///\n/// In addition, these mappings are provided:\n///\n/// * [`regexp`](#highlight.tags.regexp),\n///   [`escape`](#highlight.tags.escape), and\n///   [`special`](#highlight.tags.special)[`(string)`](#highlight.tags.string)\n///   are mapped to `\"cmt-string2\"`\n/// * [`special`](#highlight.tags.special)[`(variableName)`](#highlight.tags.variableName)\n///   to `\"cmt-variableName2\"`\n/// * [`local`](#highlight.tags.local)[`(variableName)`](#highlight.tags.variableName)\n///   to `\"cmt-variableName cmt-local\"`\n/// * [`definition`](#highlight.tags.definition)[`(variableName)`](#highlight.tags.variableName)\n///   to `\"cmt-variableName cmt-definition\"`\nconst classHighlightStyle = HighlightStyle.define([\n    { tag: tags.link, class: \"cmt-link\" },\n    { tag: tags.heading, class: \"cmt-heading\" },\n    { tag: tags.emphasis, class: \"cmt-emphasis\" },\n    { tag: tags.strong, class: \"cmt-strong\" },\n    { tag: tags.keyword, class: \"cmt-keyword\" },\n    { tag: tags.atom, class: \"cmt-atom\" },\n    { tag: tags.bool, class: \"cmt-bool\" },\n    { tag: tags.url, class: \"cmt-url\" },\n    { tag: tags.labelName, class: \"cmt-labelName\" },\n    { tag: tags.inserted, class: \"cmt-inserted\" },\n    { tag: tags.deleted, class: \"cmt-deleted\" },\n    { tag: tags.literal, class: \"cmt-literal\" },\n    { tag: tags.string, class: \"cmt-string\" },\n    { tag: tags.number, class: \"cmt-number\" },\n    { tag: [tags.regexp, tags.escape, tags.special(tags.string)], class: \"cmt-string2\" },\n    { tag: tags.variableName, class: \"cmt-variableName\" },\n    { tag: tags.local(tags.variableName), class: \"cmt-variableName cmt-local\" },\n    { tag: tags.definition(tags.variableName), class: \"cmt-variableName cmt-definition\" },\n    { tag: tags.special(tags.variableName), class: \"cmt-variableName2\" },\n    { tag: tags.typeName, class: \"cmt-typeName\" },\n    { tag: tags.namespace, class: \"cmt-namespace\" },\n    { tag: tags.macroName, class: \"cmt-macroName\" },\n    { tag: tags.propertyName, class: \"cmt-propertyName\" },\n    { tag: tags.operator, class: \"cmt-operator\" },\n    { tag: tags.comment, class: \"cmt-comment\" },\n    { tag: tags.meta, class: \"cmt-meta\" },\n    { tag: tags.invalid, class: \"cmt-invalid\" },\n    { tag: tags.punctuation, class: \"cmt-punctuation\" }\n]);\n\nexport { HighlightStyle, Tag, classHighlightStyle, defaultHighlightStyle, highlightTree, styleTags, tags };\n"]},"metadata":{},"sourceType":"module"}