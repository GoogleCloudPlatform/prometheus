{"ast":null,"code":"import _slicedToArray from\"/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{Fragment}from'react';import{Table}from'reactstrap';import{withStatusIndicator}from'../../components/withStatusIndicator';import{useFetch}from'../../hooks/useFetch';import{usePathPrefix}from'../../contexts/PathPrefixContext';import{API_PATH}from'../../constants/constants';export var statusConfig={startTime:{title:'Start time',customizeValue:function customizeValue(v){return new Date(v).toUTCString();}},CWD:{title:'Working directory'},reloadConfigSuccess:{title:'Configuration reload',customizeValue:function customizeValue(v){return v?'Successful':'Unsuccessful';}},lastConfigTime:{title:'Last successful configuration reload'},corruptionCount:{title:'WAL corruptions'},goroutineCount:{title:'Goroutines'},storageRetention:{title:'Storage retention'},activeAlertmanagers:{customRow:true,customizeValue:function customizeValue(alertMgrs,key){return/*#__PURE__*/React.createElement(Fragment,{key:key},/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"th\",null,\"Endpoint\")),alertMgrs.map(function(_ref){var url=_ref.url;var _URL=new URL(url),origin=_URL.origin,pathname=_URL.pathname;return/*#__PURE__*/React.createElement(\"tr\",{key:url},/*#__PURE__*/React.createElement(\"td\",null,/*#__PURE__*/React.createElement(\"a\",{href:url},origin),pathname));}));}},droppedAlertmanagers:{skip:true}};export var StatusContent=function StatusContent(_ref2){var data=_ref2.data,title=_ref2.title;return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"h2\",null,title),/*#__PURE__*/React.createElement(Table,{className:\"h-auto\",size:\"sm\",bordered:true,striped:true},/*#__PURE__*/React.createElement(\"tbody\",null,Object.entries(data).map(function(_ref3){var _ref4=_slicedToArray(_ref3,2),k=_ref4[0],v=_ref4[1];var _ref5=statusConfig[k]||{},_ref5$title=_ref5.title,title=_ref5$title===void 0?k:_ref5$title,_ref5$customizeValue=_ref5.customizeValue,customizeValue=_ref5$customizeValue===void 0?function(val){return val;}:_ref5$customizeValue,customRow=_ref5.customRow,skip=_ref5.skip;if(skip){return null;}if(customRow){return customizeValue(v,k);}return/*#__PURE__*/React.createElement(\"tr\",{key:k},/*#__PURE__*/React.createElement(\"th\",{className:\"capitalize-title\",style:{width:'35%'}},title),/*#__PURE__*/React.createElement(\"td\",{className:\"text-break\"},customizeValue(v,title)));}))));};var StatusWithStatusIndicator=withStatusIndicator(StatusContent);StatusContent.displayName='Status';var Status=function Status(){var pathPrefix=usePathPrefix();var path=\"\".concat(pathPrefix,\"/\").concat(API_PATH);return/*#__PURE__*/React.createElement(React.Fragment,null,[{fetchResult:useFetch(\"\".concat(path,\"/status/runtimeinfo\")),title:'Runtime Information'},{fetchResult:useFetch(\"\".concat(path,\"/status/buildinfo\")),title:'Build Information'},{fetchResult:useFetch(\"\".concat(path,\"/alertmanagers\")),title:'Alertmanagers'}].map(function(_ref6){var fetchResult=_ref6.fetchResult,title=_ref6.title;var response=fetchResult.response,isLoading=fetchResult.isLoading,error=fetchResult.error;return/*#__PURE__*/React.createElement(StatusWithStatusIndicator,{key:title,data:response.data,title:title,isLoading:isLoading,error:error,componentTitle:title});}));};export default Status;","map":{"version":3,"sources":["/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/src/pages/status/Status.tsx"],"names":["React","Fragment","Table","withStatusIndicator","useFetch","usePathPrefix","API_PATH","statusConfig","startTime","title","customizeValue","v","Date","toUTCString","CWD","reloadConfigSuccess","lastConfigTime","corruptionCount","goroutineCount","storageRetention","activeAlertmanagers","customRow","alertMgrs","key","map","url","URL","origin","pathname","droppedAlertmanagers","skip","StatusContent","data","Object","entries","k","val","width","StatusWithStatusIndicator","displayName","Status","pathPrefix","path","fetchResult","response","isLoading","error"],"mappings":"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","sourcesContent":["import React, { Fragment, FC } from 'react';\nimport { RouteComponentProps } from '@reach/router';\nimport { Table } from 'reactstrap';\nimport { withStatusIndicator } from '../../components/withStatusIndicator';\nimport { useFetch } from '../../hooks/useFetch';\nimport { usePathPrefix } from '../../contexts/PathPrefixContext';\nimport { API_PATH } from '../../constants/constants';\n\ninterface StatusPageProps {\n  data: Record<string, string>;\n  title: string;\n}\n\nexport const statusConfig: Record<\n  string,\n  { title?: string; customizeValue?: (v: any, key: string) => any; customRow?: boolean; skip?: boolean }\n> = {\n  startTime: { title: 'Start time', customizeValue: (v: string) => new Date(v).toUTCString() },\n  CWD: { title: 'Working directory' },\n  reloadConfigSuccess: {\n    title: 'Configuration reload',\n    customizeValue: (v: boolean) => (v ? 'Successful' : 'Unsuccessful'),\n  },\n  lastConfigTime: { title: 'Last successful configuration reload' },\n  corruptionCount: { title: 'WAL corruptions' },\n  goroutineCount: { title: 'Goroutines' },\n  storageRetention: { title: 'Storage retention' },\n  activeAlertmanagers: {\n    customRow: true,\n    customizeValue: (alertMgrs: { url: string }[], key) => {\n      return (\n        <Fragment key={key}>\n          <tr>\n            <th>Endpoint</th>\n          </tr>\n          {alertMgrs.map(({ url }) => {\n            const { origin, pathname } = new URL(url);\n            return (\n              <tr key={url}>\n                <td>\n                  <a href={url}>{origin}</a>\n                  {pathname}\n                </td>\n              </tr>\n            );\n          })}\n        </Fragment>\n      );\n    },\n  },\n  droppedAlertmanagers: { skip: true },\n};\n\nexport const StatusContent: FC<StatusPageProps> = ({ data, title }) => {\n  return (\n    <>\n      <h2>{title}</h2>\n      <Table className=\"h-auto\" size=\"sm\" bordered striped>\n        <tbody>\n          {Object.entries(data).map(([k, v]) => {\n            const { title = k, customizeValue = (val: any) => val, customRow, skip } = statusConfig[k] || {};\n            if (skip) {\n              return null;\n            }\n            if (customRow) {\n              return customizeValue(v, k);\n            }\n            return (\n              <tr key={k}>\n                <th className=\"capitalize-title\" style={{ width: '35%' }}>\n                  {title}\n                </th>\n                <td className=\"text-break\">{customizeValue(v, title)}</td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </Table>\n    </>\n  );\n};\nconst StatusWithStatusIndicator = withStatusIndicator(StatusContent);\n\nStatusContent.displayName = 'Status';\n\nconst Status: FC<RouteComponentProps> = () => {\n  const pathPrefix = usePathPrefix();\n  const path = `${pathPrefix}/${API_PATH}`;\n\n  return (\n    <>\n      {[\n        { fetchResult: useFetch<Record<string, string>>(`${path}/status/runtimeinfo`), title: 'Runtime Information' },\n        { fetchResult: useFetch<Record<string, string>>(`${path}/status/buildinfo`), title: 'Build Information' },\n        { fetchResult: useFetch<Record<string, string>>(`${path}/alertmanagers`), title: 'Alertmanagers' },\n      ].map(({ fetchResult, title }) => {\n        const { response, isLoading, error } = fetchResult;\n        return (\n          <StatusWithStatusIndicator\n            key={title}\n            data={response.data}\n            title={title}\n            isLoading={isLoading}\n            error={error}\n            componentTitle={title}\n          />\n        );\n      })}\n    </>\n  );\n};\n\nexport default Status;\n"]},"metadata":{},"sourceType":"module"}