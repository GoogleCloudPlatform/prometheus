{"ast":null,"code":"'use strict';\n\nvar _createForOfIteratorHelper = require(\"/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar Container = require('./container');\n\nvar LazyResult, Processor;\n\nvar Root = /*#__PURE__*/function (_Container) {\n  _inherits(Root, _Container);\n\n  var _super = _createSuper(Root);\n\n  function Root(defaults) {\n    var _this;\n\n    _classCallCheck(this, Root);\n\n    _this = _super.call(this, defaults);\n    _this.type = 'root';\n    if (!_this.nodes) _this.nodes = [];\n    return _this;\n  }\n\n  _createClass(Root, [{\n    key: \"removeChild\",\n    value: function removeChild(child, ignore) {\n      var index = this.index(child);\n\n      if (!ignore && index === 0 && this.nodes.length > 1) {\n        this.nodes[1].raws.before = this.nodes[index].raws.before;\n      }\n\n      return _get(_getPrototypeOf(Root.prototype), \"removeChild\", this).call(this, child);\n    }\n  }, {\n    key: \"normalize\",\n    value: function normalize(child, sample, type) {\n      var nodes = _get(_getPrototypeOf(Root.prototype), \"normalize\", this).call(this, child);\n\n      if (sample) {\n        if (type === 'prepend') {\n          if (this.nodes.length > 1) {\n            sample.raws.before = this.nodes[1].raws.before;\n          } else {\n            delete sample.raws.before;\n          }\n        } else if (this.first !== sample) {\n          var _iterator = _createForOfIteratorHelper(nodes),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var node = _step.value;\n              node.raws.before = sample.raws.before;\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n        }\n      }\n\n      return nodes;\n    }\n  }, {\n    key: \"toResult\",\n    value: function toResult() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var lazy = new LazyResult(new Processor(), this, opts);\n      return lazy.stringify();\n    }\n  }]);\n\n  return Root;\n}(Container);\n\nRoot.registerLazyResult = function (dependant) {\n  LazyResult = dependant;\n};\n\nRoot.registerProcessor = function (dependant) {\n  Processor = dependant;\n};\n\nmodule.exports = Root;\nRoot.default = Root;","map":{"version":3,"sources":["/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/sanitize-html/node_modules/postcss/lib/root.js"],"names":["Container","require","LazyResult","Processor","Root","defaults","type","nodes","child","ignore","index","length","raws","before","sample","first","node","opts","lazy","stringify","registerLazyResult","dependant","registerProcessor","module","exports","default"],"mappings":"AAAA;;;;;;;;;;;;;;;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAvB;;AAEA,IAAIC,UAAJ,EAAgBC,SAAhB;;IAEMC,I;;;;;AACJ,gBAAYC,QAAZ,EAAsB;AAAA;;AAAA;;AACpB,8BAAMA,QAAN;AACA,UAAKC,IAAL,GAAY,MAAZ;AACA,QAAI,CAAC,MAAKC,KAAV,EAAiB,MAAKA,KAAL,GAAa,EAAb;AAHG;AAIrB;;;;WAED,qBAAYC,KAAZ,EAAmBC,MAAnB,EAA2B;AACzB,UAAIC,KAAK,GAAG,KAAKA,KAAL,CAAWF,KAAX,CAAZ;;AAEA,UAAI,CAACC,MAAD,IAAWC,KAAK,KAAK,CAArB,IAA0B,KAAKH,KAAL,CAAWI,MAAX,GAAoB,CAAlD,EAAqD;AACnD,aAAKJ,KAAL,CAAW,CAAX,EAAcK,IAAd,CAAmBC,MAAnB,GAA4B,KAAKN,KAAL,CAAWG,KAAX,EAAkBE,IAAlB,CAAuBC,MAAnD;AACD;;AAED,mFAAyBL,KAAzB;AACD;;;WAED,mBAAUA,KAAV,EAAiBM,MAAjB,EAAyBR,IAAzB,EAA+B;AAC7B,UAAIC,KAAK,uEAAmBC,KAAnB,CAAT;;AAEA,UAAIM,MAAJ,EAAY;AACV,YAAIR,IAAI,KAAK,SAAb,EAAwB;AACtB,cAAI,KAAKC,KAAL,CAAWI,MAAX,GAAoB,CAAxB,EAA2B;AACzBG,YAAAA,MAAM,CAACF,IAAP,CAAYC,MAAZ,GAAqB,KAAKN,KAAL,CAAW,CAAX,EAAcK,IAAd,CAAmBC,MAAxC;AACD,WAFD,MAEO;AACL,mBAAOC,MAAM,CAACF,IAAP,CAAYC,MAAnB;AACD;AACF,SAND,MAMO,IAAI,KAAKE,KAAL,KAAeD,MAAnB,EAA2B;AAAA,qDACfP,KADe;AAAA;;AAAA;AAChC,gEAAwB;AAAA,kBAAfS,IAAe;AACtBA,cAAAA,IAAI,CAACJ,IAAL,CAAUC,MAAV,GAAmBC,MAAM,CAACF,IAAP,CAAYC,MAA/B;AACD;AAH+B;AAAA;AAAA;AAAA;AAAA;AAIjC;AACF;;AAED,aAAON,KAAP;AACD;;;WAED,oBAAoB;AAAA,UAAXU,IAAW,uEAAJ,EAAI;AAClB,UAAIC,IAAI,GAAG,IAAIhB,UAAJ,CAAe,IAAIC,SAAJ,EAAf,EAAgC,IAAhC,EAAsCc,IAAtC,CAAX;AACA,aAAOC,IAAI,CAACC,SAAL,EAAP;AACD;;;;EAxCgBnB,S;;AA2CnBI,IAAI,CAACgB,kBAAL,GAA0B,UAAAC,SAAS,EAAI;AACrCnB,EAAAA,UAAU,GAAGmB,SAAb;AACD,CAFD;;AAIAjB,IAAI,CAACkB,iBAAL,GAAyB,UAAAD,SAAS,EAAI;AACpClB,EAAAA,SAAS,GAAGkB,SAAZ;AACD,CAFD;;AAIAE,MAAM,CAACC,OAAP,GAAiBpB,IAAjB;AACAA,IAAI,CAACqB,OAAL,GAAerB,IAAf","sourcesContent":["'use strict'\n\nlet Container = require('./container')\n\nlet LazyResult, Processor\n\nclass Root extends Container {\n  constructor(defaults) {\n    super(defaults)\n    this.type = 'root'\n    if (!this.nodes) this.nodes = []\n  }\n\n  removeChild(child, ignore) {\n    let index = this.index(child)\n\n    if (!ignore && index === 0 && this.nodes.length > 1) {\n      this.nodes[1].raws.before = this.nodes[index].raws.before\n    }\n\n    return super.removeChild(child)\n  }\n\n  normalize(child, sample, type) {\n    let nodes = super.normalize(child)\n\n    if (sample) {\n      if (type === 'prepend') {\n        if (this.nodes.length > 1) {\n          sample.raws.before = this.nodes[1].raws.before\n        } else {\n          delete sample.raws.before\n        }\n      } else if (this.first !== sample) {\n        for (let node of nodes) {\n          node.raws.before = sample.raws.before\n        }\n      }\n    }\n\n    return nodes\n  }\n\n  toResult(opts = {}) {\n    let lazy = new LazyResult(new Processor(), this, opts)\n    return lazy.stringify()\n  }\n}\n\nRoot.registerLazyResult = dependant => {\n  LazyResult = dependant\n}\n\nRoot.registerProcessor = dependant => {\n  Processor = dependant\n}\n\nmodule.exports = Root\nRoot.default = Root\n"]},"metadata":{},"sourceType":"script"}