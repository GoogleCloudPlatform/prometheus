{"ast":null,"code":"import _slicedToArray from \"/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _createForOfIteratorHelper from \"/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n// The MIT License (MIT)\n//\n// Copyright (c) 2020 The Prometheus Authors\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\nimport { labelMatchersToString } from '../parser';\nimport LRUCache from 'lru-cache';\nvar apiPrefix = '/api/v1';\nvar labelsEndpoint = apiPrefix + '/labels';\nvar labelValuesEndpoint = apiPrefix + '/label/:name/values';\nvar seriesEndpoint = apiPrefix + '/series';\nvar metricMetadataEndpoint = apiPrefix + '/metadata'; // These are status codes where the Prometheus API still returns a valid JSON body,\n// with an error encoded within the JSON.\n\nvar badRequest = 400;\nvar unprocessableEntity = 422;\nvar serviceUnavailable = 503; // HTTPPrometheusClient is the HTTP client that should be used to get some information from the different endpoint provided by prometheus.\n\nexport var HTTPPrometheusClient = /*#__PURE__*/function () {\n  function HTTPPrometheusClient(config) {\n    _classCallCheck(this, HTTPPrometheusClient);\n\n    this.lookbackInterval = 60 * 60 * 1000 * 12; //12 hours\n    // For some reason, just assigning via \"= fetch\" here does not end up executing fetch correctly\n    // when calling it, thus the indirection via another function wrapper.\n\n    this.fetchFn = function (input, init) {\n      return fetch(input, init);\n    };\n\n    this.url = config.url;\n    this.errorHandler = config.httpErrorHandler;\n\n    if (config.lookbackInterval) {\n      this.lookbackInterval = config.lookbackInterval;\n    }\n\n    if (config.fetchFn) {\n      this.fetchFn = config.fetchFn;\n    }\n  }\n\n  _createClass(HTTPPrometheusClient, [{\n    key: \"labelNames\",\n    value: function labelNames(metricName) {\n      var _this = this;\n\n      var end = new Date();\n      var start = new Date(end.getTime() - this.lookbackInterval);\n\n      if (metricName === undefined || metricName === '') {\n        var params = new URLSearchParams({\n          start: start.toISOString(),\n          end: end.toISOString()\n        }); // See https://prometheus.io/docs/prometheus/latest/querying/api/#getting-label-names\n\n        return this.fetchAPI(\"\".concat(labelsEndpoint, \"?\").concat(params)).catch(function (error) {\n          if (_this.errorHandler) {\n            _this.errorHandler(error);\n          }\n\n          return [];\n        });\n      }\n\n      return this.series(metricName).then(function (series) {\n        var labelNames = new Set();\n\n        var _iterator = _createForOfIteratorHelper(series),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var labelSet = _step.value;\n\n            for (var _i = 0, _Object$entries = Object.entries(labelSet); _i < _Object$entries.length; _i++) {\n              var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 1),\n                  key = _Object$entries$_i[0];\n\n              if (key === '__name__') {\n                continue;\n              }\n\n              labelNames.add(key);\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        return Array.from(labelNames);\n      });\n    } // labelValues return a list of the value associated to the given labelName.\n    // In case a metric is provided, then the list of values is then associated to the couple <MetricName, LabelName>\n\n  }, {\n    key: \"labelValues\",\n    value: function labelValues(labelName, metricName, matchers) {\n      var _this2 = this;\n\n      var end = new Date();\n      var start = new Date(end.getTime() - this.lookbackInterval);\n\n      if (!metricName || metricName.length === 0) {\n        var params = new URLSearchParams({\n          start: start.toISOString(),\n          end: end.toISOString()\n        }); // See https://prometheus.io/docs/prometheus/latest/querying/api/#querying-label-values\n\n        return this.fetchAPI(\"\".concat(labelValuesEndpoint.replace(/:name/gi, labelName), \"?\").concat(params)).catch(function (error) {\n          if (_this2.errorHandler) {\n            _this2.errorHandler(error);\n          }\n\n          return [];\n        });\n      }\n\n      return this.series(metricName, matchers, labelName).then(function (series) {\n        var labelValues = new Set();\n\n        var _iterator2 = _createForOfIteratorHelper(series),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var labelSet = _step2.value;\n\n            for (var _i2 = 0, _Object$entries2 = Object.entries(labelSet); _i2 < _Object$entries2.length; _i2++) {\n              var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i2], 2),\n                  key = _Object$entries2$_i[0],\n                  value = _Object$entries2$_i[1];\n\n              if (key === '__name__') {\n                continue;\n              }\n\n              if (key === labelName) {\n                labelValues.add(value);\n              }\n            }\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n\n        return Array.from(labelValues);\n      });\n    }\n  }, {\n    key: \"metricMetadata\",\n    value: function metricMetadata() {\n      var _this3 = this;\n\n      return this.fetchAPI(metricMetadataEndpoint).catch(function (error) {\n        if (_this3.errorHandler) {\n          _this3.errorHandler(error);\n        }\n\n        return {};\n      });\n    }\n  }, {\n    key: \"series\",\n    value: function series(metricName, matchers, labelName) {\n      var _this4 = this;\n\n      var end = new Date();\n      var start = new Date(end.getTime() - this.lookbackInterval);\n      var params = new URLSearchParams({\n        start: start.toISOString(),\n        end: end.toISOString(),\n        'match[]': labelMatchersToString(metricName, matchers, labelName)\n      }); // See https://prometheus.io/docs/prometheus/latest/querying/api/#finding-series-by-label-matchers\n\n      return this.fetchAPI(\"\".concat(seriesEndpoint, \"?\").concat(params)).catch(function (error) {\n        if (_this4.errorHandler) {\n          _this4.errorHandler(error);\n        }\n\n        return [];\n      });\n    }\n  }, {\n    key: \"metricNames\",\n    value: function metricNames() {\n      return this.labelValues('__name__');\n    }\n  }, {\n    key: \"fetchAPI\",\n    value: function fetchAPI(resource) {\n      return this.fetchFn(this.url + resource).then(function (res) {\n        if (!res.ok && ![badRequest, unprocessableEntity, serviceUnavailable].includes(res.status)) {\n          throw new Error(res.statusText);\n        }\n\n        return res;\n      }).then(function (res) {\n        return res.json();\n      }).then(function (apiRes) {\n        if (apiRes.status === 'error') {\n          throw new Error(apiRes.error !== undefined ? apiRes.error : 'missing \"error\" field in response JSON');\n        }\n\n        if (apiRes.data === undefined) {\n          throw new Error('missing \"data\" field in response JSON');\n        }\n\n        return apiRes.data;\n      });\n    }\n  }]);\n\n  return HTTPPrometheusClient;\n}();\n\nvar Cache = /*#__PURE__*/function () {\n  function Cache(config) {\n    _classCallCheck(this, Cache);\n\n    var maxAge = config && config.maxAge ? config.maxAge : 5 * 60 * 1000;\n    this.completeAssociation = new LRUCache(maxAge);\n    this.metricMetadata = {};\n    this.labelValues = new LRUCache(maxAge);\n    this.labelNames = [];\n\n    if (config === null || config === void 0 ? void 0 : config.initialMetricList) {\n      this.setLabelValues('__name__', config.initialMetricList);\n    }\n  }\n\n  _createClass(Cache, [{\n    key: \"setAssociations\",\n    value: function setAssociations(metricName, series) {\n      var _this5 = this;\n\n      series.forEach(function (labelSet) {\n        var currentAssociation = _this5.completeAssociation.get(metricName);\n\n        if (!currentAssociation) {\n          currentAssociation = new Map();\n\n          _this5.completeAssociation.set(metricName, currentAssociation);\n        }\n\n        for (var _i3 = 0, _Object$entries3 = Object.entries(labelSet); _i3 < _Object$entries3.length; _i3++) {\n          var _Object$entries3$_i = _slicedToArray(_Object$entries3[_i3], 2),\n              key = _Object$entries3$_i[0],\n              value = _Object$entries3$_i[1];\n\n          if (key === '__name__') {\n            continue;\n          }\n\n          var labelValues = currentAssociation.get(key);\n\n          if (labelValues === undefined) {\n            currentAssociation.set(key, new Set([value]));\n          } else {\n            labelValues.add(value);\n          }\n        }\n      });\n    }\n  }, {\n    key: \"setMetricMetadata\",\n    value: function setMetricMetadata(metadata) {\n      this.metricMetadata = metadata;\n    }\n  }, {\n    key: \"getMetricMetadata\",\n    value: function getMetricMetadata() {\n      return this.metricMetadata;\n    }\n  }, {\n    key: \"setLabelNames\",\n    value: function setLabelNames(labelNames) {\n      this.labelNames = labelNames;\n    }\n  }, {\n    key: \"getLabelNames\",\n    value: function getLabelNames(metricName) {\n      if (!metricName || metricName.length === 0) {\n        return this.labelNames;\n      }\n\n      var labelSet = this.completeAssociation.get(metricName);\n      return labelSet ? Array.from(labelSet.keys()) : [];\n    }\n  }, {\n    key: \"setLabelValues\",\n    value: function setLabelValues(labelName, labelValues) {\n      this.labelValues.set(labelName, labelValues);\n    }\n  }, {\n    key: \"getLabelValues\",\n    value: function getLabelValues(labelName, metricName) {\n      if (!metricName || metricName.length === 0) {\n        var result = this.labelValues.get(labelName);\n        return result ? result : [];\n      }\n\n      var labelSet = this.completeAssociation.get(metricName);\n\n      if (labelSet) {\n        var labelValues = labelSet.get(labelName);\n        return labelValues ? Array.from(labelValues) : [];\n      }\n\n      return [];\n    }\n  }]);\n\n  return Cache;\n}();\n\nexport var CachedPrometheusClient = /*#__PURE__*/function () {\n  function CachedPrometheusClient(client, config) {\n    _classCallCheck(this, CachedPrometheusClient);\n\n    this.client = client;\n    this.cache = new Cache(config);\n  }\n\n  _createClass(CachedPrometheusClient, [{\n    key: \"labelNames\",\n    value: function labelNames(metricName) {\n      var _this6 = this;\n\n      var cachedLabel = this.cache.getLabelNames(metricName);\n\n      if (cachedLabel && cachedLabel.length > 0) {\n        return Promise.resolve(cachedLabel);\n      }\n\n      if (metricName === undefined || metricName === '') {\n        return this.client.labelNames().then(function (labelNames) {\n          _this6.cache.setLabelNames(labelNames);\n\n          return labelNames;\n        });\n      }\n\n      return this.series(metricName).then(function () {\n        return _this6.cache.getLabelNames(metricName);\n      });\n    }\n  }, {\n    key: \"labelValues\",\n    value: function labelValues(labelName, metricName) {\n      var _this7 = this;\n\n      var cachedLabel = this.cache.getLabelValues(labelName, metricName);\n\n      if (cachedLabel && cachedLabel.length > 0) {\n        return Promise.resolve(cachedLabel);\n      }\n\n      if (metricName === undefined || metricName === '') {\n        return this.client.labelValues(labelName).then(function (labelValues) {\n          _this7.cache.setLabelValues(labelName, labelValues);\n\n          return labelValues;\n        });\n      }\n\n      return this.series(metricName).then(function () {\n        return _this7.cache.getLabelValues(labelName, metricName);\n      });\n    }\n  }, {\n    key: \"metricMetadata\",\n    value: function metricMetadata() {\n      var _this8 = this;\n\n      var cachedMetadata = this.cache.getMetricMetadata();\n\n      if (cachedMetadata && Object.keys(cachedMetadata).length > 0) {\n        return Promise.resolve(cachedMetadata);\n      }\n\n      return this.client.metricMetadata().then(function (metadata) {\n        _this8.cache.setMetricMetadata(metadata);\n\n        return _this8.cache.getMetricMetadata();\n      });\n    }\n  }, {\n    key: \"series\",\n    value: function series(metricName) {\n      var _this9 = this;\n\n      return this.client.series(metricName).then(function (series) {\n        _this9.cache.setAssociations(metricName, series);\n\n        return series;\n      });\n    }\n  }, {\n    key: \"metricNames\",\n    value: function metricNames() {\n      return this.labelValues('__name__');\n    }\n  }]);\n\n  return CachedPrometheusClient;\n}();","map":{"version":3,"sources":["../../../src/lang-promql/client/prometheus.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["// The MIT License (MIT)\n//\n// Copyright (c) 2020 The Prometheus Authors\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\nimport { labelMatchersToString } from '../parser';\nimport LRUCache from 'lru-cache';\nconst apiPrefix = '/api/v1';\nconst labelsEndpoint = apiPrefix + '/labels';\nconst labelValuesEndpoint = apiPrefix + '/label/:name/values';\nconst seriesEndpoint = apiPrefix + '/series';\nconst metricMetadataEndpoint = apiPrefix + '/metadata';\n// These are status codes where the Prometheus API still returns a valid JSON body,\n// with an error encoded within the JSON.\nconst badRequest = 400;\nconst unprocessableEntity = 422;\nconst serviceUnavailable = 503;\n// HTTPPrometheusClient is the HTTP client that should be used to get some information from the different endpoint provided by prometheus.\nexport class HTTPPrometheusClient {\n    constructor(config) {\n        this.lookbackInterval = 60 * 60 * 1000 * 12; //12 hours\n        // For some reason, just assigning via \"= fetch\" here does not end up executing fetch correctly\n        // when calling it, thus the indirection via another function wrapper.\n        this.fetchFn = (input, init) => fetch(input, init);\n        this.url = config.url;\n        this.errorHandler = config.httpErrorHandler;\n        if (config.lookbackInterval) {\n            this.lookbackInterval = config.lookbackInterval;\n        }\n        if (config.fetchFn) {\n            this.fetchFn = config.fetchFn;\n        }\n    }\n    labelNames(metricName) {\n        const end = new Date();\n        const start = new Date(end.getTime() - this.lookbackInterval);\n        if (metricName === undefined || metricName === '') {\n            const params = new URLSearchParams({\n                start: start.toISOString(),\n                end: end.toISOString(),\n            });\n            // See https://prometheus.io/docs/prometheus/latest/querying/api/#getting-label-names\n            return this.fetchAPI(`${labelsEndpoint}?${params}`).catch((error) => {\n                if (this.errorHandler) {\n                    this.errorHandler(error);\n                }\n                return [];\n            });\n        }\n        return this.series(metricName).then((series) => {\n            const labelNames = new Set();\n            for (const labelSet of series) {\n                for (const [key] of Object.entries(labelSet)) {\n                    if (key === '__name__') {\n                        continue;\n                    }\n                    labelNames.add(key);\n                }\n            }\n            return Array.from(labelNames);\n        });\n    }\n    // labelValues return a list of the value associated to the given labelName.\n    // In case a metric is provided, then the list of values is then associated to the couple <MetricName, LabelName>\n    labelValues(labelName, metricName, matchers) {\n        const end = new Date();\n        const start = new Date(end.getTime() - this.lookbackInterval);\n        if (!metricName || metricName.length === 0) {\n            const params = new URLSearchParams({\n                start: start.toISOString(),\n                end: end.toISOString(),\n            });\n            // See https://prometheus.io/docs/prometheus/latest/querying/api/#querying-label-values\n            return this.fetchAPI(`${labelValuesEndpoint.replace(/:name/gi, labelName)}?${params}`).catch((error) => {\n                if (this.errorHandler) {\n                    this.errorHandler(error);\n                }\n                return [];\n            });\n        }\n        return this.series(metricName, matchers, labelName).then((series) => {\n            const labelValues = new Set();\n            for (const labelSet of series) {\n                for (const [key, value] of Object.entries(labelSet)) {\n                    if (key === '__name__') {\n                        continue;\n                    }\n                    if (key === labelName) {\n                        labelValues.add(value);\n                    }\n                }\n            }\n            return Array.from(labelValues);\n        });\n    }\n    metricMetadata() {\n        return this.fetchAPI(metricMetadataEndpoint).catch((error) => {\n            if (this.errorHandler) {\n                this.errorHandler(error);\n            }\n            return {};\n        });\n    }\n    series(metricName, matchers, labelName) {\n        const end = new Date();\n        const start = new Date(end.getTime() - this.lookbackInterval);\n        const params = new URLSearchParams({\n            start: start.toISOString(),\n            end: end.toISOString(),\n            'match[]': labelMatchersToString(metricName, matchers, labelName),\n        });\n        // See https://prometheus.io/docs/prometheus/latest/querying/api/#finding-series-by-label-matchers\n        return this.fetchAPI(`${seriesEndpoint}?${params}`).catch((error) => {\n            if (this.errorHandler) {\n                this.errorHandler(error);\n            }\n            return [];\n        });\n    }\n    metricNames() {\n        return this.labelValues('__name__');\n    }\n    fetchAPI(resource) {\n        return this.fetchFn(this.url + resource)\n            .then((res) => {\n            if (!res.ok && ![badRequest, unprocessableEntity, serviceUnavailable].includes(res.status)) {\n                throw new Error(res.statusText);\n            }\n            return res;\n        })\n            .then((res) => res.json())\n            .then((apiRes) => {\n            if (apiRes.status === 'error') {\n                throw new Error(apiRes.error !== undefined ? apiRes.error : 'missing \"error\" field in response JSON');\n            }\n            if (apiRes.data === undefined) {\n                throw new Error('missing \"data\" field in response JSON');\n            }\n            return apiRes.data;\n        });\n    }\n}\nclass Cache {\n    constructor(config) {\n        const maxAge = config && config.maxAge ? config.maxAge : 5 * 60 * 1000;\n        this.completeAssociation = new LRUCache(maxAge);\n        this.metricMetadata = {};\n        this.labelValues = new LRUCache(maxAge);\n        this.labelNames = [];\n        if (config === null || config === void 0 ? void 0 : config.initialMetricList) {\n            this.setLabelValues('__name__', config.initialMetricList);\n        }\n    }\n    setAssociations(metricName, series) {\n        series.forEach((labelSet) => {\n            let currentAssociation = this.completeAssociation.get(metricName);\n            if (!currentAssociation) {\n                currentAssociation = new Map();\n                this.completeAssociation.set(metricName, currentAssociation);\n            }\n            for (const [key, value] of Object.entries(labelSet)) {\n                if (key === '__name__') {\n                    continue;\n                }\n                const labelValues = currentAssociation.get(key);\n                if (labelValues === undefined) {\n                    currentAssociation.set(key, new Set([value]));\n                }\n                else {\n                    labelValues.add(value);\n                }\n            }\n        });\n    }\n    setMetricMetadata(metadata) {\n        this.metricMetadata = metadata;\n    }\n    getMetricMetadata() {\n        return this.metricMetadata;\n    }\n    setLabelNames(labelNames) {\n        this.labelNames = labelNames;\n    }\n    getLabelNames(metricName) {\n        if (!metricName || metricName.length === 0) {\n            return this.labelNames;\n        }\n        const labelSet = this.completeAssociation.get(metricName);\n        return labelSet ? Array.from(labelSet.keys()) : [];\n    }\n    setLabelValues(labelName, labelValues) {\n        this.labelValues.set(labelName, labelValues);\n    }\n    getLabelValues(labelName, metricName) {\n        if (!metricName || metricName.length === 0) {\n            const result = this.labelValues.get(labelName);\n            return result ? result : [];\n        }\n        const labelSet = this.completeAssociation.get(metricName);\n        if (labelSet) {\n            const labelValues = labelSet.get(labelName);\n            return labelValues ? Array.from(labelValues) : [];\n        }\n        return [];\n    }\n}\nexport class CachedPrometheusClient {\n    constructor(client, config) {\n        this.client = client;\n        this.cache = new Cache(config);\n    }\n    labelNames(metricName) {\n        const cachedLabel = this.cache.getLabelNames(metricName);\n        if (cachedLabel && cachedLabel.length > 0) {\n            return Promise.resolve(cachedLabel);\n        }\n        if (metricName === undefined || metricName === '') {\n            return this.client.labelNames().then((labelNames) => {\n                this.cache.setLabelNames(labelNames);\n                return labelNames;\n            });\n        }\n        return this.series(metricName).then(() => {\n            return this.cache.getLabelNames(metricName);\n        });\n    }\n    labelValues(labelName, metricName) {\n        const cachedLabel = this.cache.getLabelValues(labelName, metricName);\n        if (cachedLabel && cachedLabel.length > 0) {\n            return Promise.resolve(cachedLabel);\n        }\n        if (metricName === undefined || metricName === '') {\n            return this.client.labelValues(labelName).then((labelValues) => {\n                this.cache.setLabelValues(labelName, labelValues);\n                return labelValues;\n            });\n        }\n        return this.series(metricName).then(() => {\n            return this.cache.getLabelValues(labelName, metricName);\n        });\n    }\n    metricMetadata() {\n        const cachedMetadata = this.cache.getMetricMetadata();\n        if (cachedMetadata && Object.keys(cachedMetadata).length > 0) {\n            return Promise.resolve(cachedMetadata);\n        }\n        return this.client.metricMetadata().then((metadata) => {\n            this.cache.setMetricMetadata(metadata);\n            return this.cache.getMetricMetadata();\n        });\n    }\n    series(metricName) {\n        return this.client.series(metricName).then((series) => {\n            this.cache.setAssociations(metricName, series);\n            return series;\n        });\n    }\n    metricNames() {\n        return this.labelValues('__name__');\n    }\n}\n//# sourceMappingURL=prometheus.js.map"]},"metadata":{},"sourceType":"module"}