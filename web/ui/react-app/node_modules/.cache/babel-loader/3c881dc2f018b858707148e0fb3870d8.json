{"ast":null,"code":"import _slicedToArray from\"/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _createForOfIteratorHelper from\"/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import React from'react';import{useFetch}from'../../hooks/useFetch';import{LabelsTable}from'./LabelsTable';import{withStatusIndicator}from'../../components/withStatusIndicator';import{mapObjEntries}from'../../utils';import{usePathPrefix}from'../../contexts/PathPrefixContext';import{API_PATH}from'../../constants/constants';export var processSummary=function processSummary(activeTargets,droppedTargets){var targets={};// Get targets of each type along with the total and active end points\nvar _iterator=_createForOfIteratorHelper(activeTargets),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var target=_step.value;var name=target.scrapePool;if(!targets[name]){targets[name]={total:0,active:0};}targets[name].total++;targets[name].active++;}}catch(err){_iterator.e(err);}finally{_iterator.f();}var _iterator2=_createForOfIteratorHelper(droppedTargets),_step2;try{for(_iterator2.s();!(_step2=_iterator2.n()).done;){var _target=_step2.value;var _name=_target.discoveredLabels.job;if(!targets[_name]){targets[_name]={total:0,active:0};}targets[_name].total++;}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}return targets;};export var processTargets=function processTargets(activeTargets,droppedTargets){var labels={};var _iterator3=_createForOfIteratorHelper(activeTargets),_step3;try{for(_iterator3.s();!(_step3=_iterator3.n()).done;){var target=_step3.value;var name=target.scrapePool;if(!labels[name]){labels[name]=[];}labels[name].push({discoveredLabels:target.discoveredLabels,labels:target.labels,isDropped:false});}}catch(err){_iterator3.e(err);}finally{_iterator3.f();}var _iterator4=_createForOfIteratorHelper(droppedTargets),_step4;try{for(_iterator4.s();!(_step4=_iterator4.n()).done;){var _target2=_step4.value;var _name2=_target2.discoveredLabels.job;if(!labels[_name2]){labels[_name2]=[];}labels[_name2].push({discoveredLabels:_target2.discoveredLabels,isDropped:true,labels:{}});}}catch(err){_iterator4.e(err);}finally{_iterator4.f();}return labels;};export var ServiceDiscoveryContent=function ServiceDiscoveryContent(_ref){var activeTargets=_ref.activeTargets,droppedTargets=_ref.droppedTargets;var targets=processSummary(activeTargets,droppedTargets);var labels=processTargets(activeTargets,droppedTargets);return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(\"h2\",null,\"Service Discovery\"),/*#__PURE__*/React.createElement(\"ul\",null,mapObjEntries(targets,function(_ref2){var _ref3=_slicedToArray(_ref2,2),k=_ref3[0],v=_ref3[1];return/*#__PURE__*/React.createElement(\"li\",{key:k},/*#__PURE__*/React.createElement(\"a\",{href:'#'+k},k,\" (\",v.active,\" / \",v.total,\" active targets)\"));})),/*#__PURE__*/React.createElement(\"hr\",null),mapObjEntries(labels,function(_ref4){var _ref5=_slicedToArray(_ref4,2),k=_ref5[0],v=_ref5[1];return/*#__PURE__*/React.createElement(LabelsTable,{value:v,name:k,key:k});}));};ServiceDiscoveryContent.displayName='ServiceDiscoveryContent';var ServicesWithStatusIndicator=withStatusIndicator(ServiceDiscoveryContent);var ServiceDiscovery=function ServiceDiscovery(){var pathPrefix=usePathPrefix();var _useFetch=useFetch(\"\".concat(pathPrefix,\"/\").concat(API_PATH,\"/targets\")),response=_useFetch.response,error=_useFetch.error,isLoading=_useFetch.isLoading;return/*#__PURE__*/React.createElement(ServicesWithStatusIndicator,Object.assign({},response.data,{error:error,isLoading:isLoading,componentTitle:\"Service Discovery information\"}));};export default ServiceDiscovery;","map":{"version":3,"sources":["/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/src/pages/serviceDiscovery/Services.tsx"],"names":["React","useFetch","LabelsTable","withStatusIndicator","mapObjEntries","usePathPrefix","API_PATH","processSummary","activeTargets","droppedTargets","targets","target","name","scrapePool","total","active","discoveredLabels","job","processTargets","labels","push","isDropped","ServiceDiscoveryContent","k","v","displayName","ServicesWithStatusIndicator","ServiceDiscovery","pathPrefix","response","error","isLoading","data"],"mappings":"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","sourcesContent":["import React, { FC } from 'react';\nimport { RouteComponentProps } from '@reach/router';\nimport { useFetch } from '../../hooks/useFetch';\nimport { LabelsTable } from './LabelsTable';\nimport { Target, Labels, DroppedTarget } from '../targets/target';\n\nimport { withStatusIndicator } from '../../components/withStatusIndicator';\nimport { mapObjEntries } from '../../utils';\nimport { usePathPrefix } from '../../contexts/PathPrefixContext';\nimport { API_PATH } from '../../constants/constants';\n\ninterface ServiceMap {\n  activeTargets: Target[];\n  droppedTargets: DroppedTarget[];\n}\n\nexport interface TargetLabels {\n  discoveredLabels: Labels;\n  labels: Labels;\n  isDropped: boolean;\n}\n\nexport const processSummary = (activeTargets: Target[], droppedTargets: DroppedTarget[]) => {\n  const targets: Record<string, { active: number; total: number }> = {};\n\n  // Get targets of each type along with the total and active end points\n  for (const target of activeTargets) {\n    const { scrapePool: name } = target;\n    if (!targets[name]) {\n      targets[name] = {\n        total: 0,\n        active: 0,\n      };\n    }\n    targets[name].total++;\n    targets[name].active++;\n  }\n  for (const target of droppedTargets) {\n    const { job: name } = target.discoveredLabels;\n    if (!targets[name]) {\n      targets[name] = {\n        total: 0,\n        active: 0,\n      };\n    }\n    targets[name].total++;\n  }\n\n  return targets;\n};\n\nexport const processTargets = (activeTargets: Target[], droppedTargets: DroppedTarget[]) => {\n  const labels: Record<string, TargetLabels[]> = {};\n\n  for (const target of activeTargets) {\n    const name = target.scrapePool;\n    if (!labels[name]) {\n      labels[name] = [];\n    }\n    labels[name].push({\n      discoveredLabels: target.discoveredLabels,\n      labels: target.labels,\n      isDropped: false,\n    });\n  }\n\n  for (const target of droppedTargets) {\n    const { job: name } = target.discoveredLabels;\n    if (!labels[name]) {\n      labels[name] = [];\n    }\n    labels[name].push({\n      discoveredLabels: target.discoveredLabels,\n      isDropped: true,\n      labels: {},\n    });\n  }\n\n  return labels;\n};\n\nexport const ServiceDiscoveryContent: FC<ServiceMap> = ({ activeTargets, droppedTargets }) => {\n  const targets = processSummary(activeTargets, droppedTargets);\n  const labels = processTargets(activeTargets, droppedTargets);\n\n  return (\n    <>\n      <h2>Service Discovery</h2>\n      <ul>\n        {mapObjEntries(targets, ([k, v]) => (\n          <li key={k}>\n            <a href={'#' + k}>\n              {k} ({v.active} / {v.total} active targets)\n            </a>\n          </li>\n        ))}\n      </ul>\n      <hr />\n      {mapObjEntries(labels, ([k, v]) => {\n        return <LabelsTable value={v} name={k} key={k} />;\n      })}\n    </>\n  );\n};\nServiceDiscoveryContent.displayName = 'ServiceDiscoveryContent';\n\nconst ServicesWithStatusIndicator = withStatusIndicator(ServiceDiscoveryContent);\n\nconst ServiceDiscovery: FC<RouteComponentProps> = () => {\n  const pathPrefix = usePathPrefix();\n  const { response, error, isLoading } = useFetch<ServiceMap>(`${pathPrefix}/${API_PATH}/targets`);\n  return (\n    <ServicesWithStatusIndicator\n      {...response.data}\n      error={error}\n      isLoading={isLoading}\n      componentTitle=\"Service Discovery information\"\n    />\n  );\n};\n\nexport default ServiceDiscovery;\n"]},"metadata":{},"sourceType":"module"}