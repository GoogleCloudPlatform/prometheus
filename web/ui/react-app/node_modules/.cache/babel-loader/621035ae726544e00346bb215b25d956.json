{"ast":null,"code":"import React from'react';// defaults, will be overriden in App.tsx\nexport var ThemeContext=React.createContext({theme:'light',userPreference:'auto',// eslint-disable-next-line @typescript-eslint/no-empty-function\nsetTheme:function setTheme(s){}});export var useTheme=function useTheme(){return React.useContext(ThemeContext);};","map":{"version":3,"sources":["/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/src/contexts/ThemeContext.tsx"],"names":["React","ThemeContext","createContext","theme","userPreference","setTheme","s","useTheme","useContext"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAWA;AACA,MAAO,IAAMC,CAAAA,YAAY,CAAGD,KAAK,CAACE,aAAN,CAA8B,CACxDC,KAAK,CAAE,OADiD,CAExDC,cAAc,CAAE,MAFwC,CAGxD;AACAC,QAAQ,CAAE,kBAACC,CAAD,CAAqB,CAAE,CAJuB,CAA9B,CAArB,CAOP,MAAO,IAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,EAAM,CAC5B,MAAOP,CAAAA,KAAK,CAACQ,UAAN,CAAiBP,YAAjB,CAAP,CACD,CAFM","sourcesContent":["import React from 'react';\n\nexport type themeName = 'light' | 'dark';\nexport type themeSetting = themeName | 'auto';\n\nexport interface ThemeCtx {\n  theme: themeName;\n  userPreference: themeSetting;\n  setTheme: (t: themeSetting) => void;\n}\n\n// defaults, will be overriden in App.tsx\nexport const ThemeContext = React.createContext<ThemeCtx>({\n  theme: 'light',\n  userPreference: 'auto',\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  setTheme: (s: themeSetting) => {},\n});\n\nexport const useTheme = () => {\n  return React.useContext(ThemeContext);\n};\n"]},"metadata":{},"sourceType":"module"}