{"ast":null,"code":"// This alphabet uses `A-Za-z0-9_-` symbols. The genetic algorithm helped\n// optimize the gzip compression for this alphabet.\nvar urlAlphabet = 'ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW';\n\nvar customAlphabet = function customAlphabet(alphabet, size) {\n  return function () {\n    var id = ''; // A compact alternative for `for (var i = 0; i < step; i++)`.\n\n    var i = size;\n\n    while (i--) {\n      // `| 0` is more compact and faster than `Math.floor()`.\n      id += alphabet[Math.random() * alphabet.length | 0];\n    }\n\n    return id;\n  };\n};\n\nvar nanoid = function nanoid() {\n  var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 21;\n  var id = ''; // A compact alternative for `for (var i = 0; i < step; i++)`.\n\n  var i = size;\n\n  while (i--) {\n    // `| 0` is more compact and faster than `Math.floor()`.\n    id += urlAlphabet[Math.random() * 64 | 0];\n  }\n\n  return id;\n};\n\nexport { nanoid, customAlphabet };","map":{"version":3,"sources":["/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/nanoid/non-secure/index.js"],"names":["urlAlphabet","customAlphabet","alphabet","size","id","i","Math","random","length","nanoid"],"mappings":"AAAA;AACA;AACA,IAAIA,WAAW,GACb,kEADF;;AAGA,IAAIC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,QAAD,EAAWC,IAAX,EAAoB;AACvC,SAAO,YAAM;AACX,QAAIC,EAAE,GAAG,EAAT,CADW,CAEX;;AACA,QAAIC,CAAC,GAAGF,IAAR;;AACA,WAAOE,CAAC,EAAR,EAAY;AACV;AACAD,MAAAA,EAAE,IAAIF,QAAQ,CAAEI,IAAI,CAACC,MAAL,KAAgBL,QAAQ,CAACM,MAA1B,GAAoC,CAArC,CAAd;AACD;;AACD,WAAOJ,EAAP;AACD,GATD;AAUD,CAXD;;AAaA,IAAIK,MAAM,GAAG,SAATA,MAAS,GAAe;AAAA,MAAdN,IAAc,uEAAP,EAAO;AAC1B,MAAIC,EAAE,GAAG,EAAT,CAD0B,CAE1B;;AACA,MAAIC,CAAC,GAAGF,IAAR;;AACA,SAAOE,CAAC,EAAR,EAAY;AACV;AACAD,IAAAA,EAAE,IAAIJ,WAAW,CAAEM,IAAI,CAACC,MAAL,KAAgB,EAAjB,GAAuB,CAAxB,CAAjB;AACD;;AACD,SAAOH,EAAP;AACD,CATD;;AAWA,SAASK,MAAT,EAAiBR,cAAjB","sourcesContent":["// This alphabet uses `A-Za-z0-9_-` symbols. The genetic algorithm helped\n// optimize the gzip compression for this alphabet.\nlet urlAlphabet =\n  'ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW'\n\nlet customAlphabet = (alphabet, size) => {\n  return () => {\n    let id = ''\n    // A compact alternative for `for (var i = 0; i < step; i++)`.\n    let i = size\n    while (i--) {\n      // `| 0` is more compact and faster than `Math.floor()`.\n      id += alphabet[(Math.random() * alphabet.length) | 0]\n    }\n    return id\n  }\n}\n\nlet nanoid = (size = 21) => {\n  let id = ''\n  // A compact alternative for `for (var i = 0; i < step; i++)`.\n  let i = size\n  while (i--) {\n    // `| 0` is more compact and faster than `Math.floor()`.\n    id += urlAlphabet[(Math.random() * 64) | 0]\n  }\n  return id\n}\n\nexport { nanoid, customAlphabet }\n"]},"metadata":{},"sourceType":"module"}