{"ast":null,"code":"import React from'react';import{useFetch}from'../../hooks/useFetch';import{withStatusIndicator}from'../../components/withStatusIndicator';import{RulesContent}from'./RulesContent';import{usePathPrefix}from'../../contexts/PathPrefixContext';import{API_PATH}from'../../constants/constants';var RulesWithStatusIndicator=withStatusIndicator(RulesContent);var Rules=function Rules(){var pathPrefix=usePathPrefix();var _useFetch=useFetch(\"\".concat(pathPrefix,\"/\").concat(API_PATH,\"/rules\")),response=_useFetch.response,error=_useFetch.error,isLoading=_useFetch.isLoading;return/*#__PURE__*/React.createElement(RulesWithStatusIndicator,{response:response,error:error,isLoading:isLoading});};export default Rules;","map":{"version":3,"sources":["/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/src/pages/rules/Rules.tsx"],"names":["React","useFetch","withStatusIndicator","RulesContent","usePathPrefix","API_PATH","RulesWithStatusIndicator","Rules","pathPrefix","response","error","isLoading"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAA0B,OAA1B,CAEA,OAASC,QAAT,KAAyB,sBAAzB,CACA,OAASC,mBAAT,KAAoC,sCAApC,CACA,OAAmBC,YAAnB,KAAuC,gBAAvC,CACA,OAASC,aAAT,KAA8B,kCAA9B,CACA,OAASC,QAAT,KAAyB,2BAAzB,CAEA,GAAMC,CAAAA,wBAAwB,CAAGJ,mBAAmB,CAACC,YAAD,CAApD,CAEA,GAAMI,CAAAA,KAA8B,CAAG,QAAjCA,CAAAA,KAAiC,EAAM,CAC3C,GAAMC,CAAAA,UAAU,CAAGJ,aAAa,EAAhC,CACA,cAAuCH,QAAQ,WAAcO,UAAd,aAA4BH,QAA5B,WAA/C,CAAQI,QAAR,WAAQA,QAAR,CAAkBC,KAAlB,WAAkBA,KAAlB,CAAyBC,SAAzB,WAAyBA,SAAzB,CAEA,mBAAO,oBAAC,wBAAD,EAA0B,QAAQ,CAAEF,QAApC,CAA8C,KAAK,CAAEC,KAArD,CAA4D,SAAS,CAAEC,SAAvE,EAAP,CACD,CALD,CAOA,cAAeJ,CAAAA,KAAf","sourcesContent":["import React, { FC } from 'react';\nimport { RouteComponentProps } from '@reach/router';\nimport { useFetch } from '../../hooks/useFetch';\nimport { withStatusIndicator } from '../../components/withStatusIndicator';\nimport { RulesMap, RulesContent } from './RulesContent';\nimport { usePathPrefix } from '../../contexts/PathPrefixContext';\nimport { API_PATH } from '../../constants/constants';\n\nconst RulesWithStatusIndicator = withStatusIndicator(RulesContent);\n\nconst Rules: FC<RouteComponentProps> = () => {\n  const pathPrefix = usePathPrefix();\n  const { response, error, isLoading } = useFetch<RulesMap>(`${pathPrefix}/${API_PATH}/rules`);\n\n  return <RulesWithStatusIndicator response={response} error={error} isLoading={isLoading} />;\n};\n\nexport default Rules;\n"]},"metadata":{},"sourceType":"module"}