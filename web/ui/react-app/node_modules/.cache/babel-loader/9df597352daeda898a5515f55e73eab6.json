{"ast":null,"code":"import _regeneratorRuntime from\"/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _objectSpread from\"/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _asyncToGenerator from\"/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState,useEffect}from'react';export var useFetch=function useFetch(url,options){var _useState=useState({status:'start fetching'}),_useState2=_slicedToArray(_useState,2),response=_useState2[0],setResponse=_useState2[1];var _useState3=useState(),_useState4=_slicedToArray(_useState3,2),error=_useState4[0],setError=_useState4[1];var _useState5=useState(true),_useState6=_slicedToArray(_useState5,2),isLoading=_useState6[0],setIsLoading=_useState6[1];useEffect(function(){var fetchData=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var res,json;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:setIsLoading(true);_context.prev=1;_context.next=4;return fetch(url,_objectSpread({cache:'no-store',credentials:'same-origin'},options));case 4:res=_context.sent;if(res.ok){_context.next=7;break;}throw new Error(res.statusText);case 7:_context.next=9;return res.json();case 9:json=_context.sent;setResponse(json);setIsLoading(false);_context.next=17;break;case 14:_context.prev=14;_context.t0=_context[\"catch\"](1);setError(_context.t0);case 17:case\"end\":return _context.stop();}}},_callee,null,[[1,14]]);}));return function fetchData(){return _ref.apply(this,arguments);};}();fetchData();},[url,options]);return{response:response,error:error,isLoading:isLoading};};","map":{"version":3,"sources":["/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/src/hooks/useFetch.ts"],"names":["useState","useEffect","useFetch","url","options","status","response","setResponse","error","setError","isLoading","setIsLoading","fetchData","fetch","cache","credentials","res","ok","Error","statusText","json"],"mappings":"o4BAAA,OAASA,QAAT,CAAmBC,SAAnB,KAAoC,OAApC,CAUA,MAAO,IAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAAeC,GAAf,CAA4BC,OAA5B,CAAqE,CAC3F,cAAgCJ,QAAQ,CAAiB,CAAEK,MAAM,CAAE,gBAAV,CAAjB,CAAxC,wCAAOC,QAAP,eAAiBC,WAAjB,eACA,eAA0BP,QAAQ,EAAlC,yCAAOQ,KAAP,eAAcC,QAAd,eACA,eAAkCT,QAAQ,CAAU,IAAV,CAA1C,yCAAOU,SAAP,eAAkBC,YAAlB,eAEAV,SAAS,CAAC,UAAM,CACd,GAAMW,CAAAA,SAAS,0FAAG,gJAChBD,YAAY,CAAC,IAAD,CAAZ,CADgB,sCAGIE,CAAAA,KAAK,CAACV,GAAD,gBAAQW,KAAK,CAAE,UAAf,CAA2BC,WAAW,CAAE,aAAxC,EAA0DX,OAA1D,EAHT,QAGRY,GAHQ,kBAITA,GAAG,CAACC,EAJK,8BAKN,IAAIC,CAAAA,KAAJ,CAAUF,GAAG,CAACG,UAAd,CALM,8BAOMH,CAAAA,GAAG,CAACI,IAAJ,EAPN,QAORA,IAPQ,eAQdb,WAAW,CAACa,IAAD,CAAX,CACAT,YAAY,CAAC,KAAD,CAAZ,CATc,iFAWdF,QAAQ,aAAR,CAXc,qEAAH,kBAATG,CAAAA,SAAS,0CAAf,CAcAA,SAAS,GACV,CAhBQ,CAgBN,CAACT,GAAD,CAAMC,OAAN,CAhBM,CAAT,CAiBA,MAAO,CAAEE,QAAQ,CAARA,QAAF,CAAYE,KAAK,CAALA,KAAZ,CAAmBE,SAAS,CAATA,SAAnB,CAAP,CACD,CAvBM","sourcesContent":["import { useState, useEffect } from 'react';\n\nexport type APIResponse<T> = { status: string; data: T };\n\nexport interface FetchState<T> {\n  response: APIResponse<T>;\n  error?: Error;\n  isLoading: boolean;\n}\n\nexport const useFetch = <T extends {}>(url: string, options?: RequestInit): FetchState<T> => {\n  const [response, setResponse] = useState<APIResponse<T>>({ status: 'start fetching' } as any);\n  const [error, setError] = useState<Error>();\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true);\n      try {\n        const res = await fetch(url, { cache: 'no-store', credentials: 'same-origin', ...options });\n        if (!res.ok) {\n          throw new Error(res.statusText);\n        }\n        const json = (await res.json()) as APIResponse<T>;\n        setResponse(json);\n        setIsLoading(false);\n      } catch (error) {\n        setError(error);\n      }\n    };\n    fetchData();\n  }, [url, options]);\n  return { response, error, isLoading };\n};\n"]},"metadata":{},"sourceType":"module"}