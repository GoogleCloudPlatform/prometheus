{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _require = require('fs'),\n    existsSync = _require.existsSync,\n    readFileSync = _require.readFileSync;\n\nvar _require2 = require('path'),\n    dirname = _require2.dirname,\n    join = _require2.join;\n\nvar _require3 = require('source-map'),\n    SourceMapConsumer = _require3.SourceMapConsumer,\n    SourceMapGenerator = _require3.SourceMapGenerator;\n\nfunction fromBase64(str) {\n  if (Buffer) {\n    return Buffer.from(str, 'base64').toString();\n  } else {\n    // istanbul ignore next\n    return window.atob(str);\n  }\n}\n\nvar PreviousMap = /*#__PURE__*/function () {\n  function PreviousMap(css, opts) {\n    _classCallCheck(this, PreviousMap);\n\n    if (opts.map === false) return;\n    this.loadAnnotation(css);\n    this.inline = this.startWith(this.annotation, 'data:');\n    var prev = opts.map ? opts.map.prev : undefined;\n    var text = this.loadMap(opts.from, prev);\n\n    if (!this.mapFile && opts.from) {\n      this.mapFile = opts.from;\n    }\n\n    if (this.mapFile) this.root = dirname(this.mapFile);\n    if (text) this.text = text;\n  }\n\n  _createClass(PreviousMap, [{\n    key: \"consumer\",\n    value: function consumer() {\n      if (!this.consumerCache) {\n        this.consumerCache = new SourceMapConsumer(this.text);\n      }\n\n      return this.consumerCache;\n    }\n  }, {\n    key: \"withContent\",\n    value: function withContent() {\n      return !!(this.consumer().sourcesContent && this.consumer().sourcesContent.length > 0);\n    }\n  }, {\n    key: \"startWith\",\n    value: function startWith(string, start) {\n      if (!string) return false;\n      return string.substr(0, start.length) === start;\n    }\n  }, {\n    key: \"getAnnotationURL\",\n    value: function getAnnotationURL(sourceMapString) {\n      return sourceMapString.match(/\\/\\*\\s*# sourceMappingURL=((?:(?!sourceMappingURL=).)*)\\*\\//)[1].trim();\n    }\n  }, {\n    key: \"loadAnnotation\",\n    value: function loadAnnotation(css) {\n      var annotations = css.match(/\\/\\*\\s*# sourceMappingURL=(?:(?!sourceMappingURL=).)*\\*\\//gm);\n\n      if (annotations && annotations.length > 0) {\n        // Locate the last sourceMappingURL to avoid picking up\n        // sourceMappingURLs from comments, strings, etc.\n        var lastAnnotation = annotations[annotations.length - 1];\n\n        if (lastAnnotation) {\n          this.annotation = this.getAnnotationURL(lastAnnotation);\n        }\n      }\n    }\n  }, {\n    key: \"decodeInline\",\n    value: function decodeInline(text) {\n      var baseCharsetUri = /^data:application\\/json;charset=utf-?8;base64,/;\n      var baseUri = /^data:application\\/json;base64,/;\n      var charsetUri = /^data:application\\/json;charset=utf-?8,/;\n      var uri = /^data:application\\/json,/;\n\n      if (charsetUri.test(text) || uri.test(text)) {\n        return decodeURIComponent(text.substr(RegExp.lastMatch.length));\n      }\n\n      if (baseCharsetUri.test(text) || baseUri.test(text)) {\n        return fromBase64(text.substr(RegExp.lastMatch.length));\n      }\n\n      var encoding = text.match(/data:application\\/json;([^,]+),/)[1];\n      throw new Error('Unsupported source map encoding ' + encoding);\n    }\n  }, {\n    key: \"loadFile\",\n    value: function loadFile(path) {\n      this.root = dirname(path);\n\n      if (existsSync(path)) {\n        this.mapFile = path;\n        return readFileSync(path, 'utf-8').toString().trim();\n      }\n    }\n  }, {\n    key: \"loadMap\",\n    value: function loadMap(file, prev) {\n      if (prev === false) return false;\n\n      if (prev) {\n        if (typeof prev === 'string') {\n          return prev;\n        } else if (typeof prev === 'function') {\n          var prevPath = prev(file);\n\n          if (prevPath) {\n            var map = this.loadFile(prevPath);\n\n            if (!map) {\n              throw new Error('Unable to load previous source map: ' + prevPath.toString());\n            }\n\n            return map;\n          }\n        } else if (prev instanceof SourceMapConsumer) {\n          return SourceMapGenerator.fromSourceMap(prev).toString();\n        } else if (prev instanceof SourceMapGenerator) {\n          return prev.toString();\n        } else if (this.isMap(prev)) {\n          return JSON.stringify(prev);\n        } else {\n          throw new Error('Unsupported previous source map format: ' + prev.toString());\n        }\n      } else if (this.inline) {\n        return this.decodeInline(this.annotation);\n      } else if (this.annotation) {\n        var _map = this.annotation;\n        if (file) _map = join(dirname(file), _map);\n        return this.loadFile(_map);\n      }\n    }\n  }, {\n    key: \"isMap\",\n    value: function isMap(map) {\n      if (typeof map !== 'object') return false;\n      return typeof map.mappings === 'string' || typeof map._mappings === 'string' || Array.isArray(map.sections);\n    }\n  }]);\n\n  return PreviousMap;\n}();\n\nmodule.exports = PreviousMap;\nPreviousMap.default = PreviousMap;","map":{"version":3,"sources":["/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/sanitize-html/node_modules/postcss/lib/previous-map.js"],"names":["require","existsSync","readFileSync","dirname","join","SourceMapConsumer","SourceMapGenerator","fromBase64","str","Buffer","from","toString","window","atob","PreviousMap","css","opts","map","loadAnnotation","inline","startWith","annotation","prev","undefined","text","loadMap","mapFile","root","consumerCache","consumer","sourcesContent","length","string","start","substr","sourceMapString","match","trim","annotations","lastAnnotation","getAnnotationURL","baseCharsetUri","baseUri","charsetUri","uri","test","decodeURIComponent","RegExp","lastMatch","encoding","Error","path","file","prevPath","loadFile","fromSourceMap","isMap","JSON","stringify","decodeInline","mappings","_mappings","Array","isArray","sections","module","exports","default"],"mappings":"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","sourcesContent":["'use strict'\n\nlet { existsSync, readFileSync } = require('fs')\nlet { dirname, join } = require('path')\nlet { SourceMapConsumer, SourceMapGenerator } = require('source-map')\n\nfunction fromBase64(str) {\n  if (Buffer) {\n    return Buffer.from(str, 'base64').toString()\n  } else {\n    // istanbul ignore next\n    return window.atob(str)\n  }\n}\n\nclass PreviousMap {\n  constructor(css, opts) {\n    if (opts.map === false) return\n    this.loadAnnotation(css)\n    this.inline = this.startWith(this.annotation, 'data:')\n\n    let prev = opts.map ? opts.map.prev : undefined\n    let text = this.loadMap(opts.from, prev)\n    if (!this.mapFile && opts.from) {\n      this.mapFile = opts.from\n    }\n    if (this.mapFile) this.root = dirname(this.mapFile)\n    if (text) this.text = text\n  }\n\n  consumer() {\n    if (!this.consumerCache) {\n      this.consumerCache = new SourceMapConsumer(this.text)\n    }\n    return this.consumerCache\n  }\n\n  withContent() {\n    return !!(\n      this.consumer().sourcesContent &&\n      this.consumer().sourcesContent.length > 0\n    )\n  }\n\n  startWith(string, start) {\n    if (!string) return false\n    return string.substr(0, start.length) === start\n  }\n\n  getAnnotationURL(sourceMapString) {\n    return sourceMapString\n      .match(/\\/\\*\\s*# sourceMappingURL=((?:(?!sourceMappingURL=).)*)\\*\\//)[1]\n      .trim()\n  }\n\n  loadAnnotation(css) {\n    let annotations = css.match(\n      /\\/\\*\\s*# sourceMappingURL=(?:(?!sourceMappingURL=).)*\\*\\//gm\n    )\n\n    if (annotations && annotations.length > 0) {\n      // Locate the last sourceMappingURL to avoid picking up\n      // sourceMappingURLs from comments, strings, etc.\n      let lastAnnotation = annotations[annotations.length - 1]\n      if (lastAnnotation) {\n        this.annotation = this.getAnnotationURL(lastAnnotation)\n      }\n    }\n  }\n\n  decodeInline(text) {\n    let baseCharsetUri = /^data:application\\/json;charset=utf-?8;base64,/\n    let baseUri = /^data:application\\/json;base64,/\n    let charsetUri = /^data:application\\/json;charset=utf-?8,/\n    let uri = /^data:application\\/json,/\n\n    if (charsetUri.test(text) || uri.test(text)) {\n      return decodeURIComponent(text.substr(RegExp.lastMatch.length))\n    }\n\n    if (baseCharsetUri.test(text) || baseUri.test(text)) {\n      return fromBase64(text.substr(RegExp.lastMatch.length))\n    }\n\n    let encoding = text.match(/data:application\\/json;([^,]+),/)[1]\n    throw new Error('Unsupported source map encoding ' + encoding)\n  }\n\n  loadFile(path) {\n    this.root = dirname(path)\n    if (existsSync(path)) {\n      this.mapFile = path\n      return readFileSync(path, 'utf-8').toString().trim()\n    }\n  }\n\n  loadMap(file, prev) {\n    if (prev === false) return false\n\n    if (prev) {\n      if (typeof prev === 'string') {\n        return prev\n      } else if (typeof prev === 'function') {\n        let prevPath = prev(file)\n        if (prevPath) {\n          let map = this.loadFile(prevPath)\n          if (!map) {\n            throw new Error(\n              'Unable to load previous source map: ' + prevPath.toString()\n            )\n          }\n          return map\n        }\n      } else if (prev instanceof SourceMapConsumer) {\n        return SourceMapGenerator.fromSourceMap(prev).toString()\n      } else if (prev instanceof SourceMapGenerator) {\n        return prev.toString()\n      } else if (this.isMap(prev)) {\n        return JSON.stringify(prev)\n      } else {\n        throw new Error(\n          'Unsupported previous source map format: ' + prev.toString()\n        )\n      }\n    } else if (this.inline) {\n      return this.decodeInline(this.annotation)\n    } else if (this.annotation) {\n      let map = this.annotation\n      if (file) map = join(dirname(file), map)\n      return this.loadFile(map)\n    }\n  }\n\n  isMap(map) {\n    if (typeof map !== 'object') return false\n    return (\n      typeof map.mappings === 'string' ||\n      typeof map._mappings === 'string' ||\n      Array.isArray(map.sections)\n    )\n  }\n}\n\nmodule.exports = PreviousMap\nPreviousMap.default = PreviousMap\n"]},"metadata":{},"sourceType":"script"}