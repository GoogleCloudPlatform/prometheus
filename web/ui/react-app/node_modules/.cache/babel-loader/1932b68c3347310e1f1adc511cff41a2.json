{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getElementsByTagType = exports.getElementsByTagName = exports.getElementById = exports.getElements = exports.testElement = void 0;\n\nvar domhandler_1 = require(\"domhandler\");\n\nvar querying_1 = require(\"./querying\");\n\nvar Checks = {\n  tag_name: function tag_name(name) {\n    if (typeof name === \"function\") {\n      return function (elem) {\n        return domhandler_1.isTag(elem) && name(elem.name);\n      };\n    } else if (name === \"*\") {\n      return domhandler_1.isTag;\n    }\n\n    return function (elem) {\n      return domhandler_1.isTag(elem) && elem.name === name;\n    };\n  },\n  tag_type: function tag_type(type) {\n    if (typeof type === \"function\") {\n      return function (elem) {\n        return type(elem.type);\n      };\n    }\n\n    return function (elem) {\n      return elem.type === type;\n    };\n  },\n  tag_contains: function tag_contains(data) {\n    if (typeof data === \"function\") {\n      return function (elem) {\n        return domhandler_1.isText(elem) && data(elem.data);\n      };\n    }\n\n    return function (elem) {\n      return domhandler_1.isText(elem) && elem.data === data;\n    };\n  }\n};\n/**\n * @param attrib Attribute to check.\n * @param value Attribute value to look for.\n * @returns A function to check whether the a node has an attribute with a particular value.\n */\n\nfunction getAttribCheck(attrib, value) {\n  if (typeof value === \"function\") {\n    return function (elem) {\n      return domhandler_1.isTag(elem) && value(elem.attribs[attrib]);\n    };\n  }\n\n  return function (elem) {\n    return domhandler_1.isTag(elem) && elem.attribs[attrib] === value;\n  };\n}\n/**\n * @param a First function to combine.\n * @param b Second function to combine.\n * @returns A function taking a node and returning `true` if either\n * of the input functions returns `true` for the node.\n */\n\n\nfunction combineFuncs(a, b) {\n  return function (elem) {\n    return a(elem) || b(elem);\n  };\n}\n/**\n * @param options An object describing nodes to look for.\n * @returns A function executing all checks in `options` and returning `true`\n * if any of them match a node.\n */\n\n\nfunction compileTest(options) {\n  var funcs = Object.keys(options).map(function (key) {\n    var value = options[key];\n    return key in Checks ? Checks[key](value) : getAttribCheck(key, value);\n  });\n  return funcs.length === 0 ? null : funcs.reduce(combineFuncs);\n}\n/**\n * @param options An object describing nodes to look for.\n * @param node The element to test.\n * @returns Whether the element matches the description in `options`.\n */\n\n\nfunction testElement(options, node) {\n  var test = compileTest(options);\n  return test ? test(node) : true;\n}\n\nexports.testElement = testElement;\n/**\n * @param options An object describing nodes to look for.\n * @param nodes Nodes to search through.\n * @param recurse Also consider child nodes.\n * @param limit Maximum number of nodes to return.\n * @returns All nodes that match `options`.\n */\n\nfunction getElements(options, nodes, recurse, limit) {\n  if (limit === void 0) {\n    limit = Infinity;\n  }\n\n  var test = compileTest(options);\n  return test ? querying_1.filter(test, nodes, recurse, limit) : [];\n}\n\nexports.getElements = getElements;\n/**\n * @param id The unique ID attribute value to look for.\n * @param nodes Nodes to search through.\n * @param recurse Also consider child nodes.\n * @returns The node with the supplied ID.\n */\n\nfunction getElementById(id, nodes, recurse) {\n  if (recurse === void 0) {\n    recurse = true;\n  }\n\n  if (!Array.isArray(nodes)) nodes = [nodes];\n  return querying_1.findOne(getAttribCheck(\"id\", id), nodes, recurse);\n}\n\nexports.getElementById = getElementById;\n/**\n * @param tagName Tag name to search for.\n * @param nodes Nodes to search through.\n * @param recurse Also consider child nodes.\n * @param limit Maximum number of nodes to return.\n * @returns All nodes with the supplied `tagName`.\n */\n\nfunction getElementsByTagName(tagName, nodes, recurse, limit) {\n  if (recurse === void 0) {\n    recurse = true;\n  }\n\n  if (limit === void 0) {\n    limit = Infinity;\n  }\n\n  return querying_1.filter(Checks.tag_name(tagName), nodes, recurse, limit);\n}\n\nexports.getElementsByTagName = getElementsByTagName;\n/**\n * @param type Element type to look for.\n * @param nodes Nodes to search through.\n * @param recurse Also consider child nodes.\n * @param limit Maximum number of nodes to return.\n * @returns All nodes with the supplied `type`.\n */\n\nfunction getElementsByTagType(type, nodes, recurse, limit) {\n  if (recurse === void 0) {\n    recurse = true;\n  }\n\n  if (limit === void 0) {\n    limit = Infinity;\n  }\n\n  return querying_1.filter(Checks.tag_type(type), nodes, recurse, limit);\n}\n\nexports.getElementsByTagType = getElementsByTagType;","map":{"version":3,"sources":["/usr/local/google/home/freinartz/repos/src/github.com/GoogleCloudPlatform/prometheus-clean/web/ui/react-app/node_modules/domutils/lib/legacy.js"],"names":["Object","defineProperty","exports","value","getElementsByTagType","getElementsByTagName","getElementById","getElements","testElement","domhandler_1","require","querying_1","Checks","tag_name","name","elem","isTag","tag_type","type","tag_contains","data","isText","getAttribCheck","attrib","attribs","combineFuncs","a","b","compileTest","options","funcs","keys","map","key","length","reduce","node","test","nodes","recurse","limit","Infinity","filter","id","Array","isArray","findOne","tagName"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getElementsByTagType = exports.getElementsByTagName = exports.getElementById = exports.getElements = exports.testElement = void 0;\nvar domhandler_1 = require(\"domhandler\");\nvar querying_1 = require(\"./querying\");\nvar Checks = {\n    tag_name: function (name) {\n        if (typeof name === \"function\") {\n            return function (elem) { return domhandler_1.isTag(elem) && name(elem.name); };\n        }\n        else if (name === \"*\") {\n            return domhandler_1.isTag;\n        }\n        return function (elem) { return domhandler_1.isTag(elem) && elem.name === name; };\n    },\n    tag_type: function (type) {\n        if (typeof type === \"function\") {\n            return function (elem) { return type(elem.type); };\n        }\n        return function (elem) { return elem.type === type; };\n    },\n    tag_contains: function (data) {\n        if (typeof data === \"function\") {\n            return function (elem) { return domhandler_1.isText(elem) && data(elem.data); };\n        }\n        return function (elem) { return domhandler_1.isText(elem) && elem.data === data; };\n    },\n};\n/**\n * @param attrib Attribute to check.\n * @param value Attribute value to look for.\n * @returns A function to check whether the a node has an attribute with a particular value.\n */\nfunction getAttribCheck(attrib, value) {\n    if (typeof value === \"function\") {\n        return function (elem) { return domhandler_1.isTag(elem) && value(elem.attribs[attrib]); };\n    }\n    return function (elem) { return domhandler_1.isTag(elem) && elem.attribs[attrib] === value; };\n}\n/**\n * @param a First function to combine.\n * @param b Second function to combine.\n * @returns A function taking a node and returning `true` if either\n * of the input functions returns `true` for the node.\n */\nfunction combineFuncs(a, b) {\n    return function (elem) { return a(elem) || b(elem); };\n}\n/**\n * @param options An object describing nodes to look for.\n * @returns A function executing all checks in `options` and returning `true`\n * if any of them match a node.\n */\nfunction compileTest(options) {\n    var funcs = Object.keys(options).map(function (key) {\n        var value = options[key];\n        return key in Checks\n            ? Checks[key](value)\n            : getAttribCheck(key, value);\n    });\n    return funcs.length === 0 ? null : funcs.reduce(combineFuncs);\n}\n/**\n * @param options An object describing nodes to look for.\n * @param node The element to test.\n * @returns Whether the element matches the description in `options`.\n */\nfunction testElement(options, node) {\n    var test = compileTest(options);\n    return test ? test(node) : true;\n}\nexports.testElement = testElement;\n/**\n * @param options An object describing nodes to look for.\n * @param nodes Nodes to search through.\n * @param recurse Also consider child nodes.\n * @param limit Maximum number of nodes to return.\n * @returns All nodes that match `options`.\n */\nfunction getElements(options, nodes, recurse, limit) {\n    if (limit === void 0) { limit = Infinity; }\n    var test = compileTest(options);\n    return test ? querying_1.filter(test, nodes, recurse, limit) : [];\n}\nexports.getElements = getElements;\n/**\n * @param id The unique ID attribute value to look for.\n * @param nodes Nodes to search through.\n * @param recurse Also consider child nodes.\n * @returns The node with the supplied ID.\n */\nfunction getElementById(id, nodes, recurse) {\n    if (recurse === void 0) { recurse = true; }\n    if (!Array.isArray(nodes))\n        nodes = [nodes];\n    return querying_1.findOne(getAttribCheck(\"id\", id), nodes, recurse);\n}\nexports.getElementById = getElementById;\n/**\n * @param tagName Tag name to search for.\n * @param nodes Nodes to search through.\n * @param recurse Also consider child nodes.\n * @param limit Maximum number of nodes to return.\n * @returns All nodes with the supplied `tagName`.\n */\nfunction getElementsByTagName(tagName, nodes, recurse, limit) {\n    if (recurse === void 0) { recurse = true; }\n    if (limit === void 0) { limit = Infinity; }\n    return querying_1.filter(Checks.tag_name(tagName), nodes, recurse, limit);\n}\nexports.getElementsByTagName = getElementsByTagName;\n/**\n * @param type Element type to look for.\n * @param nodes Nodes to search through.\n * @param recurse Also consider child nodes.\n * @param limit Maximum number of nodes to return.\n * @returns All nodes with the supplied `type`.\n */\nfunction getElementsByTagType(type, nodes, recurse, limit) {\n    if (recurse === void 0) { recurse = true; }\n    if (limit === void 0) { limit = Infinity; }\n    return querying_1.filter(Checks.tag_type(type), nodes, recurse, limit);\n}\nexports.getElementsByTagType = getElementsByTagType;\n"]},"metadata":{},"sourceType":"script"}