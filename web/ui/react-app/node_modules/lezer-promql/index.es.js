import { Parser } from 'lezer';

// This file was generated by lezer-generator. You probably shouldn't edit it.
const 
  inf = 130,
  nan = 131,
  Bool = 1,
  Ignoring = 2,
  On = 3,
  GroupLeft = 4,
  GroupRight = 5,
  Offset = 6,
  Avg = 7,
  Bottomk = 8,
  Count = 9,
  CountValues = 10,
  Group = 11,
  Max = 12,
  Min = 13,
  Quantile = 14,
  Stddev = 15,
  Stdvar = 16,
  Sum = 17,
  Topk = 18,
  By = 19,
  Without = 20,
  And = 21,
  Or = 22,
  Unless = 23,
  Start = 24,
  End = 25;

// Copyright 2021 PromLabs GmbH

const keywordTokens = {
  inf: inf,
  nan: nan,
  bool: Bool,
  ignoring: Ignoring,
  on: On,
  group_left: GroupLeft,
  group_right: GroupRight,
  offset: Offset,
};

const specializeIdentifier = (value, stack) => {
  return keywordTokens[value.toLowerCase()] || -1;
};

const contextualKeywordTokens = {
  avg: Avg,
  bottomk: Bottomk,
  count: Count,
  count_values: CountValues,
  group: Group,
  max: Max,
  min: Min,
  quantile: Quantile,
  stddev: Stddev,
  stdvar: Stdvar,
  sum: Sum,
  topk: Topk,
  by: By,
  without: Without,
  and: And,
  or: Or,
  unless: Unless,
  start: Start,
  end: End,
};

const extendIdentifier = (value, stack) => {
  return contextualKeywordTokens[value.toLowerCase()] || -1;
};

// This file was generated by lezer-generator. You probably shouldn't edit it.
const spec_Identifier = {__proto__:null,absent_over_time:275, absent:277, abs:279, avg_over_time:281, ceil:283, changes:285, clamp:287, clamp_max:289, clamp_min:291, count_over_time:293, days_in_month:295, day_of_month:297, day_of_week:299, delta:301, deriv:303, exp:305, floor:307, histogram_quantile:309, holt_winters:311, hour:313, idelta:315, increase:317, irate:319, label_replace:321, label_join:323, last_over_time:325, ln:327, log10:329, log2:331, max_over_time:333, min_over_time:335, minute:337, month:339, predict_linear:341, present_over_time:343, quantile_over_time:345, rate:347, resets:349, round:351, scalar:353, sgn:355, sort:357, sort_desc:359, sqrt:361, stddev_over_time:363, stdvar_over_time:365, sum_over_time:367, timestamp:369, time:371, vector:373, year:375};
const parser = Parser.deserialize({
  version: 13,
  states: "4^OYQPOOO%|QPOOOOQO'#Cz'#CzO&RQPO'#CyQ&^QQOOOOQO'#Dd'#DdO&XQPO'#DcOOQO'#Em'#EmO'hQPO'#EsOYQPO'#EoOYQPO'#ErOOQO'#Eu'#EuO,eQSO'#EvO,mQQO'#EtOOQO'#Et'#EtOOQO'#Cx'#CxOOQO'#De'#DeOOQO'#Dg'#DgOOQO'#Dh'#DhOOQO'#Di'#DiOOQO'#Dj'#DjOOQO'#Dk'#DkOOQO'#Dl'#DlOOQO'#Dm'#DmOOQO'#Dn'#DnOOQO'#Do'#DoOOQO'#Dp'#DpOOQO'#Dq'#DqOOQO'#Dr'#DrOOQO'#Ds'#DsOOQO'#Dt'#DtOOQO'#Du'#DuOOQO'#Dv'#DvOOQO'#Dw'#DwOOQO'#Dx'#DxOOQO'#Dy'#DyOOQO'#Dz'#DzOOQO'#D{'#D{OOQO'#D|'#D|OOQO'#D}'#D}OOQO'#EO'#EOOOQO'#EP'#EPOOQO'#EQ'#EQOOQO'#ER'#EROOQO'#ES'#ESOOQO'#ET'#ETOOQO'#EU'#EUOOQO'#EV'#EVOOQO'#EW'#EWOOQO'#EX'#EXOOQO'#EY'#EYOOQO'#EZ'#EZOOQO'#E['#E[OOQO'#E]'#E]OOQO'#E^'#E^OOQO'#E_'#E_OOQO'#E`'#E`OOQO'#Ea'#EaOOQO'#Eb'#EbOOQO'#Ec'#EcOOQO'#Ed'#EdOOQO'#Ee'#EeOOQO'#Ef'#EfOOQO'#Eg'#EgOOQO'#Eh'#EhOOQO'#Ei'#EiOOQO'#Ej'#EjQOQPOOO.TQPO'#C{O.YQPO'#DQO&XQPO,59eO.aQQO,59eO/zQPO,59nO/zQPO,59nO/zQPO,59nO/zQPO,59nO/zQPO,59nO4wQQO,5;VO4|QQO,5;YO5UQPO,5;iOOQO,59},59}OOQO,5;X,5;XO5mQQO,5;ZO5tQQO,5;^O7XQPO'#ExO7gQPO,5;bOOQO'#Ew'#EwOOQO,5;b,5;bOOQO,5;`,5;`O7oQSO'#C|OOQO,59g,59gO7wQPO,59lO8PQQO'#DROOQO,59l,59lOOQO1G/P1G/PO.TQPO'#DVO<}QPO'#DUO=XQPO'#DUOYQPO1G/YOYQPO1G/YOYQPO1G/YOYQPO1G/YOYQPO1G/YO=cQSO1G0qOOQO1G0t1G0tO=kQQO1G0tO=pQPO'#EmOOQO'#FP'#FPOOQO1G1T1G1TO={QPO1G1TOOQO1G0u1G0uOOQO'#Ey'#EyO>QQPO,5;dO>VQSO1G0|OOQO1G0|1G0|OOQO'#DO'#DOO>_QPO,59hOOQO'#C}'#C}OOQO,59h,59hOYQPO,59mOOQO1G/W1G/WOOQO,59q,59qOCWQPO,59pOC_QPO,59pODvQQO7+$tOETQQO7+$tOFcQQO7+$tOFyQQO7+$tOH_QQO7+$tOOQO7+&]7+&]OHxQQO7+&cOOQO7+&`7+&`OIQQPO7+&oOOQO1G1O1G1OOOQO1G0}1G0}OOQO7+&h7+&hOIVQSO1G/SOOQO1G/S1G/SOI_QQO1G/XOOQO1G/[1G/[OIiQPO1G/[OOQO<<I}<<I}ON]QPO<<I}OOQO<<JZ<<JZOOQO1G/T1G/TOOQO7+$n7+$nOOQO7+$v7+$vOOQOAN?iAN?i",
  stateData: "Nb~O#yOSjOS~OVQOWQOXQOYQOZQO[QO]QO^QO_QO`QOaQObQO!YZO#d_O#vVO#wVO#zXO#}`O$OaO$PbO$QcO$RdO$SeO$TfO$UgO$VhO$WiO$XjO$YkO$ZlO$[mO$]nO$^oO$_pO$`qO$arO$bsO$ctO$duO$evO$fwO$gxO$hyO$izO$j{O$k|O$l}O$m!OO$n!PO$o!QO$p!RO$q!SO$r!TO$s!UO$t!VO$u!WO$v!XO$w!YO$x!ZO$y![O$z!]O${!^O$|!_O$}!`O%O!aO%P!bO%Q!cO%R!dO%UWO%VWO%WVO%Y[O~O!YZO~Oc!fOd!fO#z!gO~OU!pOe!mOf!nOg!mOw!jOz!jO{!jO|!jO}!kO!O!kO!P!lO!Q!lO!R!lO!S!lO!T!lO!U!lO#r!qO%S!oO~O#v!sO#w!sO%W!sOV#gXW#gXX#gXY#gXZ#gX[#gX]#gX^#gX_#gX`#gXa#gXb#gX!Y#gX#d#gX#v#gX#w#gX#z#gX#}#gX$O#gX$P#gX$Q#gX$R#gX$S#gX$T#gX$U#gX$V#gX$W#gX$X#gX$Y#gX$Z#gX$[#gX$]#gX$^#gX$_#gX$`#gX$a#gX$b#gX$c#gX$d#gX$e#gX$f#gX$g#gX$h#gX$i#gX$j#gX$k#gX$l#gX$m#gX$n#gX$o#gX$p#gX$q#gX$r#gX$s#gX$t#gX$u#gX$v#gX$w#gX$x#gX$y#gX$z#gX${#gX$|#gX$}#gX%O#gX%P#gX%Q#gX%R#gX%U#gX%V#gX%W#gX%Y#gX~Os!vO%Z!yO~O%Y[OU#hXe#hXf#hXg#hXw#hXz#hX{#hX|#hX}#hX!O#hX!P#hX!Q#hX!R#hX!S#hX!T#hX!U#hX#r#hX#u#hX%S#hX#|#hX#{#hX~O#z!{O~O#|#PO~PYOc!fOd!fOUmaemafmagmawmazma{ma|ma}ma!Oma!Pma!Qma!Rma!Sma!Tma!Uma#rma#uma%Sma#|ma#{ma~OP#TOQ#ROR#ROVxPWxPXxPYxPZxP[xP]xP^xP_xP`xPaxPbxP!YxP#dxP#vxP#wxP#zxP#}xP$OxP$PxP$QxP$RxP$SxP$TxP$UxP$VxP$WxP$XxP$YxP$ZxP$[xP$]xP$^xP$_xP$`xP$axP$bxP$cxP$dxP$exP$fxP$gxP$hxP$ixP$jxP$kxP$lxP$mxP$nxP$oxP$pxP$qxP$rxP$sxP$txP$uxP$vxP$wxP$xxP$yxP$zxP${xP$|xP$}xP%OxP%PxP%QxP%RxP%UxP%VxP%WxP%YxP~O#`#ZO~O!O#]O#`#[O~Oh#_Oi#_O#vVO#wVO%U#^O%V#^O%WVO~O#|#bO~P&^Ow!jOU#fae#faf#fag#faz#fa{#fa|#fa}#fa!O#fa!P#fa!Q#fa!R#fa!S#fa!T#fa!U#fa#r#fa#u#fa%S#fa#|#fa#{#fa~O!U#cO#n#cO#o#cO#p#cO~O#{#eO%Z#fO~Os#gO#|#jO~O#{#kO#|#lO~O#{uX#|uX~P&^OVxXWxXXxXYxXZxX[xX]xX^xX_xX`xXaxXbxX!YxX#dxX#vxX#wxX#zxX#}xX$OxX$PxX$QxX$RxX$SxX$TxX$UxX$VxX$WxX$XxX$YxX$ZxX$[xX$]xX$^xX$_xX$`xX$axX$bxX$cxX$dxX$exX$fxX$gxX$hxX$ixX$jxX$kxX$lxX$mxX$nxX$oxX$pxX$qxX$rxX$sxX$txX$uxX$vxX$wxX$xxX$yxX$zxX${xX$|xX$}xX%OxX%PxX%QxX%RxX%UxX%VxX%WxX%YxX~OS#nOT#nO~P8ZOQ#ROR#RO~P8ZO%T#uO%X#vO~O#`#wO~O#v!sO#w!sO%W!sO~O#z#xO~O#d#yO~Os!vO%Z#{O~O#{#|O#|#}O~OVxaWxaXxaYxaZxa[xa]xa^xa_xa`xaaxabxa!Yxa#dxa#vxa#wxa#}xa$Oxa$Pxa$Qxa$Rxa$Sxa$Txa$Uxa$Vxa$Wxa$Xxa$Yxa$Zxa$[xa$]xa$^xa$_xa$`xa$axa$bxa$cxa$dxa$exa$fxa$gxa$hxa$ixa$jxa$kxa$lxa$mxa$nxa$oxa$pxa$qxa$rxa$sxa$txa$uxa$vxa$wxa$xxa$yxa$zxa${xa$|xa$}xa%Oxa%Pxa%Qxa%Rxa%Uxa%Vxa%Wxa%Yxa~O#z!{O~P>gOS$QOT$QO#zxa~P>gOw!jOUvqevqfvqgvq}vq!Ovq!Pvq!Qvq!Rvq!Svq!Tvq!Uvq#rvq#uvq%Svq#|vq#{vq~Ozvq{vq|vq~PClOz!jO{!jO|!jO~PClOw!jOz!jO{!jO|!jO}!kO!O!kOUvqevqfvqgvq#rvq#uvq%Svq#|vq#{vq~O!Pvq!Qvq!Rvq!Svq!Tvq!Uvq~PEbO!P!lO!Q!lO!R!lO!S!lO!T!lO!U!lO~PEbOe!mOg!mOw!jOz!jO{!jO|!jO}!kO!O!kO!P!lO!Q!lO!R!lO!S!lO!T!lO!U!lO~OUvqfvq#rvq#uvq%Svq#|vq#{vq~PGaO#`$SO%T$RO~O#|$TO~Os#gO#|$VO~O#{ui#|ui~P&^O#z!{OVxiWxiXxiYxiZxi[xi]xi^xi_xi`xiaxibxi!Yxi#dxi#vxi#wxi#}xi$Oxi$Pxi$Qxi$Rxi$Sxi$Txi$Uxi$Vxi$Wxi$Xxi$Yxi$Zxi$[xi$]xi$^xi$_xi$`xi$axi$bxi$cxi$dxi$exi$fxi$gxi$hxi$ixi$jxi$kxi$lxi$mxi$nxi$oxi$pxi$qxi$rxi$sxi$txi$uxi$vxi$wxi$xxi$yxi$zxi${xi$|xi$}xi%Oxi%Pxi%Qxi%Rxi%Uxi%Vxi%Wxi%Yxi~O%T$XO~O",
  goto: "(e#tPPPPPPPPPPPPPPPPPPPPPPPPPPPP#u$e$q$}%T%a%dP%j%s$eP%v&VPPPPPPPPPPP$e&a&mP&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m&m$eP&y$e$eP$e$e'Y$e'f'u(U(X(_PPP$eP(bQSOQ!tXQ!uYQ#O!gQ#p#UQ#q#VQ#r#WQ#s#XQ#t#YR$O#ke_OXY!g#U#V#W#X#Y#keROXY!g#U#V#W#X#Y#kQ!hRR#Q!iQ!|!fQ#m#RQ$P#nR$W$QR#h!{Q#i!{R$U#|Q!iRQ!rUR#Q!hR!}!gQ#U!jQ#V!kQ#W!lQ#X!mR#Y!nY#S!j!k!l!m!nR#o#TeUOXY!g#U#V#W#X#Y#keTOXY!g#U#V#W#X#Y#kd_OXY!g#U#V#W#X#Y#kR#`!qeYOXY!g#U#V#W#X#Y#kd]OXY!g#U#V#W#X#Y#kR!ePd^OXY!g#U#V#W#X#Y#kR!z]R!w[Q!x[R#z#eR#d!vR#a!q",
  nodeNames: "âš  Bool Ignoring On GroupLeft GroupRight Offset Avg Bottomk Count CountValues Group Max Min Quantile Stddev Stdvar Sum Topk By Without And Or Unless Start End LineComment PromQL Expr AggregateExpr AggregateOp AggregateModifier GroupingLabels GroupingLabelList GroupingLabel LabelName FunctionCallBody FunctionCallArgs BinaryExpr Pow BinModifiers OnOrIgnoring Mul Div Mod Add Sub Eql Gte Gtr Lte Lss Neq FunctionCall FunctionIdentifier AbsentOverTime Identifier Absent Abs AvgOverTime Ceil Changes Clamp ClampMax ClampMin CountOverTime DaysInMonth DayOfMonth DayOfWeek Delta Deriv Exp Floor HistogramQuantile HoltWinters Hour Idelta Increase Irate LabelReplace LabelJoin LastOverTime Ln Log10 Log2 MaxOverTime MinOverTime Minute Month PredictLinear PresentOverTime QuantileOverTime Rate Resets Round Scalar Sgn Sort SortDesc Sqrt StddevOverTime StdvarOverTime SumOverTime Timestamp Time Vector Year MatrixSelector Duration NumberLiteral OffsetExpr ParenExpr StringLiteral SubqueryExpr UnaryExpr UnaryOp VectorSelector MetricIdentifier LabelMatchers LabelMatchList LabelMatcher MatchOp EqlSingle EqlRegex NeqRegex StepInvariantExpr At AtModifierPreprocessors MetricName",
  maxTerm: 195,
  skippedNodes: [0,26],
  repeatNodeCount: 0,
  tokenData: "! j~RwX^#lpq#lqr$ars$tst%huv%swx%xxy&gyz&lz{&q{|&v|}&}}!O'S!O!P'Z!P!Q(Z!Q!R(`!R![)f![!]LZ!^!_MV!_!`Md!`!aMy!b!cNW!c!}N]!}#ONs#P#QNx#Q#RN}#R#SN]#S#T! S#T#oN]#o#p! `#q#r! e#y#z#l$f$g#l#BY#BZ#l$IS$I_#l$I|$JO#l$JT$JU#l$KV$KW#l&FU&FV#l~#qY#y~X^#lpq#l#y#z#l$f$g#l#BY#BZ#l$IS$I_#l$I|$JO#l$JT$JU#l$KV$KW#l&FU&FV#l~$dQ!_!`$j#r#s$o~$oO!U~~$tO#p~~$yU#d~OY$tZr$trs%]s#O$t#O#P%b#P~$t~%bO#d~~%ePO~$t~%mQj~OY%hZ~%h~%xO|~~%}U#d~OY%xZw%xwx%]x#O%x#O#P&a#P~%x~&dPO~%x~&lO#z~~&qO#|~~&vOz~R&}O%VP}Q~'SO#{~R'ZO%UP!OQP'^P!Q!['aP'fR%WP!Q!['a!g!h'o#X#Y'oP'rR{|'{}!O'{!Q![(RP(OP!Q![(RP(WP%WP!Q![(R~(`O{~R(eZ%WP!O!P)W!Q![)f!g!h'o#W#X*Z#X#Y'o#[#].i#a#b0l#g#h1r#k#l2Z#l#mKo#m#n:pP)]R%WP!Q![)W!g!h'o#X#Y'oR)kY%WP!O!P)W!Q![)f!g!h'o#W#X*Z#X#Y'o#[#].i#a#b0l#g#h1r#k#l2Z#m#n:pQ*`P#`Q!Q![*cQ*fS!Q![*c#[#]*r#a#b,z#g#h.QQ*wP#`Q!Q![*zQ*}R!Q![*z#a#b+W#g#h,cQ+]Q#`Q!Q![+c#g#h+uQ+fR!Q![+c#a#b+o#g#h+zQ+rP#g#h+uQ+zO#`QQ,PP#`Q!Q![,SQ,VQ!Q![,S#a#b,]Q,`P#g#h+uQ,hP#`Q!Q![,kQ,nQ!Q![,k#a#b,tQ,wP#g#h+uQ-PQ#`Q!Q![-V#g#h+uQ-YR!Q![-V#a#b-c#g#h-iQ-fP#g#h+uQ-nP#`Q!Q![-qQ-tQ!Q![-q#a#b-zQ-}P#g#h+uQ.VP#`Q!Q![.YQ.]Q!Q![.Y#a#b.cQ.fP#g#h+uQ.nP#`Q!Q![.qQ.tR!Q![.q#a#b.}#g#h0TQ/SQ#`Q!Q![/Y#g#h+uQ/]R!Q![/Y#a#b/f#g#h/lQ/iP#g#h+uQ/qP#`Q!Q![/tQ/wQ!Q![/t#a#b/}Q0QP#g#h+uQ0YP#`Q!Q![0]Q0`Q!Q![0]#a#b0fQ0iP#g#h+uQ0qQ#`Q!Q![0w#g#h+uQ0zR!Q![0w#a#b1T#g#h1ZQ1WP#g#h+uQ1`P#`Q!Q![1cQ1fQ!Q![1c#a#b1lQ1oP#g#h+uQ1wP#`Q!Q![1zQ1}Q!Q![1z#a#b2TQ2WP#g#h+uQ2`P#`Q!Q![2cQ2fT!Q![2c#W#X2u#[#]7O#a#b9R#g#h:XQ2zP#`Q!Q![2}Q3QS!Q![2}#[#]3^#a#b5a#g#h6gQ3cP#`Q!Q![3fQ3iR!Q![3f#a#b3r#g#h4xQ3wQ#`Q!Q![3}#g#h+uQ4QR!Q![3}#a#b4Z#g#h4aQ4^P#g#h+uQ4fP#`Q!Q![4iQ4lQ!Q![4i#a#b4rQ4uP#g#h+uQ4}P#`Q!Q![5QQ5TQ!Q![5Q#a#b5ZQ5^P#g#h+uQ5fQ#`Q!Q![5l#g#h+uQ5oR!Q![5l#a#b5x#g#h6OQ5{P#g#h+uQ6TP#`Q!Q![6WQ6ZQ!Q![6W#a#b6aQ6dP#g#h+uQ6lP#`Q!Q![6oQ6rQ!Q![6o#a#b6xQ6{P#g#h+uQ7TP#`Q!Q![7WQ7ZR!Q![7W#a#b7d#g#h8jQ7iQ#`Q!Q![7o#g#h+uQ7rR!Q![7o#a#b7{#g#h8RQ8OP#g#h+uQ8WP#`Q!Q![8ZQ8^Q!Q![8Z#a#b8dQ8gP#g#h+uQ8oP#`Q!Q![8rQ8uQ!Q![8r#a#b8{Q9OP#g#h+uQ9WQ#`Q!Q![9^#g#h+uQ9aR!Q![9^#a#b9j#g#h9pQ9mP#g#h+uQ9uP#`Q!Q![9xQ9{Q!Q![9x#a#b:RQ:UP#g#h+uQ:^P#`Q!Q![:aQ:dQ!Q![:a#a#b:jQ:mP#g#h+uQ:uP#`Q!Q![:xQ:{U!Q![:x#W#X;_#[#]?h#a#bAk#g#hBq#k#lCYQ;dP#`Q!Q![;gQ;jS!Q![;g#[#];v#a#b=y#g#h?PQ;{P#`Q!Q![<OQ<RR!Q![<O#a#b<[#g#h=bQ<aQ#`Q!Q![<g#g#h+uQ<jR!Q![<g#a#b<s#g#h<yQ<vP#g#h+uQ=OP#`Q!Q![=RQ=UQ!Q![=R#a#b=[Q=_P#g#h+uQ=gP#`Q!Q![=jQ=mQ!Q![=j#a#b=sQ=vP#g#h+uQ>OQ#`Q!Q![>U#g#h+uQ>XR!Q![>U#a#b>b#g#h>hQ>eP#g#h+uQ>mP#`Q!Q![>pQ>sQ!Q![>p#a#b>yQ>|P#g#h+uQ?UP#`Q!Q![?XQ?[Q!Q![?X#a#b?bQ?eP#g#h+uQ?mP#`Q!Q![?pQ?sR!Q![?p#a#b?|#g#hASQ@RQ#`Q!Q![@X#g#h+uQ@[R!Q![@X#a#b@e#g#h@kQ@hP#g#h+uQ@pP#`Q!Q![@sQ@vQ!Q![@s#a#b@|QAPP#g#h+uQAXP#`Q!Q![A[QA_Q!Q![A[#a#bAeQAhP#g#h+uQApQ#`Q!Q![Av#g#h+uQAyR!Q![Av#a#bBS#g#hBYQBVP#g#h+uQB_P#`Q!Q![BbQBeQ!Q![Bb#a#bBkQBnP#g#h+uQBvP#`Q!Q![ByQB|Q!Q![By#a#bCSQCVP#g#h+uQC_P#`Q!Q![CbQCeT!Q![Cb#W#XCt#[#]G}#a#bJQ#g#hKWQCyP#`Q!Q![C|QDPS!Q![C|#[#]D]#a#bF`#g#hGfQDbP#`Q!Q![DeQDhR!Q![De#a#bDq#g#hEwQDvQ#`Q!Q![D|#g#h+uQEPR!Q![D|#a#bEY#g#hE`QE]P#g#h+uQEeP#`Q!Q![EhQEkQ!Q![Eh#a#bEqQEtP#g#h+uQE|P#`Q!Q![FPQFSQ!Q![FP#a#bFYQF]P#g#h+uQFeQ#`Q!Q![Fk#g#h+uQFnR!Q![Fk#a#bFw#g#hF}QFzP#g#h+uQGSP#`Q!Q![GVQGYQ!Q![GV#a#bG`QGcP#g#h+uQGkP#`Q!Q![GnQGqQ!Q![Gn#a#bGwQGzP#g#h+uQHSP#`Q!Q![HVQHYR!Q![HV#a#bHc#g#hIiQHhQ#`Q!Q![Hn#g#h+uQHqR!Q![Hn#a#bHz#g#hIQQH}P#g#h+uQIVP#`Q!Q![IYQI]Q!Q![IY#a#bIcQIfP#g#h+uQInP#`Q!Q![IqQItQ!Q![Iq#a#bIzQI}P#g#h+uQJVQ#`Q!Q![J]#g#h+uQJ`R!Q![J]#a#bJi#g#hJoQJlP#g#h+uQJtP#`Q!Q![JwQJzQ!Q![Jw#a#bKQQKTP#g#h+uQK]P#`Q!Q![K`QKcQ!Q![K`#a#bKiQKlP#g#h+uPKrR!Q![K{!c!iK{#T#ZK{PLQR%WP!Q![K{!c!iK{#T#ZK{VLbT%XS!YR!Q![Lq![!]Lq!c!}Lq#R#SLq#T#oLqRLvT!YR!Q![Lq![!]Lq!c!}Lq#R#SLq#T#oLq~M[P!T~!_!`M_~MdO!S~~MiQ#nP!_!`Mo#r#sMtQMtO!PQ~MyO#o~~NOP!R~!_!`NR~NWO!Q~~N]O#r~VNdT!YRsS!Q![N]![!]Lq!c!}N]#R#SN]#T#oN]~NxO%S~~N}O%T~~! SOw~~! VRO#S! S#S#T%]#T~! S~! eO%Y~~! jO%Z~",
  tokenizers: [0, 1, 2],
  topRules: {"PromQL":[0,27],"MetricName":[1,128]},
  specialized: [{term: 56, get: (value, stack) => (specializeIdentifier(value) << 1)},{term: 56, get: (value, stack) => (extendIdentifier(value) << 1) | 1},{term: 56, get: value => spec_Identifier[value] || -1}],
  tokenPrec: 0
});
// This file was generated by lezer-generator. You probably shouldn't edit it.
const 
  inf$1 = 130,
  nan$1 = 131,
  Bool$1 = 1,
  Ignoring$1 = 2,
  On$1 = 3,
  GroupLeft$1 = 4,
  GroupRight$1 = 5,
  Offset$1 = 6,
  Avg$1 = 7,
  Bottomk$1 = 8,
  Count$1 = 9,
  CountValues$1 = 10,
  Group$1 = 11,
  Max$1 = 12,
  Min$1 = 13,
  Quantile$1 = 14,
  Stddev$1 = 15,
  Stdvar$1 = 16,
  Sum$1 = 17,
  Topk$1 = 18,
  By$1 = 19,
  Without$1 = 20,
  And$1 = 21,
  Or$1 = 22,
  Unless$1 = 23,
  Start$1 = 24,
  End$1 = 25,
  LineComment = 26,
  PromQL = 27,
  Expr = 28,
  AggregateExpr = 29,
  AggregateOp = 30,
  AggregateModifier = 31,
  GroupingLabels = 32,
  GroupingLabelList = 33,
  GroupingLabel = 34,
  LabelName = 35,
  FunctionCallBody = 36,
  FunctionCallArgs = 37,
  BinaryExpr = 38,
  Pow = 39,
  BinModifiers = 40,
  OnOrIgnoring = 41,
  Mul = 42,
  Div = 43,
  Mod = 44,
  Add = 45,
  Sub = 46,
  Eql = 47,
  Gte = 48,
  Gtr = 49,
  Lte = 50,
  Lss = 51,
  Neq = 52,
  FunctionCall = 53,
  FunctionIdentifier = 54,
  AbsentOverTime = 55,
  Identifier = 56,
  Absent = 57,
  Abs = 58,
  AvgOverTime = 59,
  Ceil = 60,
  Changes = 61,
  Clamp = 62,
  ClampMax = 63,
  ClampMin = 64,
  CountOverTime = 65,
  DaysInMonth = 66,
  DayOfMonth = 67,
  DayOfWeek = 68,
  Delta = 69,
  Deriv = 70,
  Exp = 71,
  Floor = 72,
  HistogramQuantile = 73,
  HoltWinters = 74,
  Hour = 75,
  Idelta = 76,
  Increase = 77,
  Irate = 78,
  LabelReplace = 79,
  LabelJoin = 80,
  LastOverTime = 81,
  Ln = 82,
  Log10 = 83,
  Log2 = 84,
  MaxOverTime = 85,
  MinOverTime = 86,
  Minute = 87,
  Month = 88,
  PredictLinear = 89,
  PresentOverTime = 90,
  QuantileOverTime = 91,
  Rate = 92,
  Resets = 93,
  Round = 94,
  Scalar = 95,
  Sgn = 96,
  Sort = 97,
  SortDesc = 98,
  Sqrt = 99,
  StddevOverTime = 100,
  StdvarOverTime = 101,
  SumOverTime = 102,
  Timestamp = 103,
  Time = 104,
  Vector = 105,
  Year = 106,
  MatrixSelector = 107,
  Duration = 108,
  NumberLiteral = 109,
  OffsetExpr = 110,
  ParenExpr = 111,
  StringLiteral = 112,
  SubqueryExpr = 113,
  UnaryExpr = 114,
  UnaryOp = 115,
  VectorSelector = 116,
  MetricIdentifier = 117,
  LabelMatchers = 118,
  LabelMatchList = 119,
  LabelMatcher = 120,
  MatchOp = 121,
  EqlSingle = 122,
  EqlRegex = 123,
  NeqRegex = 124,
  StepInvariantExpr = 125,
  At = 126,
  AtModifierPreprocessors = 127,
  MetricName = 128;

export { Abs, Absent, AbsentOverTime, Add, AggregateExpr, AggregateModifier, AggregateOp, And$1 as And, At, AtModifierPreprocessors, Avg$1 as Avg, AvgOverTime, BinModifiers, BinaryExpr, Bool$1 as Bool, Bottomk$1 as Bottomk, By$1 as By, Ceil, Changes, Clamp, ClampMax, ClampMin, Count$1 as Count, CountOverTime, CountValues$1 as CountValues, DayOfMonth, DayOfWeek, DaysInMonth, Delta, Deriv, Div, Duration, End$1 as End, Eql, EqlRegex, EqlSingle, Exp, Expr, Floor, FunctionCall, FunctionCallArgs, FunctionCallBody, FunctionIdentifier, Group$1 as Group, GroupLeft$1 as GroupLeft, GroupRight$1 as GroupRight, GroupingLabel, GroupingLabelList, GroupingLabels, Gte, Gtr, HistogramQuantile, HoltWinters, Hour, Idelta, Identifier, Ignoring$1 as Ignoring, Increase, Irate, LabelJoin, LabelMatchList, LabelMatcher, LabelMatchers, LabelName, LabelReplace, LastOverTime, LineComment, Ln, Log10, Log2, Lss, Lte, MatchOp, MatrixSelector, Max$1 as Max, MaxOverTime, MetricIdentifier, MetricName, Min$1 as Min, MinOverTime, Minute, Mod, Month, Mul, Neq, NeqRegex, NumberLiteral, Offset$1 as Offset, OffsetExpr, On$1 as On, OnOrIgnoring, Or$1 as Or, ParenExpr, Pow, PredictLinear, PresentOverTime, PromQL, Quantile$1 as Quantile, QuantileOverTime, Rate, Resets, Round, Scalar, Sgn, Sort, SortDesc, Sqrt, Start$1 as Start, Stddev$1 as Stddev, StddevOverTime, Stdvar$1 as Stdvar, StdvarOverTime, StepInvariantExpr, StringLiteral, Sub, SubqueryExpr, Sum$1 as Sum, SumOverTime, Time, Timestamp, Topk$1 as Topk, UnaryExpr, UnaryOp, Unless$1 as Unless, Vector, VectorSelector, Without$1 as Without, Year, inf$1 as inf, nan$1 as nan, parser };
