'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var lezer = require('lezer');

// This file was generated by lezer-generator. You probably shouldn't edit it.
const 
  Bool = 1,
  Ignoring = 2,
  On = 3,
  GroupLeft = 4,
  GroupRight = 5,
  Offset = 6,
  Avg = 7,
  Bottomk = 8,
  Count = 9,
  CountValues = 10,
  Group = 11,
  Max = 12,
  Min = 13,
  Quantile = 14,
  Stddev = 15,
  Stdvar = 16,
  Sum = 17,
  Topk = 18,
  By = 19,
  Without = 20,
  And = 21,
  Or = 22,
  Unless = 23;

// Copyright 2021 PromLabs GmbH

const keywordTokens = {
  bool: Bool,
  ignoring: Ignoring,
  on: On,
  group_left: GroupLeft,
  group_right: GroupRight,
  offset: Offset,
};

const specializeIdentifier = (value, stack) => {
  return keywordTokens[value.toLowerCase()] || -1;
};

const contextualKeywordTokens = {
  avg: Avg,
  bottomk: Bottomk,
  count: Count,
  count_values: CountValues,
  group: Group,
  max: Max,
  min: Min,
  quantile: Quantile,
  stddev: Stddev,
  stdvar: Stdvar,
  sum: Sum,
  topk: Topk,
  by: By,
  without: Without,
  and: And,
  or: Or,
  unless: Unless,
};

const extendIdentifier = (value, stack) => {
  return contextualKeywordTokens[value.toLowerCase()] || -1;
};

// This file was generated by lezer-generator. You probably shouldn't edit it.
const spec_Identifier = {__proto__:null,absent_over_time:269, absent:271, abs:273, avg_over_time:275, ceil:277, changes:279, clamp:281, clamp_max:283, clamp_min:285, count_over_time:287, days_in_month:289, day_of_month:291, day_of_week:293, delta:295, deriv:297, exp:299, floor:301, histogram_quantile:303, holt_winters:305, hour:307, idelta:309, increase:311, irate:313, label_replace:315, label_join:317, last_over_time:319, ln:321, log10:323, log2:325, max_over_time:327, min_over_time:329, minute:331, month:333, predict_linear:335, quantile_over_time:337, rate:339, resets:341, round:343, scalar:345, sgn:347, sort:349, sort_desc:351, sqrt:353, stddev_over_time:355, stdvar_over_time:357, sum_over_time:359, timestamp:361, time:363, vector:365, year:367};
const parser = lezer.Parser.deserialize({
  version: 13,
  states: "3tOYQPOOOOQO'#Cx'#CxO%sQPO'#CwQ&OQQOOOOQO'#Db'#DbO%yQPO'#DaOYQPO'#ElOOQO'#Ep'#EpOYQPO'#EoOOQO'#Er'#ErO'YQSO'#EsO'bQQO'#EqOOQO'#Eq'#EqOOQO'#Cv'#CvOOQO'#Dc'#DcOOQO'#De'#DeOOQO'#Df'#DfOOQO'#Dg'#DgOOQO'#Dh'#DhOOQO'#Di'#DiOOQO'#Dj'#DjOOQO'#Dk'#DkOOQO'#Dl'#DlOOQO'#Dm'#DmOOQO'#Dn'#DnOOQO'#Do'#DoOOQO'#Dp'#DpOOQO'#Dq'#DqOOQO'#Dr'#DrOOQO'#Ds'#DsOOQO'#Dt'#DtOOQO'#Du'#DuOOQO'#Dv'#DvOOQO'#Dw'#DwOOQO'#Dx'#DxOOQO'#Dy'#DyOOQO'#Dz'#DzOOQO'#D{'#D{OOQO'#D|'#D|OOQO'#D}'#D}OOQO'#EO'#EOOOQO'#EP'#EPOOQO'#EQ'#EQOOQO'#ER'#EROOQO'#ES'#ESOOQO'#ET'#ETOOQO'#EU'#EUOOQO'#EV'#EVOOQO'#EW'#EWOOQO'#EX'#EXOOQO'#EY'#EYOOQO'#EZ'#EZOOQO'#E['#E[OOQO'#E]'#E]OOQO'#E^'#E^OOQO'#E_'#E_OOQO'#E`'#E`OOQO'#Ea'#EaOOQO'#Eb'#EbOOQO'#Ec'#EcOOQO'#Ed'#EdOOQO'#Ee'#EeOOQO'#Ef'#EfOOQO'#Eg'#EgO(xQPO'#CyO(}QPO'#DOO%yQPO,59cO)UQQO,59cO*oQPO,59lO*oQPO,59lO*oQPO,59lO*oQPO,59lO*oQPO,59lO/cQQO,5;SO/hQQO,5;VO/pQWO,5;fOOQO,59{,59{O0RQQO,5;WO0YQQO,5;ZO1mQPO'#EuO1{QPO,5;_OOQO'#Et'#EtOOQO,5;_,5;_OOQO,5;],5;]O2TQSO'#CzOOQO,59e,59eO2]QPO,59jO2eQQO'#DPOOQO,59j,59jOOQO1G.}1G.}O(xQPO'#DTO7YQPO'#DSO7dQPO'#DSOYQPO1G/WOYQPO1G/WOYQPO1G/WOYQPO1G/WOYQPO1G/WO7nQSO1G0nOOQO1G0q1G0qO7vQQO1G0qO7{QPO'#E|OOQO'#E}'#E}OOQO1G1Q1G1QO8QQPO1G1QOOQO1G0r1G0rOOQO'#Ev'#EvO8VQPO,5;aO8[QSO1G0yOOQO1G0y1G0yOOQO'#C|'#C|O8dQPO,59fOOQO'#C{'#C{OOQO,59f,59fOYQPO,59kOOQO1G/U1G/UOOQO,59o,59oO=SQPO,59nO=ZQPO,59nO>rQQO7+$rO?PQQO7+$rO@_QQO7+$rO@uQQO7+$rOBZQQO7+$rOOQO7+&Y7+&YOBtQQO7+&`OOQO7+&]7+&]OOQO,5;h,5;hOB|QPO7+&lOOQO1G0{1G0{OOQO1G0z1G0zOOQO7+&e7+&eOCRQSO1G/QOOQO1G/Q1G/QOCZQQO1G/VOOQO1G/Y1G/YOCeQPO1G/YOOQO<<Iz<<IzOHOQPO<<IzOOQO<<JW<<JWOOQO1G/R1G/ROOQO7+$l7+$lOOQO7+$t7+$tOOQOAN?fAN?f",
  stateData: "HZ~O#vOShOS~OVPOWPOXPOYPOZPO[PO]PO^PO_PO`POaPObPO!WXO#^]O#a]O#wUO#z^O#{_O#|`O#}aO$ObO$PcO$QdO$ReO$SfO$TgO$UhO$ViO$WjO$XkO$YlO$ZmO$[nO$]oO$^pO$_qO$`rO$asO$btO$cuO$dvO$ewO$fxO$gyO$hzO$i{O$j|O$k}O$l!OO$m!PO$n!QO$o!RO$p!SO$q!TO$r!UO$s!VO$t!WO$u!XO$v!YO$w!ZO$x![O$y!]O$z!^O${!_O$|!`O$}!aO%RVO%SVO%TYO~Oc!bOd!bO#w!cO~OU!lOe!iOf!jOg!iOu!fOx!fOy!fOz!fO{!gO|!gO}!hO!O!hO!P!hO!Q!hO!R!hO!S!hO#o!mO%O!kO~Oq!qO%U!tO~O%TYOU#eXe#eXf#eXg#eXu#eXx#eXy#eXz#eX{#eX|#eX}#eX!O#eX!P#eX!Q#eX!R#eX!S#eX#o#eX#t#eX%O#eX#y#eX#x#eX~O#w!vO~O#y!zO~PYOc!bOd!bOUkaekafkagkaukaxkaykazka{ka|ka}ka!Oka!Pka!Qka!Rka!Ska#oka#tka%Oka#yka#xka~OP#OOQ!|OR!|OVvPWvPXvPYvPZvP[vP]vP^vP_vP`vPavPbvP!WvP#^vP#avP#wvP#zvP#{vP#|vP#}vP$OvP$PvP$QvP$RvP$SvP$TvP$UvP$VvP$WvP$XvP$YvP$ZvP$[vP$]vP$^vP$_vP$`vP$avP$bvP$cvP$dvP$evP$fvP$gvP$hvP$ivP$jvP$kvP$lvP$mvP$nvP$ovP$pvP$qvP$rvP$svP$tvP$uvP$vvP$wvP$xvP$yvP$zvP${vP$|vP$}vP%RvP%SvP%TvP~O#]#UO~O|#WO#]#VO~O#^#ZO#r#YO#s#YO%R#XO%S#XO~O#y#]O~P&OOu!fOU#cae#caf#cag#cax#cay#caz#ca{#ca|#ca}#ca!O#ca!P#ca!Q#ca!R#ca!S#ca#o#ca#t#ca%O#ca#y#ca#x#ca~O!S#^O#k#^O#l#^O#m#^O~O#x#`O%U#aO~Oq#bO#y#eO~O#x#fO#y#gO~O#xsX#ysX~P&OOVvXWvXXvXYvXZvX[vX]vX^vX_vX`vXavXbvX!WvX#^vX#avX#wvX#zvX#{vX#|vX#}vX$OvX$PvX$QvX$RvX$SvX$TvX$UvX$VvX$WvX$XvX$YvX$ZvX$[vX$]vX$^vX$_vX$`vX$avX$bvX$cvX$dvX$evX$fvX$gvX$hvX$ivX$jvX$kvX$lvX$mvX$nvX$ovX$pvX$qvX$rvX$svX$tvX$uvX$vvX$wvX$xvX$yvX$zvX${vX$|vX$}vX%RvX%SvX%TvX~OS#iOT#iO~P2oOQ!|OR!|O~P2oO%P#pO%Q#qO~O#]#rO~O#^#sO~O#w#tO~O#a#uO~Oq!qO%U#wO~O#x#xO#y#yO~OVvaWvaXvaYvaZva[va]va^va_va`vaavabva!Wva#^va#ava#zva#{va#|va#}va$Ova$Pva$Qva$Rva$Sva$Tva$Uva$Vva$Wva$Xva$Yva$Zva$[va$]va$^va$_va$`va$ava$bva$cva$dva$eva$fva$gva$hva$iva$jva$kva$lva$mva$nva$ova$pva$qva$rva$sva$tva$uva$vva$wva$xva$yva$zva${va$|va$}va%Rva%Sva%Tva~O#w!vO~P8lOS#|OT#|O#wva~P8lOu!fOUtqetqftqgtq{tq|tq}tq!Otq!Ptq!Qtq!Rtq!Stq#otq#ttq%Otq#ytq#xtq~Oxtqytqztq~P=hOx!fOy!fOz!fO~P=hOu!fOx!fOy!fOz!fO{!gO|!gOUtqetqftqgtq#otq#ttq%Otq#ytq#xtq~O}tq!Otq!Ptq!Qtq!Rtq!Stq~P?^O}!hO!O!hO!P!hO!Q!hO!R!hO!S!hO~P?^Oe!iOg!iOu!fOx!fOy!fOz!fO{!gO|!gO}!hO!O!hO!P!hO!Q!hO!R!hO!S!hO~OUtqftq#otq#ttq%Otq#ytq#xtq~PA]O#]$OO%P#}O~O#y$PO~Oq#bO#y$RO~O#xsi#ysi~P&OO#w!vOVviWviXviYviZvi[vi]vi^vi_vi`viavibvi!Wvi#^vi#avi#zvi#{vi#|vi#}vi$Ovi$Pvi$Qvi$Rvi$Svi$Tvi$Uvi$Vvi$Wvi$Xvi$Yvi$Zvi$[vi$]vi$^vi$_vi$`vi$avi$bvi$cvi$dvi$evi$fvi$gvi$hvi$ivi$jvi$kvi$lvi$mvi$nvi$ovi$pvi$qvi$rvi$svi$tvi$uvi$vvi$wvi$xvi$yvi$zvi${vi$|vi$}vi%Rvi%Svi%Tvi~O%P$TO~O#^!W%S%R%S~",
  goto: "(S#rPPPPPPPPPPPPPPPPPPPPPPPPPP#s$c$o${%R%_%bP%h%q$cP%t&TPPPPPPPPPPP$c&_&kP&k&k&k&k&k&k&k&k&k&k&k&k&k&k&k&k&k&k&k&k&k&k&k&k&k&k&k&k&k&k&k&k&k&k&k&k&k&k&k&k&k&k&k&k&k&k&k&k&k$cPP$c$cP$c$c&w$c'T'a'p's'yPPP$cP'|(PQROQ!oUQ!pWQ!y!cQ#k#PQ#l#QQ#m#RQ#n#SQ#o#TR#z#fe]OUW!c#P#Q#R#S#T#feQOUW!c#P#Q#R#S#T#fQ!dQR!{!eQ!w!bQ#h!|Q#{#iR$S#|R#c!vQ#d!vR$Q#xQ!eQQ!nTR!{!dR!x!cQ#P!fQ#Q!gQ#R!hQ#S!iR#T!jY!}!f!g!h!i!jR#j#OeTOUW!c#P#Q#R#S#T#feSOUW!c#P#Q#R#S#T#feWOUW!c#P#Q#R#S#T#feZOUW!c#P#Q#R#S#T#fd[OUW!c#P#Q#R#S#T#fR!uZR!rYQ!sYR#v#`R#_!qR#Z!mR#[!m",
  nodeNames: "âš  Bool Ignoring On GroupLeft GroupRight Offset Avg Bottomk Count CountValues Group Max Min Quantile Stddev Stdvar Sum Topk By Without And Or Unless LineComment PromQL Expr AggregateExpr AggregateOp AggregateModifier GroupingLabels GroupingLabelList GroupingLabel LabelName FunctionCallBody FunctionCallArgs BinaryExpr Pow BinModifiers OnOrIgnoring Mul Div Mod Add Sub Eql Gte Gtr Lte Lss Neq FunctionCall FunctionIdentifier AbsentOverTime Identifier Absent Abs AvgOverTime Ceil Changes Clamp ClampMax ClampMin CountOverTime DaysInMonth DayOfMonth DayOfWeek Delta Deriv Exp Floor HistogramQuantile HoltWinters Hour Idelta Increase Irate LabelReplace LabelJoin LastOverTime Ln Log10 Log2 MaxOverTime MinOverTime Minute Month PredictLinear QuantileOverTime Rate Resets Round Scalar Sgn Sort SortDesc Sqrt StddevOverTime StdvarOverTime SumOverTime Timestamp Time Vector Year MatrixSelector Duration NumberLiteral OffsetExpr ParenExpr StringLiteral SubqueryExpr UnaryExpr UnaryOp VectorSelector MetricIdentifier LabelMatchers LabelMatchList LabelMatcher MatchOp EqlSingle EqlRegex NeqRegex StepInvariantExpr At SignedNumber AtModifierPreprocessors Start End",
  maxTerm: 190,
  skippedNodes: [0,24],
  repeatNodeCount: 0,
  tokenData: "!,{~R!TX^$bpq$bqr%Vrs%jst&^uv&iwx&nxy']yz'bz{'g{|'l|}+t}!O+y!O!P(Y!P!Q,g!Q!R,l!R![-d![!]! m!^!_!!i!_!`!!v!`!a!#]!b!c!#j!c!k!#o!k!l!$V!l!p!#o!p!q!&V!q!}!#o!}#O!'g#P#Q!'l#Q#R!'q#R#S!#o#S#T!'v#T#X!#o#X#Y!(S#Y#]!#o#]#^!$V#^#b!#o#b#c!&V#c#g!#o#g#h!)v#h#o!#o#o#p!,q#q#r!,v#y#z$b$f$g$b#BY#BZ$b$IS$I_$b$I|$JO$b$JT$JU$b$KV$KW$b&FU&FV$b~$gY#v~X^$bpq$b#y#z$b$f$g$b#BY#BZ$b$IS$I_$b$I|$JO$b$JT$JU$b$KV$KW$b&FU&FV$b~%YQ!_!`%`#r#s%e~%eO!S~~%jO#m~~%oU#a~OY%jZr%jrs&Rs#O%j#O#P&W#P~%j~&WO#a~~&ZPO~%j~&cQh~OY&^Z~&^~&nOz~~&sU#a~OY&nZw&nwx&Rx#O&n#O#P'V#P~&n~'YPO~&n~'bO#w~~'gO#y~~'lOx~Z'sV{Q%SX!O!P(Y!Q!R)Y!R![)|!k!l*y!p!q+b#]#^*y#b#c+bX(]P!Q![(`X(eR#^X!Q![(`!g!h(n#X#Y(nX(qR{|(z}!O(z!Q![)QX(}P!Q![)QX)VP#^X!Q![)QX)_T#^X!O!P)n!Q![)|!g!h(n#X#Y(n#l#m*_X)sR#^X!Q![)n!g!h(n#X#Y(nX*RS#^X!O!P)n!Q![)|!g!h(n#X#Y(nX*bR!Q![*k!c!i*k#T#Z*kX*pR#^X!Q![*k!c!i*k#T#Z*kX*|Q!p!q+S#b#c+SX+VQ!h!i+]#Y#Z+]X+bO#^XX+eQ!c!d+k#T#U+kX+nQ!p!q+]#b#c+]~+yO#x~Z,QV|Q%RX!O!P(Y!Q!R)Y!R![)|!k!l*y!p!q+b#]#^*y#b#c+b~,lOy~Z,qZ#^X!O!P)n!Q![-d!g!h(n#W#X.X#X#Y(n#[#]2g#a#b4j#g#h5p#k#l6X#l#m*_#m#n>nZ-iY#^X!O!P)n!Q![-d!g!h(n#W#X.X#X#Y(n#[#]2g#a#b4j#g#h5p#k#l6X#m#n>nQ.^P#]Q!Q![.aQ.dS!Q![.a#[#].p#a#b0x#g#h2OQ.uP#]Q!Q![.xQ.{R!Q![.x#a#b/U#g#h0aQ/ZQ#]Q!Q![/a#g#h/sQ/dR!Q![/a#a#b/m#g#h/xQ/pP#g#h/sQ/xO#]QQ/}P#]Q!Q![0QQ0TQ!Q![0Q#a#b0ZQ0^P#g#h/sQ0fP#]Q!Q![0iQ0lQ!Q![0i#a#b0rQ0uP#g#h/sQ0}Q#]Q!Q![1T#g#h/sQ1WR!Q![1T#a#b1a#g#h1gQ1dP#g#h/sQ1lP#]Q!Q![1oQ1rQ!Q![1o#a#b1xQ1{P#g#h/sQ2TP#]Q!Q![2WQ2ZQ!Q![2W#a#b2aQ2dP#g#h/sQ2lP#]Q!Q![2oQ2rR!Q![2o#a#b2{#g#h4RQ3QQ#]Q!Q![3W#g#h/sQ3ZR!Q![3W#a#b3d#g#h3jQ3gP#g#h/sQ3oP#]Q!Q![3rQ3uQ!Q![3r#a#b3{Q4OP#g#h/sQ4WP#]Q!Q![4ZQ4^Q!Q![4Z#a#b4dQ4gP#g#h/sQ4oQ#]Q!Q![4u#g#h/sQ4xR!Q![4u#a#b5R#g#h5XQ5UP#g#h/sQ5^P#]Q!Q![5aQ5dQ!Q![5a#a#b5jQ5mP#g#h/sQ5uP#]Q!Q![5xQ5{Q!Q![5x#a#b6RQ6UP#g#h/sQ6^P#]Q!Q![6aQ6dT!Q![6a#W#X6s#[#]:|#a#b=P#g#h>VQ6xP#]Q!Q![6{Q7OS!Q![6{#[#]7[#a#b9_#g#h:eQ7aP#]Q!Q![7dQ7gR!Q![7d#a#b7p#g#h8vQ7uQ#]Q!Q![7{#g#h/sQ8OR!Q![7{#a#b8X#g#h8_Q8[P#g#h/sQ8dP#]Q!Q![8gQ8jQ!Q![8g#a#b8pQ8sP#g#h/sQ8{P#]Q!Q![9OQ9RQ!Q![9O#a#b9XQ9[P#g#h/sQ9dQ#]Q!Q![9j#g#h/sQ9mR!Q![9j#a#b9v#g#h9|Q9yP#g#h/sQ:RP#]Q!Q![:UQ:XQ!Q![:U#a#b:_Q:bP#g#h/sQ:jP#]Q!Q![:mQ:pQ!Q![:m#a#b:vQ:yP#g#h/sQ;RP#]Q!Q![;UQ;XR!Q![;U#a#b;b#g#h<hQ;gQ#]Q!Q![;m#g#h/sQ;pR!Q![;m#a#b;y#g#h<PQ;|P#g#h/sQ<UP#]Q!Q![<XQ<[Q!Q![<X#a#b<bQ<eP#g#h/sQ<mP#]Q!Q![<pQ<sQ!Q![<p#a#b<yQ<|P#g#h/sQ=UQ#]Q!Q![=[#g#h/sQ=_R!Q![=[#a#b=h#g#h=nQ=kP#g#h/sQ=sP#]Q!Q![=vQ=yQ!Q![=v#a#b>PQ>SP#g#h/sQ>[P#]Q!Q![>_Q>bQ!Q![>_#a#b>hQ>kP#g#h/sQ>sP#]Q!Q![>vQ>yU!Q![>v#W#X?]#[#]Cf#a#bEi#g#hFo#k#lGWQ?bP#]Q!Q![?eQ?hS!Q![?e#[#]?t#a#bAw#g#hB}Q?yP#]Q!Q![?|Q@PR!Q![?|#a#b@Y#g#hA`Q@_Q#]Q!Q![@e#g#h/sQ@hR!Q![@e#a#b@q#g#h@wQ@tP#g#h/sQ@|P#]Q!Q![APQASQ!Q![AP#a#bAYQA]P#g#h/sQAeP#]Q!Q![AhQAkQ!Q![Ah#a#bAqQAtP#g#h/sQA|Q#]Q!Q![BS#g#h/sQBVR!Q![BS#a#bB`#g#hBfQBcP#g#h/sQBkP#]Q!Q![BnQBqQ!Q![Bn#a#bBwQBzP#g#h/sQCSP#]Q!Q![CVQCYQ!Q![CV#a#bC`QCcP#g#h/sQCkP#]Q!Q![CnQCqR!Q![Cn#a#bCz#g#hEQQDPQ#]Q!Q![DV#g#h/sQDYR!Q![DV#a#bDc#g#hDiQDfP#g#h/sQDnP#]Q!Q![DqQDtQ!Q![Dq#a#bDzQD}P#g#h/sQEVP#]Q!Q![EYQE]Q!Q![EY#a#bEcQEfP#g#h/sQEnQ#]Q!Q![Et#g#h/sQEwR!Q![Et#a#bFQ#g#hFWQFTP#g#h/sQF]P#]Q!Q![F`QFcQ!Q![F`#a#bFiQFlP#g#h/sQFtP#]Q!Q![FwQFzQ!Q![Fw#a#bGQQGTP#g#h/sQG]P#]Q!Q![G`QGcT!Q![G`#W#XGr#[#]K{#a#bNO#g#h! UQGwP#]Q!Q![GzQG}S!Q![Gz#[#]HZ#a#bJ^#g#hKdQH`P#]Q!Q![HcQHfR!Q![Hc#a#bHo#g#hIuQHtQ#]Q!Q![Hz#g#h/sQH}R!Q![Hz#a#bIW#g#hI^QIZP#g#h/sQIcP#]Q!Q![IfQIiQ!Q![If#a#bIoQIrP#g#h/sQIzP#]Q!Q![I}QJQQ!Q![I}#a#bJWQJZP#g#h/sQJcQ#]Q!Q![Ji#g#h/sQJlR!Q![Ji#a#bJu#g#hJ{QJxP#g#h/sQKQP#]Q!Q![KTQKWQ!Q![KT#a#bK^QKaP#g#h/sQKiP#]Q!Q![KlQKoQ!Q![Kl#a#bKuQKxP#g#h/sQLQP#]Q!Q![LTQLWR!Q![LT#a#bLa#g#hMgQLfQ#]Q!Q![Ll#g#h/sQLoR!Q![Ll#a#bLx#g#hMOQL{P#g#h/sQMTP#]Q!Q![MWQMZQ!Q![MW#a#bMaQMdP#g#h/sQMlP#]Q!Q![MoQMrQ!Q![Mo#a#bMxQM{P#g#h/sQNTQ#]Q!Q![NZ#g#h/sQN^R!Q![NZ#a#bNg#g#hNmQNjP#g#h/sQNrP#]Q!Q![NuQNxQ!Q![Nu#a#b! OQ! RP#g#h/sQ! ZP#]Q!Q![! ^Q! aQ!Q![! ^#a#b! gQ! jP#g#h/sV! tT%QS!WR!Q![!!T![!]!!T!c!}!!T#R#S!!T#T#o!!TR!!YT!WR!Q![!!T![!]!!T!c!}!!T#R#S!!T#T#o!!T~!!nP!R~!_!`!!q~!!vO!Q~~!!{Q#kP!_!`!#R#r#s!#WQ!#WO}Q~!#]O#l~~!#bP!P~!_!`!#e~!#jO!O~~!#oO#o~V!#vTqS!WR!Q![!#o![!]!!T!c!}!#o#R#S!#o#T#o!#o_!$^XqS!WR!Q![!#o![!]!!T!c!p!#o!p!q!$y!q!}!#o#R#S!#o#T#b!#o#b#c!$y#c#o!#o_!%QXqS!WR!Q![!#o![!]!!T!c!h!#o!h!i!%m!i!}!#o#R#S!#o#T#Y!#o#Y#Z!%m#Z#o!#o_!%vTqS#^X!WR!Q![!#o![!]!!T!c!}!#o#R#S!#o#T#o!#o_!&^VqS!WR!Q![!#o![!]!!T!c!d!&s!d!}!#o#R#S!#o#T#U!&s#U#o!#o_!&zXqS!WR!Q![!#o![!]!!T!c!p!#o!p!q!%m!q!}!#o#R#S!#o#T#b!#o#b#c!%m#c#o!#o~!'lO%O~~!'qO%P~~!'vOu~~!'yRO#S!'v#S#T&R#T~!'v_!(ZVqS!WR!Q![!#o![!]!!T!c!}!#o#R#S!#o#T#b!#o#b#c!(p#c#o!#o_!(wVqS!WR!Q![!#o![!]!!T!c!}!#o#R#S!#o#T#W!#o#W#X!)^#X#o!#o_!)gT#sWqS!WR!Q![!#o![!]!!T!c!}!#o#R#S!#o#T#o!#o_!)}VqS!WR!Q![!#o![!]!!T!c!}!#o#R#S!#o#T#h!#o#h#i!*d#i#o!#o_!*kUqS!WR!Q![!#o![!]!!T!c!}!#o#R#S!#o#T#U!*}#U#o!#o_!+UVqS!WR!Q![!#o![!]!!T!c!}!#o#R#S!#o#T#f!#o#f#g!+k#g#o!#o_!+rVqS!WR!Q![!#o![!]!!T!c!}!#o#R#S!#o#T#h!#o#h#i!,X#i#o!#o_!,bTqS#rW!WR!Q![!#o![!]!!T!c!}!#o#R#S!#o#T#o!#o~!,vO%T~~!,{O%U~",
  tokenizers: [0, 1, 2, 3],
  topRules: {"PromQL":[0,25]},
  specialized: [{term: 54, get: (value, stack) => (specializeIdentifier(value) << 1)},{term: 54, get: (value, stack) => (extendIdentifier(value) << 1) | 1},{term: 54, get: value => spec_Identifier[value] || -1}],
  tokenPrec: 1799
});
// This file was generated by lezer-generator. You probably shouldn't edit it.
const 
  Bool$1 = 1,
  Ignoring$1 = 2,
  On$1 = 3,
  GroupLeft$1 = 4,
  GroupRight$1 = 5,
  Offset$1 = 6,
  Avg$1 = 7,
  Bottomk$1 = 8,
  Count$1 = 9,
  CountValues$1 = 10,
  Group$1 = 11,
  Max$1 = 12,
  Min$1 = 13,
  Quantile$1 = 14,
  Stddev$1 = 15,
  Stdvar$1 = 16,
  Sum$1 = 17,
  Topk$1 = 18,
  By$1 = 19,
  Without$1 = 20,
  And$1 = 21,
  Or$1 = 22,
  Unless$1 = 23,
  LineComment = 24,
  PromQL = 25,
  Expr = 26,
  AggregateExpr = 27,
  AggregateOp = 28,
  AggregateModifier = 29,
  GroupingLabels = 30,
  GroupingLabelList = 31,
  GroupingLabel = 32,
  LabelName = 33,
  FunctionCallBody = 34,
  FunctionCallArgs = 35,
  BinaryExpr = 36,
  Pow = 37,
  BinModifiers = 38,
  OnOrIgnoring = 39,
  Mul = 40,
  Div = 41,
  Mod = 42,
  Add = 43,
  Sub = 44,
  Eql = 45,
  Gte = 46,
  Gtr = 47,
  Lte = 48,
  Lss = 49,
  Neq = 50,
  FunctionCall = 51,
  FunctionIdentifier = 52,
  AbsentOverTime = 53,
  Identifier = 54,
  Absent = 55,
  Abs = 56,
  AvgOverTime = 57,
  Ceil = 58,
  Changes = 59,
  Clamp = 60,
  ClampMax = 61,
  ClampMin = 62,
  CountOverTime = 63,
  DaysInMonth = 64,
  DayOfMonth = 65,
  DayOfWeek = 66,
  Delta = 67,
  Deriv = 68,
  Exp = 69,
  Floor = 70,
  HistogramQuantile = 71,
  HoltWinters = 72,
  Hour = 73,
  Idelta = 74,
  Increase = 75,
  Irate = 76,
  LabelReplace = 77,
  LabelJoin = 78,
  LastOverTime = 79,
  Ln = 80,
  Log10 = 81,
  Log2 = 82,
  MaxOverTime = 83,
  MinOverTime = 84,
  Minute = 85,
  Month = 86,
  PredictLinear = 87,
  QuantileOverTime = 88,
  Rate = 89,
  Resets = 90,
  Round = 91,
  Scalar = 92,
  Sgn = 93,
  Sort = 94,
  SortDesc = 95,
  Sqrt = 96,
  StddevOverTime = 97,
  StdvarOverTime = 98,
  SumOverTime = 99,
  Timestamp = 100,
  Time = 101,
  Vector = 102,
  Year = 103,
  MatrixSelector = 104,
  Duration = 105,
  NumberLiteral = 106,
  OffsetExpr = 107,
  ParenExpr = 108,
  StringLiteral = 109,
  SubqueryExpr = 110,
  UnaryExpr = 111,
  UnaryOp = 112,
  VectorSelector = 113,
  MetricIdentifier = 114,
  LabelMatchers = 115,
  LabelMatchList = 116,
  LabelMatcher = 117,
  MatchOp = 118,
  EqlSingle = 119,
  EqlRegex = 120,
  NeqRegex = 121,
  StepInvariantExpr = 122,
  At = 123,
  SignedNumber = 124,
  AtModifierPreprocessors = 125,
  Start = 126,
  End = 127;

exports.Abs = Abs;
exports.Absent = Absent;
exports.AbsentOverTime = AbsentOverTime;
exports.Add = Add;
exports.AggregateExpr = AggregateExpr;
exports.AggregateModifier = AggregateModifier;
exports.AggregateOp = AggregateOp;
exports.And = And$1;
exports.At = At;
exports.AtModifierPreprocessors = AtModifierPreprocessors;
exports.Avg = Avg$1;
exports.AvgOverTime = AvgOverTime;
exports.BinModifiers = BinModifiers;
exports.BinaryExpr = BinaryExpr;
exports.Bool = Bool$1;
exports.Bottomk = Bottomk$1;
exports.By = By$1;
exports.Ceil = Ceil;
exports.Changes = Changes;
exports.Clamp = Clamp;
exports.ClampMax = ClampMax;
exports.ClampMin = ClampMin;
exports.Count = Count$1;
exports.CountOverTime = CountOverTime;
exports.CountValues = CountValues$1;
exports.DayOfMonth = DayOfMonth;
exports.DayOfWeek = DayOfWeek;
exports.DaysInMonth = DaysInMonth;
exports.Delta = Delta;
exports.Deriv = Deriv;
exports.Div = Div;
exports.Duration = Duration;
exports.End = End;
exports.Eql = Eql;
exports.EqlRegex = EqlRegex;
exports.EqlSingle = EqlSingle;
exports.Exp = Exp;
exports.Expr = Expr;
exports.Floor = Floor;
exports.FunctionCall = FunctionCall;
exports.FunctionCallArgs = FunctionCallArgs;
exports.FunctionCallBody = FunctionCallBody;
exports.FunctionIdentifier = FunctionIdentifier;
exports.Group = Group$1;
exports.GroupLeft = GroupLeft$1;
exports.GroupRight = GroupRight$1;
exports.GroupingLabel = GroupingLabel;
exports.GroupingLabelList = GroupingLabelList;
exports.GroupingLabels = GroupingLabels;
exports.Gte = Gte;
exports.Gtr = Gtr;
exports.HistogramQuantile = HistogramQuantile;
exports.HoltWinters = HoltWinters;
exports.Hour = Hour;
exports.Idelta = Idelta;
exports.Identifier = Identifier;
exports.Ignoring = Ignoring$1;
exports.Increase = Increase;
exports.Irate = Irate;
exports.LabelJoin = LabelJoin;
exports.LabelMatchList = LabelMatchList;
exports.LabelMatcher = LabelMatcher;
exports.LabelMatchers = LabelMatchers;
exports.LabelName = LabelName;
exports.LabelReplace = LabelReplace;
exports.LastOverTime = LastOverTime;
exports.LineComment = LineComment;
exports.Ln = Ln;
exports.Log10 = Log10;
exports.Log2 = Log2;
exports.Lss = Lss;
exports.Lte = Lte;
exports.MatchOp = MatchOp;
exports.MatrixSelector = MatrixSelector;
exports.Max = Max$1;
exports.MaxOverTime = MaxOverTime;
exports.MetricIdentifier = MetricIdentifier;
exports.Min = Min$1;
exports.MinOverTime = MinOverTime;
exports.Minute = Minute;
exports.Mod = Mod;
exports.Month = Month;
exports.Mul = Mul;
exports.Neq = Neq;
exports.NeqRegex = NeqRegex;
exports.NumberLiteral = NumberLiteral;
exports.Offset = Offset$1;
exports.OffsetExpr = OffsetExpr;
exports.On = On$1;
exports.OnOrIgnoring = OnOrIgnoring;
exports.Or = Or$1;
exports.ParenExpr = ParenExpr;
exports.Pow = Pow;
exports.PredictLinear = PredictLinear;
exports.PromQL = PromQL;
exports.Quantile = Quantile$1;
exports.QuantileOverTime = QuantileOverTime;
exports.Rate = Rate;
exports.Resets = Resets;
exports.Round = Round;
exports.Scalar = Scalar;
exports.Sgn = Sgn;
exports.SignedNumber = SignedNumber;
exports.Sort = Sort;
exports.SortDesc = SortDesc;
exports.Sqrt = Sqrt;
exports.Start = Start;
exports.Stddev = Stddev$1;
exports.StddevOverTime = StddevOverTime;
exports.Stdvar = Stdvar$1;
exports.StdvarOverTime = StdvarOverTime;
exports.StepInvariantExpr = StepInvariantExpr;
exports.StringLiteral = StringLiteral;
exports.Sub = Sub;
exports.SubqueryExpr = SubqueryExpr;
exports.Sum = Sum$1;
exports.SumOverTime = SumOverTime;
exports.Time = Time;
exports.Timestamp = Timestamp;
exports.Topk = Topk$1;
exports.UnaryExpr = UnaryExpr;
exports.UnaryOp = UnaryOp;
exports.Unless = Unless$1;
exports.Vector = Vector;
exports.VectorSelector = VectorSelector;
exports.Without = Without$1;
exports.Year = Year;
exports.parser = parser;
